/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Schema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schema{}

// Schema struct for Schema
type Schema struct {
	SchemaName *string `json:"schemaName,omitempty"`
	PrimaryKeyColumns []string `json:"primaryKeyColumns,omitempty"`
	DimensionFieldSpecs []DimensionFieldSpec `json:"dimensionFieldSpecs,omitempty"`
	MetricFieldSpecs []MetricFieldSpec `json:"metricFieldSpecs,omitempty"`
	DateTimeFieldSpecs []DateTimeFieldSpec `json:"dateTimeFieldSpecs,omitempty"`
	TimeFieldSpec *TimeFieldSpec `json:"timeFieldSpec,omitempty"`
}

// NewSchema instantiates a new Schema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchema() *Schema {
	this := Schema{}
	return &this
}

// NewSchemaWithDefaults instantiates a new Schema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaWithDefaults() *Schema {
	this := Schema{}
	return &this
}

// GetSchemaName returns the SchemaName field value if set, zero value otherwise.
func (o *Schema) GetSchemaName() string {
	if o == nil || IsNil(o.SchemaName) {
		var ret string
		return ret
	}
	return *o.SchemaName
}

// GetSchemaNameOk returns a tuple with the SchemaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetSchemaNameOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaName) {
		return nil, false
	}
	return o.SchemaName, true
}

// HasSchemaName returns a boolean if a field has been set.
func (o *Schema) HasSchemaName() bool {
	if o != nil && !IsNil(o.SchemaName) {
		return true
	}

	return false
}

// SetSchemaName gets a reference to the given string and assigns it to the SchemaName field.
func (o *Schema) SetSchemaName(v string) {
	o.SchemaName = &v
}

// GetPrimaryKeyColumns returns the PrimaryKeyColumns field value if set, zero value otherwise.
func (o *Schema) GetPrimaryKeyColumns() []string {
	if o == nil || IsNil(o.PrimaryKeyColumns) {
		var ret []string
		return ret
	}
	return o.PrimaryKeyColumns
}

// GetPrimaryKeyColumnsOk returns a tuple with the PrimaryKeyColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetPrimaryKeyColumnsOk() ([]string, bool) {
	if o == nil || IsNil(o.PrimaryKeyColumns) {
		return nil, false
	}
	return o.PrimaryKeyColumns, true
}

// HasPrimaryKeyColumns returns a boolean if a field has been set.
func (o *Schema) HasPrimaryKeyColumns() bool {
	if o != nil && !IsNil(o.PrimaryKeyColumns) {
		return true
	}

	return false
}

// SetPrimaryKeyColumns gets a reference to the given []string and assigns it to the PrimaryKeyColumns field.
func (o *Schema) SetPrimaryKeyColumns(v []string) {
	o.PrimaryKeyColumns = v
}

// GetDimensionFieldSpecs returns the DimensionFieldSpecs field value if set, zero value otherwise.
func (o *Schema) GetDimensionFieldSpecs() []DimensionFieldSpec {
	if o == nil || IsNil(o.DimensionFieldSpecs) {
		var ret []DimensionFieldSpec
		return ret
	}
	return o.DimensionFieldSpecs
}

// GetDimensionFieldSpecsOk returns a tuple with the DimensionFieldSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetDimensionFieldSpecsOk() ([]DimensionFieldSpec, bool) {
	if o == nil || IsNil(o.DimensionFieldSpecs) {
		return nil, false
	}
	return o.DimensionFieldSpecs, true
}

// HasDimensionFieldSpecs returns a boolean if a field has been set.
func (o *Schema) HasDimensionFieldSpecs() bool {
	if o != nil && !IsNil(o.DimensionFieldSpecs) {
		return true
	}

	return false
}

// SetDimensionFieldSpecs gets a reference to the given []DimensionFieldSpec and assigns it to the DimensionFieldSpecs field.
func (o *Schema) SetDimensionFieldSpecs(v []DimensionFieldSpec) {
	o.DimensionFieldSpecs = v
}

// GetMetricFieldSpecs returns the MetricFieldSpecs field value if set, zero value otherwise.
func (o *Schema) GetMetricFieldSpecs() []MetricFieldSpec {
	if o == nil || IsNil(o.MetricFieldSpecs) {
		var ret []MetricFieldSpec
		return ret
	}
	return o.MetricFieldSpecs
}

// GetMetricFieldSpecsOk returns a tuple with the MetricFieldSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetMetricFieldSpecsOk() ([]MetricFieldSpec, bool) {
	if o == nil || IsNil(o.MetricFieldSpecs) {
		return nil, false
	}
	return o.MetricFieldSpecs, true
}

// HasMetricFieldSpecs returns a boolean if a field has been set.
func (o *Schema) HasMetricFieldSpecs() bool {
	if o != nil && !IsNil(o.MetricFieldSpecs) {
		return true
	}

	return false
}

// SetMetricFieldSpecs gets a reference to the given []MetricFieldSpec and assigns it to the MetricFieldSpecs field.
func (o *Schema) SetMetricFieldSpecs(v []MetricFieldSpec) {
	o.MetricFieldSpecs = v
}

// GetDateTimeFieldSpecs returns the DateTimeFieldSpecs field value if set, zero value otherwise.
func (o *Schema) GetDateTimeFieldSpecs() []DateTimeFieldSpec {
	if o == nil || IsNil(o.DateTimeFieldSpecs) {
		var ret []DateTimeFieldSpec
		return ret
	}
	return o.DateTimeFieldSpecs
}

// GetDateTimeFieldSpecsOk returns a tuple with the DateTimeFieldSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetDateTimeFieldSpecsOk() ([]DateTimeFieldSpec, bool) {
	if o == nil || IsNil(o.DateTimeFieldSpecs) {
		return nil, false
	}
	return o.DateTimeFieldSpecs, true
}

// HasDateTimeFieldSpecs returns a boolean if a field has been set.
func (o *Schema) HasDateTimeFieldSpecs() bool {
	if o != nil && !IsNil(o.DateTimeFieldSpecs) {
		return true
	}

	return false
}

// SetDateTimeFieldSpecs gets a reference to the given []DateTimeFieldSpec and assigns it to the DateTimeFieldSpecs field.
func (o *Schema) SetDateTimeFieldSpecs(v []DateTimeFieldSpec) {
	o.DateTimeFieldSpecs = v
}

// GetTimeFieldSpec returns the TimeFieldSpec field value if set, zero value otherwise.
func (o *Schema) GetTimeFieldSpec() TimeFieldSpec {
	if o == nil || IsNil(o.TimeFieldSpec) {
		var ret TimeFieldSpec
		return ret
	}
	return *o.TimeFieldSpec
}

// GetTimeFieldSpecOk returns a tuple with the TimeFieldSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetTimeFieldSpecOk() (*TimeFieldSpec, bool) {
	if o == nil || IsNil(o.TimeFieldSpec) {
		return nil, false
	}
	return o.TimeFieldSpec, true
}

// HasTimeFieldSpec returns a boolean if a field has been set.
func (o *Schema) HasTimeFieldSpec() bool {
	if o != nil && !IsNil(o.TimeFieldSpec) {
		return true
	}

	return false
}

// SetTimeFieldSpec gets a reference to the given TimeFieldSpec and assigns it to the TimeFieldSpec field.
func (o *Schema) SetTimeFieldSpec(v TimeFieldSpec) {
	o.TimeFieldSpec = &v
}

func (o Schema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaName) {
		toSerialize["schemaName"] = o.SchemaName
	}
	if !IsNil(o.PrimaryKeyColumns) {
		toSerialize["primaryKeyColumns"] = o.PrimaryKeyColumns
	}
	if !IsNil(o.DimensionFieldSpecs) {
		toSerialize["dimensionFieldSpecs"] = o.DimensionFieldSpecs
	}
	if !IsNil(o.MetricFieldSpecs) {
		toSerialize["metricFieldSpecs"] = o.MetricFieldSpecs
	}
	if !IsNil(o.DateTimeFieldSpecs) {
		toSerialize["dateTimeFieldSpecs"] = o.DateTimeFieldSpecs
	}
	if !IsNil(o.TimeFieldSpec) {
		toSerialize["timeFieldSpec"] = o.TimeFieldSpec
	}
	return toSerialize, nil
}

type NullableSchema struct {
	value *Schema
	isSet bool
}

func (v NullableSchema) Get() *Schema {
	return v.value
}

func (v *NullableSchema) Set(val *Schema) {
	v.value = val
	v.isSet = true
}

func (v NullableSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchema(val *Schema) *NullableSchema {
	return &NullableSchema{value: val, isSet: true}
}

func (v NullableSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


