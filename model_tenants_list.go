/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TenantsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantsList{}

// TenantsList struct for TenantsList
type TenantsList struct {
	SERVER_TENANTS []string `json:"SERVER_TENANTS,omitempty"`
	BROKER_TENANTS []string `json:"BROKER_TENANTS,omitempty"`
}

// NewTenantsList instantiates a new TenantsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantsList() *TenantsList {
	this := TenantsList{}
	return &this
}

// NewTenantsListWithDefaults instantiates a new TenantsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantsListWithDefaults() *TenantsList {
	this := TenantsList{}
	return &this
}

// GetSERVER_TENANTS returns the SERVER_TENANTS field value if set, zero value otherwise.
func (o *TenantsList) GetSERVER_TENANTS() []string {
	if o == nil || IsNil(o.SERVER_TENANTS) {
		var ret []string
		return ret
	}
	return o.SERVER_TENANTS
}

// GetSERVER_TENANTSOk returns a tuple with the SERVER_TENANTS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsList) GetSERVER_TENANTSOk() ([]string, bool) {
	if o == nil || IsNil(o.SERVER_TENANTS) {
		return nil, false
	}
	return o.SERVER_TENANTS, true
}

// HasSERVER_TENANTS returns a boolean if a field has been set.
func (o *TenantsList) HasSERVER_TENANTS() bool {
	if o != nil && !IsNil(o.SERVER_TENANTS) {
		return true
	}

	return false
}

// SetSERVER_TENANTS gets a reference to the given []string and assigns it to the SERVER_TENANTS field.
func (o *TenantsList) SetSERVER_TENANTS(v []string) {
	o.SERVER_TENANTS = v
}

// GetBROKER_TENANTS returns the BROKER_TENANTS field value if set, zero value otherwise.
func (o *TenantsList) GetBROKER_TENANTS() []string {
	if o == nil || IsNil(o.BROKER_TENANTS) {
		var ret []string
		return ret
	}
	return o.BROKER_TENANTS
}

// GetBROKER_TENANTSOk returns a tuple with the BROKER_TENANTS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsList) GetBROKER_TENANTSOk() ([]string, bool) {
	if o == nil || IsNil(o.BROKER_TENANTS) {
		return nil, false
	}
	return o.BROKER_TENANTS, true
}

// HasBROKER_TENANTS returns a boolean if a field has been set.
func (o *TenantsList) HasBROKER_TENANTS() bool {
	if o != nil && !IsNil(o.BROKER_TENANTS) {
		return true
	}

	return false
}

// SetBROKER_TENANTS gets a reference to the given []string and assigns it to the BROKER_TENANTS field.
func (o *TenantsList) SetBROKER_TENANTS(v []string) {
	o.BROKER_TENANTS = v
}

func (o TenantsList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SERVER_TENANTS) {
		toSerialize["SERVER_TENANTS"] = o.SERVER_TENANTS
	}
	if !IsNil(o.BROKER_TENANTS) {
		toSerialize["BROKER_TENANTS"] = o.BROKER_TENANTS
	}
	return toSerialize, nil
}

type NullableTenantsList struct {
	value *TenantsList
	isSet bool
}

func (v NullableTenantsList) Get() *TenantsList {
	return v.value
}

func (v *NullableTenantsList) Set(val *TenantsList) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantsList) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantsList(val *TenantsList) *NullableTenantsList {
	return &NullableTenantsList{value: val, isSet: true}
}

func (v NullableTenantsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


