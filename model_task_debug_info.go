/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaskDebugInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskDebugInfo{}

// TaskDebugInfo struct for TaskDebugInfo
type TaskDebugInfo struct {
	TaskState *string `json:"taskState,omitempty"`
	SubtaskCount *TaskCount `json:"subtaskCount,omitempty"`
	StartTime *string `json:"startTime,omitempty"`
	ExecutionStartTime *string `json:"executionStartTime,omitempty"`
	FinishTime *string `json:"finishTime,omitempty"`
	SubtaskInfos []SubtaskDebugInfo `json:"subtaskInfos,omitempty"`
}

// NewTaskDebugInfo instantiates a new TaskDebugInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskDebugInfo() *TaskDebugInfo {
	this := TaskDebugInfo{}
	return &this
}

// NewTaskDebugInfoWithDefaults instantiates a new TaskDebugInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskDebugInfoWithDefaults() *TaskDebugInfo {
	this := TaskDebugInfo{}
	return &this
}

// GetTaskState returns the TaskState field value if set, zero value otherwise.
func (o *TaskDebugInfo) GetTaskState() string {
	if o == nil || IsNil(o.TaskState) {
		var ret string
		return ret
	}
	return *o.TaskState
}

// GetTaskStateOk returns a tuple with the TaskState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDebugInfo) GetTaskStateOk() (*string, bool) {
	if o == nil || IsNil(o.TaskState) {
		return nil, false
	}
	return o.TaskState, true
}

// HasTaskState returns a boolean if a field has been set.
func (o *TaskDebugInfo) HasTaskState() bool {
	if o != nil && !IsNil(o.TaskState) {
		return true
	}

	return false
}

// SetTaskState gets a reference to the given string and assigns it to the TaskState field.
func (o *TaskDebugInfo) SetTaskState(v string) {
	o.TaskState = &v
}

// GetSubtaskCount returns the SubtaskCount field value if set, zero value otherwise.
func (o *TaskDebugInfo) GetSubtaskCount() TaskCount {
	if o == nil || IsNil(o.SubtaskCount) {
		var ret TaskCount
		return ret
	}
	return *o.SubtaskCount
}

// GetSubtaskCountOk returns a tuple with the SubtaskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDebugInfo) GetSubtaskCountOk() (*TaskCount, bool) {
	if o == nil || IsNil(o.SubtaskCount) {
		return nil, false
	}
	return o.SubtaskCount, true
}

// HasSubtaskCount returns a boolean if a field has been set.
func (o *TaskDebugInfo) HasSubtaskCount() bool {
	if o != nil && !IsNil(o.SubtaskCount) {
		return true
	}

	return false
}

// SetSubtaskCount gets a reference to the given TaskCount and assigns it to the SubtaskCount field.
func (o *TaskDebugInfo) SetSubtaskCount(v TaskCount) {
	o.SubtaskCount = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *TaskDebugInfo) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDebugInfo) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *TaskDebugInfo) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *TaskDebugInfo) SetStartTime(v string) {
	o.StartTime = &v
}

// GetExecutionStartTime returns the ExecutionStartTime field value if set, zero value otherwise.
func (o *TaskDebugInfo) GetExecutionStartTime() string {
	if o == nil || IsNil(o.ExecutionStartTime) {
		var ret string
		return ret
	}
	return *o.ExecutionStartTime
}

// GetExecutionStartTimeOk returns a tuple with the ExecutionStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDebugInfo) GetExecutionStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionStartTime) {
		return nil, false
	}
	return o.ExecutionStartTime, true
}

// HasExecutionStartTime returns a boolean if a field has been set.
func (o *TaskDebugInfo) HasExecutionStartTime() bool {
	if o != nil && !IsNil(o.ExecutionStartTime) {
		return true
	}

	return false
}

// SetExecutionStartTime gets a reference to the given string and assigns it to the ExecutionStartTime field.
func (o *TaskDebugInfo) SetExecutionStartTime(v string) {
	o.ExecutionStartTime = &v
}

// GetFinishTime returns the FinishTime field value if set, zero value otherwise.
func (o *TaskDebugInfo) GetFinishTime() string {
	if o == nil || IsNil(o.FinishTime) {
		var ret string
		return ret
	}
	return *o.FinishTime
}

// GetFinishTimeOk returns a tuple with the FinishTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDebugInfo) GetFinishTimeOk() (*string, bool) {
	if o == nil || IsNil(o.FinishTime) {
		return nil, false
	}
	return o.FinishTime, true
}

// HasFinishTime returns a boolean if a field has been set.
func (o *TaskDebugInfo) HasFinishTime() bool {
	if o != nil && !IsNil(o.FinishTime) {
		return true
	}

	return false
}

// SetFinishTime gets a reference to the given string and assigns it to the FinishTime field.
func (o *TaskDebugInfo) SetFinishTime(v string) {
	o.FinishTime = &v
}

// GetSubtaskInfos returns the SubtaskInfos field value if set, zero value otherwise.
func (o *TaskDebugInfo) GetSubtaskInfos() []SubtaskDebugInfo {
	if o == nil || IsNil(o.SubtaskInfos) {
		var ret []SubtaskDebugInfo
		return ret
	}
	return o.SubtaskInfos
}

// GetSubtaskInfosOk returns a tuple with the SubtaskInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDebugInfo) GetSubtaskInfosOk() ([]SubtaskDebugInfo, bool) {
	if o == nil || IsNil(o.SubtaskInfos) {
		return nil, false
	}
	return o.SubtaskInfos, true
}

// HasSubtaskInfos returns a boolean if a field has been set.
func (o *TaskDebugInfo) HasSubtaskInfos() bool {
	if o != nil && !IsNil(o.SubtaskInfos) {
		return true
	}

	return false
}

// SetSubtaskInfos gets a reference to the given []SubtaskDebugInfo and assigns it to the SubtaskInfos field.
func (o *TaskDebugInfo) SetSubtaskInfos(v []SubtaskDebugInfo) {
	o.SubtaskInfos = v
}

func (o TaskDebugInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskDebugInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaskState) {
		toSerialize["taskState"] = o.TaskState
	}
	if !IsNil(o.SubtaskCount) {
		toSerialize["subtaskCount"] = o.SubtaskCount
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.ExecutionStartTime) {
		toSerialize["executionStartTime"] = o.ExecutionStartTime
	}
	if !IsNil(o.FinishTime) {
		toSerialize["finishTime"] = o.FinishTime
	}
	if !IsNil(o.SubtaskInfos) {
		toSerialize["subtaskInfos"] = o.SubtaskInfos
	}
	return toSerialize, nil
}

type NullableTaskDebugInfo struct {
	value *TaskDebugInfo
	isSet bool
}

func (v NullableTaskDebugInfo) Get() *TaskDebugInfo {
	return v.value
}

func (v *NullableTaskDebugInfo) Set(val *TaskDebugInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskDebugInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskDebugInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskDebugInfo(val *TaskDebugInfo) *NullableTaskDebugInfo {
	return &NullableTaskDebugInfo{value: val, isSet: true}
}

func (v NullableTaskDebugInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskDebugInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


