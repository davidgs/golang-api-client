/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InstancePartitions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstancePartitions{}

// InstancePartitions struct for InstancePartitions
type InstancePartitions struct {
	InstancePartitionsName *string `json:"instancePartitionsName,omitempty"`
	PartitionToInstancesMap *map[string][]string `json:"partitionToInstancesMap,omitempty"`
}

// NewInstancePartitions instantiates a new InstancePartitions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstancePartitions() *InstancePartitions {
	this := InstancePartitions{}
	return &this
}

// NewInstancePartitionsWithDefaults instantiates a new InstancePartitions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstancePartitionsWithDefaults() *InstancePartitions {
	this := InstancePartitions{}
	return &this
}

// GetInstancePartitionsName returns the InstancePartitionsName field value if set, zero value otherwise.
func (o *InstancePartitions) GetInstancePartitionsName() string {
	if o == nil || IsNil(o.InstancePartitionsName) {
		var ret string
		return ret
	}
	return *o.InstancePartitionsName
}

// GetInstancePartitionsNameOk returns a tuple with the InstancePartitionsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancePartitions) GetInstancePartitionsNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstancePartitionsName) {
		return nil, false
	}
	return o.InstancePartitionsName, true
}

// HasInstancePartitionsName returns a boolean if a field has been set.
func (o *InstancePartitions) HasInstancePartitionsName() bool {
	if o != nil && !IsNil(o.InstancePartitionsName) {
		return true
	}

	return false
}

// SetInstancePartitionsName gets a reference to the given string and assigns it to the InstancePartitionsName field.
func (o *InstancePartitions) SetInstancePartitionsName(v string) {
	o.InstancePartitionsName = &v
}

// GetPartitionToInstancesMap returns the PartitionToInstancesMap field value if set, zero value otherwise.
func (o *InstancePartitions) GetPartitionToInstancesMap() map[string][]string {
	if o == nil || IsNil(o.PartitionToInstancesMap) {
		var ret map[string][]string
		return ret
	}
	return *o.PartitionToInstancesMap
}

// GetPartitionToInstancesMapOk returns a tuple with the PartitionToInstancesMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancePartitions) GetPartitionToInstancesMapOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.PartitionToInstancesMap) {
		return nil, false
	}
	return o.PartitionToInstancesMap, true
}

// HasPartitionToInstancesMap returns a boolean if a field has been set.
func (o *InstancePartitions) HasPartitionToInstancesMap() bool {
	if o != nil && !IsNil(o.PartitionToInstancesMap) {
		return true
	}

	return false
}

// SetPartitionToInstancesMap gets a reference to the given map[string][]string and assigns it to the PartitionToInstancesMap field.
func (o *InstancePartitions) SetPartitionToInstancesMap(v map[string][]string) {
	o.PartitionToInstancesMap = &v
}

func (o InstancePartitions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstancePartitions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: instancePartitionsName is readOnly
	// skip: partitionToInstancesMap is readOnly
	return toSerialize, nil
}

type NullableInstancePartitions struct {
	value *InstancePartitions
	isSet bool
}

func (v NullableInstancePartitions) Get() *InstancePartitions {
	return v.value
}

func (v *NullableInstancePartitions) Set(val *InstancePartitions) {
	v.value = val
	v.isSet = true
}

func (v NullableInstancePartitions) IsSet() bool {
	return v.isSet
}

func (v *NullableInstancePartitions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstancePartitions(val *InstancePartitions) *NullableInstancePartitions {
	return &NullableInstancePartitions{value: val, isSet: true}
}

func (v NullableInstancePartitions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstancePartitions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


