/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LeadControllerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LeadControllerResponse{}

// LeadControllerResponse struct for LeadControllerResponse
type LeadControllerResponse struct {
	LeadControllerResourceEnabled *bool `json:"leadControllerResourceEnabled,omitempty"`
	LeadControllerEntryMap *map[string]LeadControllerEntry `json:"leadControllerEntryMap,omitempty"`
}

// NewLeadControllerResponse instantiates a new LeadControllerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeadControllerResponse() *LeadControllerResponse {
	this := LeadControllerResponse{}
	return &this
}

// NewLeadControllerResponseWithDefaults instantiates a new LeadControllerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeadControllerResponseWithDefaults() *LeadControllerResponse {
	this := LeadControllerResponse{}
	return &this
}

// GetLeadControllerResourceEnabled returns the LeadControllerResourceEnabled field value if set, zero value otherwise.
func (o *LeadControllerResponse) GetLeadControllerResourceEnabled() bool {
	if o == nil || IsNil(o.LeadControllerResourceEnabled) {
		var ret bool
		return ret
	}
	return *o.LeadControllerResourceEnabled
}

// GetLeadControllerResourceEnabledOk returns a tuple with the LeadControllerResourceEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeadControllerResponse) GetLeadControllerResourceEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LeadControllerResourceEnabled) {
		return nil, false
	}
	return o.LeadControllerResourceEnabled, true
}

// HasLeadControllerResourceEnabled returns a boolean if a field has been set.
func (o *LeadControllerResponse) HasLeadControllerResourceEnabled() bool {
	if o != nil && !IsNil(o.LeadControllerResourceEnabled) {
		return true
	}

	return false
}

// SetLeadControllerResourceEnabled gets a reference to the given bool and assigns it to the LeadControllerResourceEnabled field.
func (o *LeadControllerResponse) SetLeadControllerResourceEnabled(v bool) {
	o.LeadControllerResourceEnabled = &v
}

// GetLeadControllerEntryMap returns the LeadControllerEntryMap field value if set, zero value otherwise.
func (o *LeadControllerResponse) GetLeadControllerEntryMap() map[string]LeadControllerEntry {
	if o == nil || IsNil(o.LeadControllerEntryMap) {
		var ret map[string]LeadControllerEntry
		return ret
	}
	return *o.LeadControllerEntryMap
}

// GetLeadControllerEntryMapOk returns a tuple with the LeadControllerEntryMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeadControllerResponse) GetLeadControllerEntryMapOk() (*map[string]LeadControllerEntry, bool) {
	if o == nil || IsNil(o.LeadControllerEntryMap) {
		return nil, false
	}
	return o.LeadControllerEntryMap, true
}

// HasLeadControllerEntryMap returns a boolean if a field has been set.
func (o *LeadControllerResponse) HasLeadControllerEntryMap() bool {
	if o != nil && !IsNil(o.LeadControllerEntryMap) {
		return true
	}

	return false
}

// SetLeadControllerEntryMap gets a reference to the given map[string]LeadControllerEntry and assigns it to the LeadControllerEntryMap field.
func (o *LeadControllerResponse) SetLeadControllerEntryMap(v map[string]LeadControllerEntry) {
	o.LeadControllerEntryMap = &v
}

func (o LeadControllerResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LeadControllerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LeadControllerResourceEnabled) {
		toSerialize["leadControllerResourceEnabled"] = o.LeadControllerResourceEnabled
	}
	if !IsNil(o.LeadControllerEntryMap) {
		toSerialize["leadControllerEntryMap"] = o.LeadControllerEntryMap
	}
	return toSerialize, nil
}

type NullableLeadControllerResponse struct {
	value *LeadControllerResponse
	isSet bool
}

func (v NullableLeadControllerResponse) Get() *LeadControllerResponse {
	return v.value
}

func (v *NullableLeadControllerResponse) Set(val *LeadControllerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLeadControllerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLeadControllerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeadControllerResponse(val *LeadControllerResponse) *NullableLeadControllerResponse {
	return &NullableLeadControllerResponse{value: val, isSet: true}
}

func (v NullableLeadControllerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeadControllerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


