/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DedupConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DedupConfig{}

// DedupConfig struct for DedupConfig
type DedupConfig struct {
	DedupEnabled bool `json:"dedupEnabled"`
	HashFunction *string `json:"hashFunction,omitempty"`
}

// NewDedupConfig instantiates a new DedupConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedupConfig(dedupEnabled bool) *DedupConfig {
	this := DedupConfig{}
	this.DedupEnabled = dedupEnabled
	return &this
}

// NewDedupConfigWithDefaults instantiates a new DedupConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedupConfigWithDefaults() *DedupConfig {
	this := DedupConfig{}
	return &this
}

// GetDedupEnabled returns the DedupEnabled field value
func (o *DedupConfig) GetDedupEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DedupEnabled
}

// GetDedupEnabledOk returns a tuple with the DedupEnabled field value
// and a boolean to check if the value has been set.
func (o *DedupConfig) GetDedupEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DedupEnabled, true
}

// SetDedupEnabled sets field value
func (o *DedupConfig) SetDedupEnabled(v bool) {
	o.DedupEnabled = v
}

// GetHashFunction returns the HashFunction field value if set, zero value otherwise.
func (o *DedupConfig) GetHashFunction() string {
	if o == nil || IsNil(o.HashFunction) {
		var ret string
		return ret
	}
	return *o.HashFunction
}

// GetHashFunctionOk returns a tuple with the HashFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DedupConfig) GetHashFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.HashFunction) {
		return nil, false
	}
	return o.HashFunction, true
}

// HasHashFunction returns a boolean if a field has been set.
func (o *DedupConfig) HasHashFunction() bool {
	if o != nil && !IsNil(o.HashFunction) {
		return true
	}

	return false
}

// SetHashFunction gets a reference to the given string and assigns it to the HashFunction field.
func (o *DedupConfig) SetHashFunction(v string) {
	o.HashFunction = &v
}

func (o DedupConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DedupConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: dedupEnabled is readOnly
	// skip: hashFunction is readOnly
	return toSerialize, nil
}

type NullableDedupConfig struct {
	value *DedupConfig
	isSet bool
}

func (v NullableDedupConfig) Get() *DedupConfig {
	return v.value
}

func (v *NullableDedupConfig) Set(val *DedupConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDedupConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDedupConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedupConfig(val *DedupConfig) *NullableDedupConfig {
	return &NullableDedupConfig{value: val, isSet: true}
}

func (v NullableDedupConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedupConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


