/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RebalanceResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RebalanceResult{}

// RebalanceResult struct for RebalanceResult
type RebalanceResult struct {
	JobId *string `json:"jobId,omitempty"`
	Status *string `json:"status,omitempty"`
	Description *string `json:"description,omitempty"`
	InstanceAssignment *map[string]InstancePartitions `json:"instanceAssignment,omitempty"`
	TierInstanceAssignment *map[string]InstancePartitions `json:"tierInstanceAssignment,omitempty"`
	SegmentAssignment *map[string]map[string]string `json:"segmentAssignment,omitempty"`
}

// NewRebalanceResult instantiates a new RebalanceResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRebalanceResult() *RebalanceResult {
	this := RebalanceResult{}
	return &this
}

// NewRebalanceResultWithDefaults instantiates a new RebalanceResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRebalanceResultWithDefaults() *RebalanceResult {
	this := RebalanceResult{}
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *RebalanceResult) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebalanceResult) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *RebalanceResult) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *RebalanceResult) SetJobId(v string) {
	o.JobId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RebalanceResult) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebalanceResult) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RebalanceResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RebalanceResult) SetStatus(v string) {
	o.Status = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RebalanceResult) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebalanceResult) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RebalanceResult) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RebalanceResult) SetDescription(v string) {
	o.Description = &v
}

// GetInstanceAssignment returns the InstanceAssignment field value if set, zero value otherwise.
func (o *RebalanceResult) GetInstanceAssignment() map[string]InstancePartitions {
	if o == nil || IsNil(o.InstanceAssignment) {
		var ret map[string]InstancePartitions
		return ret
	}
	return *o.InstanceAssignment
}

// GetInstanceAssignmentOk returns a tuple with the InstanceAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebalanceResult) GetInstanceAssignmentOk() (*map[string]InstancePartitions, bool) {
	if o == nil || IsNil(o.InstanceAssignment) {
		return nil, false
	}
	return o.InstanceAssignment, true
}

// HasInstanceAssignment returns a boolean if a field has been set.
func (o *RebalanceResult) HasInstanceAssignment() bool {
	if o != nil && !IsNil(o.InstanceAssignment) {
		return true
	}

	return false
}

// SetInstanceAssignment gets a reference to the given map[string]InstancePartitions and assigns it to the InstanceAssignment field.
func (o *RebalanceResult) SetInstanceAssignment(v map[string]InstancePartitions) {
	o.InstanceAssignment = &v
}

// GetTierInstanceAssignment returns the TierInstanceAssignment field value if set, zero value otherwise.
func (o *RebalanceResult) GetTierInstanceAssignment() map[string]InstancePartitions {
	if o == nil || IsNil(o.TierInstanceAssignment) {
		var ret map[string]InstancePartitions
		return ret
	}
	return *o.TierInstanceAssignment
}

// GetTierInstanceAssignmentOk returns a tuple with the TierInstanceAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebalanceResult) GetTierInstanceAssignmentOk() (*map[string]InstancePartitions, bool) {
	if o == nil || IsNil(o.TierInstanceAssignment) {
		return nil, false
	}
	return o.TierInstanceAssignment, true
}

// HasTierInstanceAssignment returns a boolean if a field has been set.
func (o *RebalanceResult) HasTierInstanceAssignment() bool {
	if o != nil && !IsNil(o.TierInstanceAssignment) {
		return true
	}

	return false
}

// SetTierInstanceAssignment gets a reference to the given map[string]InstancePartitions and assigns it to the TierInstanceAssignment field.
func (o *RebalanceResult) SetTierInstanceAssignment(v map[string]InstancePartitions) {
	o.TierInstanceAssignment = &v
}

// GetSegmentAssignment returns the SegmentAssignment field value if set, zero value otherwise.
func (o *RebalanceResult) GetSegmentAssignment() map[string]map[string]string {
	if o == nil || IsNil(o.SegmentAssignment) {
		var ret map[string]map[string]string
		return ret
	}
	return *o.SegmentAssignment
}

// GetSegmentAssignmentOk returns a tuple with the SegmentAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebalanceResult) GetSegmentAssignmentOk() (*map[string]map[string]string, bool) {
	if o == nil || IsNil(o.SegmentAssignment) {
		return nil, false
	}
	return o.SegmentAssignment, true
}

// HasSegmentAssignment returns a boolean if a field has been set.
func (o *RebalanceResult) HasSegmentAssignment() bool {
	if o != nil && !IsNil(o.SegmentAssignment) {
		return true
	}

	return false
}

// SetSegmentAssignment gets a reference to the given map[string]map[string]string and assigns it to the SegmentAssignment field.
func (o *RebalanceResult) SetSegmentAssignment(v map[string]map[string]string) {
	o.SegmentAssignment = &v
}

func (o RebalanceResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RebalanceResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: jobId is readOnly
	// skip: status is readOnly
	// skip: description is readOnly
	// skip: instanceAssignment is readOnly
	// skip: tierInstanceAssignment is readOnly
	// skip: segmentAssignment is readOnly
	return toSerialize, nil
}

type NullableRebalanceResult struct {
	value *RebalanceResult
	isSet bool
}

func (v NullableRebalanceResult) Get() *RebalanceResult {
	return v.value
}

func (v *NullableRebalanceResult) Set(val *RebalanceResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRebalanceResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRebalanceResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebalanceResult(val *RebalanceResult) *NullableRebalanceResult {
	return &NullableRebalanceResult{value: val, isSet: true}
}

func (v NullableRebalanceResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebalanceResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


