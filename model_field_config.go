/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FieldConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldConfig{}

// FieldConfig struct for FieldConfig
type FieldConfig struct {
	Name string `json:"name"`
	EncodingType *string `json:"encodingType,omitempty"`
	IndexType *string `json:"indexType,omitempty"`
	IndexTypes []string `json:"indexTypes,omitempty"`
	CompressionCodec *string `json:"compressionCodec,omitempty"`
	TimestampConfig *TimestampConfig `json:"timestampConfig,omitempty"`
	Properties *map[string]string `json:"properties,omitempty"`
}

// NewFieldConfig instantiates a new FieldConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldConfig(name string) *FieldConfig {
	this := FieldConfig{}
	this.Name = name
	return &this
}

// NewFieldConfigWithDefaults instantiates a new FieldConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldConfigWithDefaults() *FieldConfig {
	this := FieldConfig{}
	return &this
}

// GetName returns the Name field value
func (o *FieldConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FieldConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FieldConfig) SetName(v string) {
	o.Name = v
}

// GetEncodingType returns the EncodingType field value if set, zero value otherwise.
func (o *FieldConfig) GetEncodingType() string {
	if o == nil || IsNil(o.EncodingType) {
		var ret string
		return ret
	}
	return *o.EncodingType
}

// GetEncodingTypeOk returns a tuple with the EncodingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldConfig) GetEncodingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EncodingType) {
		return nil, false
	}
	return o.EncodingType, true
}

// HasEncodingType returns a boolean if a field has been set.
func (o *FieldConfig) HasEncodingType() bool {
	if o != nil && !IsNil(o.EncodingType) {
		return true
	}

	return false
}

// SetEncodingType gets a reference to the given string and assigns it to the EncodingType field.
func (o *FieldConfig) SetEncodingType(v string) {
	o.EncodingType = &v
}

// GetIndexType returns the IndexType field value if set, zero value otherwise.
func (o *FieldConfig) GetIndexType() string {
	if o == nil || IsNil(o.IndexType) {
		var ret string
		return ret
	}
	return *o.IndexType
}

// GetIndexTypeOk returns a tuple with the IndexType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldConfig) GetIndexTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IndexType) {
		return nil, false
	}
	return o.IndexType, true
}

// HasIndexType returns a boolean if a field has been set.
func (o *FieldConfig) HasIndexType() bool {
	if o != nil && !IsNil(o.IndexType) {
		return true
	}

	return false
}

// SetIndexType gets a reference to the given string and assigns it to the IndexType field.
func (o *FieldConfig) SetIndexType(v string) {
	o.IndexType = &v
}

// GetIndexTypes returns the IndexTypes field value if set, zero value otherwise.
func (o *FieldConfig) GetIndexTypes() []string {
	if o == nil || IsNil(o.IndexTypes) {
		var ret []string
		return ret
	}
	return o.IndexTypes
}

// GetIndexTypesOk returns a tuple with the IndexTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldConfig) GetIndexTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.IndexTypes) {
		return nil, false
	}
	return o.IndexTypes, true
}

// HasIndexTypes returns a boolean if a field has been set.
func (o *FieldConfig) HasIndexTypes() bool {
	if o != nil && !IsNil(o.IndexTypes) {
		return true
	}

	return false
}

// SetIndexTypes gets a reference to the given []string and assigns it to the IndexTypes field.
func (o *FieldConfig) SetIndexTypes(v []string) {
	o.IndexTypes = v
}

// GetCompressionCodec returns the CompressionCodec field value if set, zero value otherwise.
func (o *FieldConfig) GetCompressionCodec() string {
	if o == nil || IsNil(o.CompressionCodec) {
		var ret string
		return ret
	}
	return *o.CompressionCodec
}

// GetCompressionCodecOk returns a tuple with the CompressionCodec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldConfig) GetCompressionCodecOk() (*string, bool) {
	if o == nil || IsNil(o.CompressionCodec) {
		return nil, false
	}
	return o.CompressionCodec, true
}

// HasCompressionCodec returns a boolean if a field has been set.
func (o *FieldConfig) HasCompressionCodec() bool {
	if o != nil && !IsNil(o.CompressionCodec) {
		return true
	}

	return false
}

// SetCompressionCodec gets a reference to the given string and assigns it to the CompressionCodec field.
func (o *FieldConfig) SetCompressionCodec(v string) {
	o.CompressionCodec = &v
}

// GetTimestampConfig returns the TimestampConfig field value if set, zero value otherwise.
func (o *FieldConfig) GetTimestampConfig() TimestampConfig {
	if o == nil || IsNil(o.TimestampConfig) {
		var ret TimestampConfig
		return ret
	}
	return *o.TimestampConfig
}

// GetTimestampConfigOk returns a tuple with the TimestampConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldConfig) GetTimestampConfigOk() (*TimestampConfig, bool) {
	if o == nil || IsNil(o.TimestampConfig) {
		return nil, false
	}
	return o.TimestampConfig, true
}

// HasTimestampConfig returns a boolean if a field has been set.
func (o *FieldConfig) HasTimestampConfig() bool {
	if o != nil && !IsNil(o.TimestampConfig) {
		return true
	}

	return false
}

// SetTimestampConfig gets a reference to the given TimestampConfig and assigns it to the TimestampConfig field.
func (o *FieldConfig) SetTimestampConfig(v TimestampConfig) {
	o.TimestampConfig = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *FieldConfig) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldConfig) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *FieldConfig) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *FieldConfig) SetProperties(v map[string]string) {
	o.Properties = &v
}

func (o FieldConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: name is readOnly
	// skip: encodingType is readOnly
	// skip: indexType is readOnly
	// skip: indexTypes is readOnly
	// skip: compressionCodec is readOnly
	if !IsNil(o.TimestampConfig) {
		toSerialize["timestampConfig"] = o.TimestampConfig
	}
	// skip: properties is readOnly
	return toSerialize, nil
}

type NullableFieldConfig struct {
	value *FieldConfig
	isSet bool
}

func (v NullableFieldConfig) Get() *FieldConfig {
	return v.value
}

func (v *NullableFieldConfig) Set(val *FieldConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldConfig(val *FieldConfig) *NullableFieldConfig {
	return &NullableFieldConfig{value: val, isSet: true}
}

func (v NullableFieldConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


