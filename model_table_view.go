/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TableView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableView{}

// TableView struct for TableView
type TableView struct {
	OFFLINE *map[string]map[string]string `json:"OFFLINE,omitempty"`
	REALTIME *map[string]map[string]string `json:"REALTIME,omitempty"`
}

// NewTableView instantiates a new TableView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableView() *TableView {
	this := TableView{}
	return &this
}

// NewTableViewWithDefaults instantiates a new TableView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableViewWithDefaults() *TableView {
	this := TableView{}
	return &this
}

// GetOFFLINE returns the OFFLINE field value if set, zero value otherwise.
func (o *TableView) GetOFFLINE() map[string]map[string]string {
	if o == nil || IsNil(o.OFFLINE) {
		var ret map[string]map[string]string
		return ret
	}
	return *o.OFFLINE
}

// GetOFFLINEOk returns a tuple with the OFFLINE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableView) GetOFFLINEOk() (*map[string]map[string]string, bool) {
	if o == nil || IsNil(o.OFFLINE) {
		return nil, false
	}
	return o.OFFLINE, true
}

// HasOFFLINE returns a boolean if a field has been set.
func (o *TableView) HasOFFLINE() bool {
	if o != nil && !IsNil(o.OFFLINE) {
		return true
	}

	return false
}

// SetOFFLINE gets a reference to the given map[string]map[string]string and assigns it to the OFFLINE field.
func (o *TableView) SetOFFLINE(v map[string]map[string]string) {
	o.OFFLINE = &v
}

// GetREALTIME returns the REALTIME field value if set, zero value otherwise.
func (o *TableView) GetREALTIME() map[string]map[string]string {
	if o == nil || IsNil(o.REALTIME) {
		var ret map[string]map[string]string
		return ret
	}
	return *o.REALTIME
}

// GetREALTIMEOk returns a tuple with the REALTIME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableView) GetREALTIMEOk() (*map[string]map[string]string, bool) {
	if o == nil || IsNil(o.REALTIME) {
		return nil, false
	}
	return o.REALTIME, true
}

// HasREALTIME returns a boolean if a field has been set.
func (o *TableView) HasREALTIME() bool {
	if o != nil && !IsNil(o.REALTIME) {
		return true
	}

	return false
}

// SetREALTIME gets a reference to the given map[string]map[string]string and assigns it to the REALTIME field.
func (o *TableView) SetREALTIME(v map[string]map[string]string) {
	o.REALTIME = &v
}

func (o TableView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OFFLINE) {
		toSerialize["OFFLINE"] = o.OFFLINE
	}
	if !IsNil(o.REALTIME) {
		toSerialize["REALTIME"] = o.REALTIME
	}
	return toSerialize, nil
}

type NullableTableView struct {
	value *TableView
	isSet bool
}

func (v NullableTableView) Get() *TableView {
	return v.value
}

func (v *NullableTableView) Set(val *TableView) {
	v.value = val
	v.isSet = true
}

func (v NullableTableView) IsSet() bool {
	return v.isSet
}

func (v *NullableTableView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableView(val *TableView) *NullableTableView {
	return &NullableTableView{value: val, isSet: true}
}

func (v NullableTableView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


