/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigSuccessResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigSuccessResponse{}

// ConfigSuccessResponse struct for ConfigSuccessResponse
type ConfigSuccessResponse struct {
	UnrecognizedProperties map[string]map[string]interface{} `json:"unrecognizedProperties,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewConfigSuccessResponse instantiates a new ConfigSuccessResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigSuccessResponse() *ConfigSuccessResponse {
	this := ConfigSuccessResponse{}
	return &this
}

// NewConfigSuccessResponseWithDefaults instantiates a new ConfigSuccessResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigSuccessResponseWithDefaults() *ConfigSuccessResponse {
	this := ConfigSuccessResponse{}
	return &this
}

// GetUnrecognizedProperties returns the UnrecognizedProperties field value if set, zero value otherwise.
func (o *ConfigSuccessResponse) GetUnrecognizedProperties() map[string]map[string]interface{} {
	if o == nil || IsNil(o.UnrecognizedProperties) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.UnrecognizedProperties
}

// GetUnrecognizedPropertiesOk returns a tuple with the UnrecognizedProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSuccessResponse) GetUnrecognizedPropertiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.UnrecognizedProperties) {
		return map[string]map[string]interface{}{}, false
	}
	return o.UnrecognizedProperties, true
}

// HasUnrecognizedProperties returns a boolean if a field has been set.
func (o *ConfigSuccessResponse) HasUnrecognizedProperties() bool {
	if o != nil && !IsNil(o.UnrecognizedProperties) {
		return true
	}

	return false
}

// SetUnrecognizedProperties gets a reference to the given map[string]map[string]interface{} and assigns it to the UnrecognizedProperties field.
func (o *ConfigSuccessResponse) SetUnrecognizedProperties(v map[string]map[string]interface{}) {
	o.UnrecognizedProperties = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConfigSuccessResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSuccessResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConfigSuccessResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConfigSuccessResponse) SetStatus(v string) {
	o.Status = &v
}

func (o ConfigSuccessResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigSuccessResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UnrecognizedProperties) {
		toSerialize["unrecognizedProperties"] = o.UnrecognizedProperties
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableConfigSuccessResponse struct {
	value *ConfigSuccessResponse
	isSet bool
}

func (v NullableConfigSuccessResponse) Get() *ConfigSuccessResponse {
	return v.value
}

func (v *NullableConfigSuccessResponse) Set(val *ConfigSuccessResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigSuccessResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigSuccessResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigSuccessResponse(val *ConfigSuccessResponse) *NullableConfigSuccessResponse {
	return &NullableConfigSuccessResponse{value: val, isSet: true}
}

func (v NullableConfigSuccessResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigSuccessResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


