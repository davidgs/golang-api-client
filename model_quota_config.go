/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QuotaConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuotaConfig{}

// QuotaConfig struct for QuotaConfig
type QuotaConfig struct {
	Storage *string `json:"storage,omitempty"`
	MaxQueriesPerSecond *string `json:"maxQueriesPerSecond,omitempty"`
}

// NewQuotaConfig instantiates a new QuotaConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotaConfig() *QuotaConfig {
	this := QuotaConfig{}
	return &this
}

// NewQuotaConfigWithDefaults instantiates a new QuotaConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaConfigWithDefaults() *QuotaConfig {
	this := QuotaConfig{}
	return &this
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *QuotaConfig) GetStorage() string {
	if o == nil || IsNil(o.Storage) {
		var ret string
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaConfig) GetStorageOk() (*string, bool) {
	if o == nil || IsNil(o.Storage) {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *QuotaConfig) HasStorage() bool {
	if o != nil && !IsNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given string and assigns it to the Storage field.
func (o *QuotaConfig) SetStorage(v string) {
	o.Storage = &v
}

// GetMaxQueriesPerSecond returns the MaxQueriesPerSecond field value if set, zero value otherwise.
func (o *QuotaConfig) GetMaxQueriesPerSecond() string {
	if o == nil || IsNil(o.MaxQueriesPerSecond) {
		var ret string
		return ret
	}
	return *o.MaxQueriesPerSecond
}

// GetMaxQueriesPerSecondOk returns a tuple with the MaxQueriesPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaConfig) GetMaxQueriesPerSecondOk() (*string, bool) {
	if o == nil || IsNil(o.MaxQueriesPerSecond) {
		return nil, false
	}
	return o.MaxQueriesPerSecond, true
}

// HasMaxQueriesPerSecond returns a boolean if a field has been set.
func (o *QuotaConfig) HasMaxQueriesPerSecond() bool {
	if o != nil && !IsNil(o.MaxQueriesPerSecond) {
		return true
	}

	return false
}

// SetMaxQueriesPerSecond gets a reference to the given string and assigns it to the MaxQueriesPerSecond field.
func (o *QuotaConfig) SetMaxQueriesPerSecond(v string) {
	o.MaxQueriesPerSecond = &v
}

func (o QuotaConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuotaConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: storage is readOnly
	// skip: maxQueriesPerSecond is readOnly
	return toSerialize, nil
}

type NullableQuotaConfig struct {
	value *QuotaConfig
	isSet bool
}

func (v NullableQuotaConfig) Get() *QuotaConfig {
	return v.value
}

func (v *NullableQuotaConfig) Set(val *QuotaConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotaConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotaConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotaConfig(val *QuotaConfig) *NullableQuotaConfig {
	return &NullableQuotaConfig{value: val, isSet: true}
}

func (v NullableQuotaConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotaConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


