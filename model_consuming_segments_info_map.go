/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConsumingSegmentsInfoMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsumingSegmentsInfoMap{}

// ConsumingSegmentsInfoMap struct for ConsumingSegmentsInfoMap
type ConsumingSegmentsInfoMap struct {
	SegmentToConsumingInfoMap *map[string][]ConsumingSegmentInfo `json:"_segmentToConsumingInfoMap,omitempty"`
}

// NewConsumingSegmentsInfoMap instantiates a new ConsumingSegmentsInfoMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumingSegmentsInfoMap() *ConsumingSegmentsInfoMap {
	this := ConsumingSegmentsInfoMap{}
	return &this
}

// NewConsumingSegmentsInfoMapWithDefaults instantiates a new ConsumingSegmentsInfoMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumingSegmentsInfoMapWithDefaults() *ConsumingSegmentsInfoMap {
	this := ConsumingSegmentsInfoMap{}
	return &this
}

// GetSegmentToConsumingInfoMap returns the SegmentToConsumingInfoMap field value if set, zero value otherwise.
func (o *ConsumingSegmentsInfoMap) GetSegmentToConsumingInfoMap() map[string][]ConsumingSegmentInfo {
	if o == nil || IsNil(o.SegmentToConsumingInfoMap) {
		var ret map[string][]ConsumingSegmentInfo
		return ret
	}
	return *o.SegmentToConsumingInfoMap
}

// GetSegmentToConsumingInfoMapOk returns a tuple with the SegmentToConsumingInfoMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumingSegmentsInfoMap) GetSegmentToConsumingInfoMapOk() (*map[string][]ConsumingSegmentInfo, bool) {
	if o == nil || IsNil(o.SegmentToConsumingInfoMap) {
		return nil, false
	}
	return o.SegmentToConsumingInfoMap, true
}

// HasSegmentToConsumingInfoMap returns a boolean if a field has been set.
func (o *ConsumingSegmentsInfoMap) HasSegmentToConsumingInfoMap() bool {
	if o != nil && !IsNil(o.SegmentToConsumingInfoMap) {
		return true
	}

	return false
}

// SetSegmentToConsumingInfoMap gets a reference to the given map[string][]ConsumingSegmentInfo and assigns it to the SegmentToConsumingInfoMap field.
func (o *ConsumingSegmentsInfoMap) SetSegmentToConsumingInfoMap(v map[string][]ConsumingSegmentInfo) {
	o.SegmentToConsumingInfoMap = &v
}

func (o ConsumingSegmentsInfoMap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsumingSegmentsInfoMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SegmentToConsumingInfoMap) {
		toSerialize["_segmentToConsumingInfoMap"] = o.SegmentToConsumingInfoMap
	}
	return toSerialize, nil
}

type NullableConsumingSegmentsInfoMap struct {
	value *ConsumingSegmentsInfoMap
	isSet bool
}

func (v NullableConsumingSegmentsInfoMap) Get() *ConsumingSegmentsInfoMap {
	return v.value
}

func (v *NullableConsumingSegmentsInfoMap) Set(val *ConsumingSegmentsInfoMap) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumingSegmentsInfoMap) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumingSegmentsInfoMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumingSegmentsInfoMap(val *ConsumingSegmentsInfoMap) *NullableConsumingSegmentsInfoMap {
	return &NullableConsumingSegmentsInfoMap{value: val, isSet: true}
}

func (v NullableConsumingSegmentsInfoMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumingSegmentsInfoMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


