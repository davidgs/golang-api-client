/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilterConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterConfig{}

// FilterConfig struct for FilterConfig
type FilterConfig struct {
	FilterFunction *string `json:"filterFunction,omitempty"`
}

// NewFilterConfig instantiates a new FilterConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterConfig() *FilterConfig {
	this := FilterConfig{}
	return &this
}

// NewFilterConfigWithDefaults instantiates a new FilterConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterConfigWithDefaults() *FilterConfig {
	this := FilterConfig{}
	return &this
}

// GetFilterFunction returns the FilterFunction field value if set, zero value otherwise.
func (o *FilterConfig) GetFilterFunction() string {
	if o == nil || IsNil(o.FilterFunction) {
		var ret string
		return ret
	}
	return *o.FilterFunction
}

// GetFilterFunctionOk returns a tuple with the FilterFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterConfig) GetFilterFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.FilterFunction) {
		return nil, false
	}
	return o.FilterFunction, true
}

// HasFilterFunction returns a boolean if a field has been set.
func (o *FilterConfig) HasFilterFunction() bool {
	if o != nil && !IsNil(o.FilterFunction) {
		return true
	}

	return false
}

// SetFilterFunction gets a reference to the given string and assigns it to the FilterFunction field.
func (o *FilterConfig) SetFilterFunction(v string) {
	o.FilterFunction = &v
}

func (o FilterConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: filterFunction is readOnly
	return toSerialize, nil
}

type NullableFilterConfig struct {
	value *FilterConfig
	isSet bool
}

func (v NullableFilterConfig) Get() *FilterConfig {
	return v.value
}

func (v *NullableFilterConfig) Set(val *FilterConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterConfig(val *FilterConfig) *NullableFilterConfig {
	return &NullableFilterConfig{value: val, isSet: true}
}

func (v NullableFilterConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


