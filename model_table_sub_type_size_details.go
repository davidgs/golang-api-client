/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TableSubTypeSizeDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableSubTypeSizeDetails{}

// TableSubTypeSizeDetails struct for TableSubTypeSizeDetails
type TableSubTypeSizeDetails struct {
	ReportedSizeInBytes *int64 `json:"reportedSizeInBytes,omitempty"`
	EstimatedSizeInBytes *int64 `json:"estimatedSizeInBytes,omitempty"`
	MissingSegments *int32 `json:"missingSegments,omitempty"`
	Segments *map[string]SegmentSizeDetails `json:"segments,omitempty"`
}

// NewTableSubTypeSizeDetails instantiates a new TableSubTypeSizeDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableSubTypeSizeDetails() *TableSubTypeSizeDetails {
	this := TableSubTypeSizeDetails{}
	return &this
}

// NewTableSubTypeSizeDetailsWithDefaults instantiates a new TableSubTypeSizeDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableSubTypeSizeDetailsWithDefaults() *TableSubTypeSizeDetails {
	this := TableSubTypeSizeDetails{}
	return &this
}

// GetReportedSizeInBytes returns the ReportedSizeInBytes field value if set, zero value otherwise.
func (o *TableSubTypeSizeDetails) GetReportedSizeInBytes() int64 {
	if o == nil || IsNil(o.ReportedSizeInBytes) {
		var ret int64
		return ret
	}
	return *o.ReportedSizeInBytes
}

// GetReportedSizeInBytesOk returns a tuple with the ReportedSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableSubTypeSizeDetails) GetReportedSizeInBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.ReportedSizeInBytes) {
		return nil, false
	}
	return o.ReportedSizeInBytes, true
}

// HasReportedSizeInBytes returns a boolean if a field has been set.
func (o *TableSubTypeSizeDetails) HasReportedSizeInBytes() bool {
	if o != nil && !IsNil(o.ReportedSizeInBytes) {
		return true
	}

	return false
}

// SetReportedSizeInBytes gets a reference to the given int64 and assigns it to the ReportedSizeInBytes field.
func (o *TableSubTypeSizeDetails) SetReportedSizeInBytes(v int64) {
	o.ReportedSizeInBytes = &v
}

// GetEstimatedSizeInBytes returns the EstimatedSizeInBytes field value if set, zero value otherwise.
func (o *TableSubTypeSizeDetails) GetEstimatedSizeInBytes() int64 {
	if o == nil || IsNil(o.EstimatedSizeInBytes) {
		var ret int64
		return ret
	}
	return *o.EstimatedSizeInBytes
}

// GetEstimatedSizeInBytesOk returns a tuple with the EstimatedSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableSubTypeSizeDetails) GetEstimatedSizeInBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.EstimatedSizeInBytes) {
		return nil, false
	}
	return o.EstimatedSizeInBytes, true
}

// HasEstimatedSizeInBytes returns a boolean if a field has been set.
func (o *TableSubTypeSizeDetails) HasEstimatedSizeInBytes() bool {
	if o != nil && !IsNil(o.EstimatedSizeInBytes) {
		return true
	}

	return false
}

// SetEstimatedSizeInBytes gets a reference to the given int64 and assigns it to the EstimatedSizeInBytes field.
func (o *TableSubTypeSizeDetails) SetEstimatedSizeInBytes(v int64) {
	o.EstimatedSizeInBytes = &v
}

// GetMissingSegments returns the MissingSegments field value if set, zero value otherwise.
func (o *TableSubTypeSizeDetails) GetMissingSegments() int32 {
	if o == nil || IsNil(o.MissingSegments) {
		var ret int32
		return ret
	}
	return *o.MissingSegments
}

// GetMissingSegmentsOk returns a tuple with the MissingSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableSubTypeSizeDetails) GetMissingSegmentsOk() (*int32, bool) {
	if o == nil || IsNil(o.MissingSegments) {
		return nil, false
	}
	return o.MissingSegments, true
}

// HasMissingSegments returns a boolean if a field has been set.
func (o *TableSubTypeSizeDetails) HasMissingSegments() bool {
	if o != nil && !IsNil(o.MissingSegments) {
		return true
	}

	return false
}

// SetMissingSegments gets a reference to the given int32 and assigns it to the MissingSegments field.
func (o *TableSubTypeSizeDetails) SetMissingSegments(v int32) {
	o.MissingSegments = &v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *TableSubTypeSizeDetails) GetSegments() map[string]SegmentSizeDetails {
	if o == nil || IsNil(o.Segments) {
		var ret map[string]SegmentSizeDetails
		return ret
	}
	return *o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableSubTypeSizeDetails) GetSegmentsOk() (*map[string]SegmentSizeDetails, bool) {
	if o == nil || IsNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *TableSubTypeSizeDetails) HasSegments() bool {
	if o != nil && !IsNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given map[string]SegmentSizeDetails and assigns it to the Segments field.
func (o *TableSubTypeSizeDetails) SetSegments(v map[string]SegmentSizeDetails) {
	o.Segments = &v
}

func (o TableSubTypeSizeDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableSubTypeSizeDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReportedSizeInBytes) {
		toSerialize["reportedSizeInBytes"] = o.ReportedSizeInBytes
	}
	if !IsNil(o.EstimatedSizeInBytes) {
		toSerialize["estimatedSizeInBytes"] = o.EstimatedSizeInBytes
	}
	if !IsNil(o.MissingSegments) {
		toSerialize["missingSegments"] = o.MissingSegments
	}
	if !IsNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	return toSerialize, nil
}

type NullableTableSubTypeSizeDetails struct {
	value *TableSubTypeSizeDetails
	isSet bool
}

func (v NullableTableSubTypeSizeDetails) Get() *TableSubTypeSizeDetails {
	return v.value
}

func (v *NullableTableSubTypeSizeDetails) Set(val *TableSubTypeSizeDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableTableSubTypeSizeDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableTableSubTypeSizeDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableSubTypeSizeDetails(val *TableSubTypeSizeDetails) *NullableTableSubTypeSizeDetails {
	return &NullableTableSubTypeSizeDetails{value: val, isSet: true}
}

func (v NullableTableSubTypeSizeDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableSubTypeSizeDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


