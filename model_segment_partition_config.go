/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SegmentPartitionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SegmentPartitionConfig{}

// SegmentPartitionConfig struct for SegmentPartitionConfig
type SegmentPartitionConfig struct {
	ColumnPartitionMap map[string]ColumnPartitionConfig `json:"columnPartitionMap"`
}

// NewSegmentPartitionConfig instantiates a new SegmentPartitionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegmentPartitionConfig(columnPartitionMap map[string]ColumnPartitionConfig) *SegmentPartitionConfig {
	this := SegmentPartitionConfig{}
	this.ColumnPartitionMap = columnPartitionMap
	return &this
}

// NewSegmentPartitionConfigWithDefaults instantiates a new SegmentPartitionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentPartitionConfigWithDefaults() *SegmentPartitionConfig {
	this := SegmentPartitionConfig{}
	return &this
}

// GetColumnPartitionMap returns the ColumnPartitionMap field value
func (o *SegmentPartitionConfig) GetColumnPartitionMap() map[string]ColumnPartitionConfig {
	if o == nil {
		var ret map[string]ColumnPartitionConfig
		return ret
	}

	return o.ColumnPartitionMap
}

// GetColumnPartitionMapOk returns a tuple with the ColumnPartitionMap field value
// and a boolean to check if the value has been set.
func (o *SegmentPartitionConfig) GetColumnPartitionMapOk() (*map[string]ColumnPartitionConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ColumnPartitionMap, true
}

// SetColumnPartitionMap sets field value
func (o *SegmentPartitionConfig) SetColumnPartitionMap(v map[string]ColumnPartitionConfig) {
	o.ColumnPartitionMap = v
}

func (o SegmentPartitionConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SegmentPartitionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: columnPartitionMap is readOnly
	return toSerialize, nil
}

type NullableSegmentPartitionConfig struct {
	value *SegmentPartitionConfig
	isSet bool
}

func (v NullableSegmentPartitionConfig) Get() *SegmentPartitionConfig {
	return v.value
}

func (v *NullableSegmentPartitionConfig) Set(val *SegmentPartitionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentPartitionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentPartitionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentPartitionConfig(val *SegmentPartitionConfig) *NullableSegmentPartitionConfig {
	return &NullableSegmentPartitionConfig{value: val, isSet: true}
}

func (v NullableSegmentPartitionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentPartitionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


