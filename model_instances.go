/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Instances type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Instances{}

// Instances struct for Instances
type Instances struct {
	Instances []string `json:"instances,omitempty"`
}

// NewInstances instantiates a new Instances object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstances() *Instances {
	this := Instances{}
	return &this
}

// NewInstancesWithDefaults instantiates a new Instances object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstancesWithDefaults() *Instances {
	this := Instances{}
	return &this
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *Instances) GetInstances() []string {
	if o == nil || IsNil(o.Instances) {
		var ret []string
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instances) GetInstancesOk() ([]string, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *Instances) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []string and assigns it to the Instances field.
func (o *Instances) SetInstances(v []string) {
	o.Instances = v
}

func (o Instances) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Instances) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: instances is readOnly
	return toSerialize, nil
}

type NullableInstances struct {
	value *Instances
	isSet bool
}

func (v NullableInstances) Get() *Instances {
	return v.value
}

func (v *NullableInstances) Set(val *Instances) {
	v.value = val
	v.isSet = true
}

func (v NullableInstances) IsSet() bool {
	return v.isSet
}

func (v *NullableInstances) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstances(val *Instances) *NullableInstances {
	return &NullableInstances{value: val, isSet: true}
}

func (v NullableInstances) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstances) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


