/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ComplexTypeConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComplexTypeConfig{}

// ComplexTypeConfig struct for ComplexTypeConfig
type ComplexTypeConfig struct {
	FieldsToUnnest []string `json:"fieldsToUnnest,omitempty"`
	Delimiter *string `json:"delimiter,omitempty"`
	CollectionNotUnnestedToJson *string `json:"collectionNotUnnestedToJson,omitempty"`
	PrefixesToRename *map[string]string `json:"prefixesToRename,omitempty"`
}

// NewComplexTypeConfig instantiates a new ComplexTypeConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComplexTypeConfig() *ComplexTypeConfig {
	this := ComplexTypeConfig{}
	return &this
}

// NewComplexTypeConfigWithDefaults instantiates a new ComplexTypeConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComplexTypeConfigWithDefaults() *ComplexTypeConfig {
	this := ComplexTypeConfig{}
	return &this
}

// GetFieldsToUnnest returns the FieldsToUnnest field value if set, zero value otherwise.
func (o *ComplexTypeConfig) GetFieldsToUnnest() []string {
	if o == nil || IsNil(o.FieldsToUnnest) {
		var ret []string
		return ret
	}
	return o.FieldsToUnnest
}

// GetFieldsToUnnestOk returns a tuple with the FieldsToUnnest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexTypeConfig) GetFieldsToUnnestOk() ([]string, bool) {
	if o == nil || IsNil(o.FieldsToUnnest) {
		return nil, false
	}
	return o.FieldsToUnnest, true
}

// HasFieldsToUnnest returns a boolean if a field has been set.
func (o *ComplexTypeConfig) HasFieldsToUnnest() bool {
	if o != nil && !IsNil(o.FieldsToUnnest) {
		return true
	}

	return false
}

// SetFieldsToUnnest gets a reference to the given []string and assigns it to the FieldsToUnnest field.
func (o *ComplexTypeConfig) SetFieldsToUnnest(v []string) {
	o.FieldsToUnnest = v
}

// GetDelimiter returns the Delimiter field value if set, zero value otherwise.
func (o *ComplexTypeConfig) GetDelimiter() string {
	if o == nil || IsNil(o.Delimiter) {
		var ret string
		return ret
	}
	return *o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexTypeConfig) GetDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.Delimiter) {
		return nil, false
	}
	return o.Delimiter, true
}

// HasDelimiter returns a boolean if a field has been set.
func (o *ComplexTypeConfig) HasDelimiter() bool {
	if o != nil && !IsNil(o.Delimiter) {
		return true
	}

	return false
}

// SetDelimiter gets a reference to the given string and assigns it to the Delimiter field.
func (o *ComplexTypeConfig) SetDelimiter(v string) {
	o.Delimiter = &v
}

// GetCollectionNotUnnestedToJson returns the CollectionNotUnnestedToJson field value if set, zero value otherwise.
func (o *ComplexTypeConfig) GetCollectionNotUnnestedToJson() string {
	if o == nil || IsNil(o.CollectionNotUnnestedToJson) {
		var ret string
		return ret
	}
	return *o.CollectionNotUnnestedToJson
}

// GetCollectionNotUnnestedToJsonOk returns a tuple with the CollectionNotUnnestedToJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexTypeConfig) GetCollectionNotUnnestedToJsonOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionNotUnnestedToJson) {
		return nil, false
	}
	return o.CollectionNotUnnestedToJson, true
}

// HasCollectionNotUnnestedToJson returns a boolean if a field has been set.
func (o *ComplexTypeConfig) HasCollectionNotUnnestedToJson() bool {
	if o != nil && !IsNil(o.CollectionNotUnnestedToJson) {
		return true
	}

	return false
}

// SetCollectionNotUnnestedToJson gets a reference to the given string and assigns it to the CollectionNotUnnestedToJson field.
func (o *ComplexTypeConfig) SetCollectionNotUnnestedToJson(v string) {
	o.CollectionNotUnnestedToJson = &v
}

// GetPrefixesToRename returns the PrefixesToRename field value if set, zero value otherwise.
func (o *ComplexTypeConfig) GetPrefixesToRename() map[string]string {
	if o == nil || IsNil(o.PrefixesToRename) {
		var ret map[string]string
		return ret
	}
	return *o.PrefixesToRename
}

// GetPrefixesToRenameOk returns a tuple with the PrefixesToRename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexTypeConfig) GetPrefixesToRenameOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.PrefixesToRename) {
		return nil, false
	}
	return o.PrefixesToRename, true
}

// HasPrefixesToRename returns a boolean if a field has been set.
func (o *ComplexTypeConfig) HasPrefixesToRename() bool {
	if o != nil && !IsNil(o.PrefixesToRename) {
		return true
	}

	return false
}

// SetPrefixesToRename gets a reference to the given map[string]string and assigns it to the PrefixesToRename field.
func (o *ComplexTypeConfig) SetPrefixesToRename(v map[string]string) {
	o.PrefixesToRename = &v
}

func (o ComplexTypeConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComplexTypeConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: fieldsToUnnest is readOnly
	// skip: delimiter is readOnly
	// skip: collectionNotUnnestedToJson is readOnly
	// skip: prefixesToRename is readOnly
	return toSerialize, nil
}

type NullableComplexTypeConfig struct {
	value *ComplexTypeConfig
	isSet bool
}

func (v NullableComplexTypeConfig) Get() *ComplexTypeConfig {
	return v.value
}

func (v *NullableComplexTypeConfig) Set(val *ComplexTypeConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableComplexTypeConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableComplexTypeConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComplexTypeConfig(val *ComplexTypeConfig) *NullableComplexTypeConfig {
	return &NullableComplexTypeConfig{value: val, isSet: true}
}

func (v NullableComplexTypeConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComplexTypeConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


