/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TransformConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransformConfig{}

// TransformConfig struct for TransformConfig
type TransformConfig struct {
	ColumnName *string `json:"columnName,omitempty"`
	TransformFunction *string `json:"transformFunction,omitempty"`
}

// NewTransformConfig instantiates a new TransformConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransformConfig() *TransformConfig {
	this := TransformConfig{}
	return &this
}

// NewTransformConfigWithDefaults instantiates a new TransformConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransformConfigWithDefaults() *TransformConfig {
	this := TransformConfig{}
	return &this
}

// GetColumnName returns the ColumnName field value if set, zero value otherwise.
func (o *TransformConfig) GetColumnName() string {
	if o == nil || IsNil(o.ColumnName) {
		var ret string
		return ret
	}
	return *o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformConfig) GetColumnNameOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnName) {
		return nil, false
	}
	return o.ColumnName, true
}

// HasColumnName returns a boolean if a field has been set.
func (o *TransformConfig) HasColumnName() bool {
	if o != nil && !IsNil(o.ColumnName) {
		return true
	}

	return false
}

// SetColumnName gets a reference to the given string and assigns it to the ColumnName field.
func (o *TransformConfig) SetColumnName(v string) {
	o.ColumnName = &v
}

// GetTransformFunction returns the TransformFunction field value if set, zero value otherwise.
func (o *TransformConfig) GetTransformFunction() string {
	if o == nil || IsNil(o.TransformFunction) {
		var ret string
		return ret
	}
	return *o.TransformFunction
}

// GetTransformFunctionOk returns a tuple with the TransformFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformConfig) GetTransformFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.TransformFunction) {
		return nil, false
	}
	return o.TransformFunction, true
}

// HasTransformFunction returns a boolean if a field has been set.
func (o *TransformConfig) HasTransformFunction() bool {
	if o != nil && !IsNil(o.TransformFunction) {
		return true
	}

	return false
}

// SetTransformFunction gets a reference to the given string and assigns it to the TransformFunction field.
func (o *TransformConfig) SetTransformFunction(v string) {
	o.TransformFunction = &v
}

func (o TransformConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransformConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: columnName is readOnly
	// skip: transformFunction is readOnly
	return toSerialize, nil
}

type NullableTransformConfig struct {
	value *TransformConfig
	isSet bool
}

func (v NullableTransformConfig) Get() *TransformConfig {
	return v.value
}

func (v *NullableTransformConfig) Set(val *TransformConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTransformConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTransformConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransformConfig(val *TransformConfig) *NullableTransformConfig {
	return &NullableTransformConfig{value: val, isSet: true}
}

func (v NullableTransformConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransformConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


