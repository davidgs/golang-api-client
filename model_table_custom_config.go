/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TableCustomConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableCustomConfig{}

// TableCustomConfig struct for TableCustomConfig
type TableCustomConfig struct {
	CustomConfigs *map[string]string `json:"customConfigs,omitempty"`
}

// NewTableCustomConfig instantiates a new TableCustomConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableCustomConfig() *TableCustomConfig {
	this := TableCustomConfig{}
	return &this
}

// NewTableCustomConfigWithDefaults instantiates a new TableCustomConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableCustomConfigWithDefaults() *TableCustomConfig {
	this := TableCustomConfig{}
	return &this
}

// GetCustomConfigs returns the CustomConfigs field value if set, zero value otherwise.
func (o *TableCustomConfig) GetCustomConfigs() map[string]string {
	if o == nil || IsNil(o.CustomConfigs) {
		var ret map[string]string
		return ret
	}
	return *o.CustomConfigs
}

// GetCustomConfigsOk returns a tuple with the CustomConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCustomConfig) GetCustomConfigsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomConfigs) {
		return nil, false
	}
	return o.CustomConfigs, true
}

// HasCustomConfigs returns a boolean if a field has been set.
func (o *TableCustomConfig) HasCustomConfigs() bool {
	if o != nil && !IsNil(o.CustomConfigs) {
		return true
	}

	return false
}

// SetCustomConfigs gets a reference to the given map[string]string and assigns it to the CustomConfigs field.
func (o *TableCustomConfig) SetCustomConfigs(v map[string]string) {
	o.CustomConfigs = &v
}

func (o TableCustomConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableCustomConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: customConfigs is readOnly
	return toSerialize, nil
}

type NullableTableCustomConfig struct {
	value *TableCustomConfig
	isSet bool
}

func (v NullableTableCustomConfig) Get() *TableCustomConfig {
	return v.value
}

func (v *NullableTableCustomConfig) Set(val *TableCustomConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTableCustomConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTableCustomConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableCustomConfig(val *TableCustomConfig) *NullableTableCustomConfig {
	return &NullableTableCustomConfig{value: val, isSet: true}
}

func (v NullableTableCustomConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableCustomConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


