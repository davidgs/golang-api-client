/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InstanceConstraintConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceConstraintConfig{}

// InstanceConstraintConfig struct for InstanceConstraintConfig
type InstanceConstraintConfig struct {
	Constraints []string `json:"constraints"`
}

// NewInstanceConstraintConfig instantiates a new InstanceConstraintConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceConstraintConfig(constraints []string) *InstanceConstraintConfig {
	this := InstanceConstraintConfig{}
	this.Constraints = constraints
	return &this
}

// NewInstanceConstraintConfigWithDefaults instantiates a new InstanceConstraintConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceConstraintConfigWithDefaults() *InstanceConstraintConfig {
	this := InstanceConstraintConfig{}
	return &this
}

// GetConstraints returns the Constraints field value
func (o *InstanceConstraintConfig) GetConstraints() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value
// and a boolean to check if the value has been set.
func (o *InstanceConstraintConfig) GetConstraintsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Constraints, true
}

// SetConstraints sets field value
func (o *InstanceConstraintConfig) SetConstraints(v []string) {
	o.Constraints = v
}

func (o InstanceConstraintConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceConstraintConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: constraints is readOnly
	return toSerialize, nil
}

type NullableInstanceConstraintConfig struct {
	value *InstanceConstraintConfig
	isSet bool
}

func (v NullableInstanceConstraintConfig) Get() *InstanceConstraintConfig {
	return v.value
}

func (v *NullableInstanceConstraintConfig) Set(val *InstanceConstraintConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceConstraintConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceConstraintConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceConstraintConfig(val *InstanceConstraintConfig) *NullableInstanceConstraintConfig {
	return &NullableInstanceConstraintConfig{value: val, isSet: true}
}

func (v NullableInstanceConstraintConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceConstraintConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


