/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchIngestionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchIngestionConfig{}

// BatchIngestionConfig struct for BatchIngestionConfig
type BatchIngestionConfig struct {
	BatchConfigMaps []map[string]string `json:"batchConfigMaps,omitempty"`
	SegmentIngestionType *string `json:"segmentIngestionType,omitempty"`
	SegmentIngestionFrequency *string `json:"segmentIngestionFrequency,omitempty"`
	ConsistentDataPush *bool `json:"consistentDataPush,omitempty"`
}

// NewBatchIngestionConfig instantiates a new BatchIngestionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchIngestionConfig() *BatchIngestionConfig {
	this := BatchIngestionConfig{}
	return &this
}

// NewBatchIngestionConfigWithDefaults instantiates a new BatchIngestionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchIngestionConfigWithDefaults() *BatchIngestionConfig {
	this := BatchIngestionConfig{}
	return &this
}

// GetBatchConfigMaps returns the BatchConfigMaps field value if set, zero value otherwise.
func (o *BatchIngestionConfig) GetBatchConfigMaps() []map[string]string {
	if o == nil || IsNil(o.BatchConfigMaps) {
		var ret []map[string]string
		return ret
	}
	return o.BatchConfigMaps
}

// GetBatchConfigMapsOk returns a tuple with the BatchConfigMaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchIngestionConfig) GetBatchConfigMapsOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.BatchConfigMaps) {
		return nil, false
	}
	return o.BatchConfigMaps, true
}

// HasBatchConfigMaps returns a boolean if a field has been set.
func (o *BatchIngestionConfig) HasBatchConfigMaps() bool {
	if o != nil && !IsNil(o.BatchConfigMaps) {
		return true
	}

	return false
}

// SetBatchConfigMaps gets a reference to the given []map[string]string and assigns it to the BatchConfigMaps field.
func (o *BatchIngestionConfig) SetBatchConfigMaps(v []map[string]string) {
	o.BatchConfigMaps = v
}

// GetSegmentIngestionType returns the SegmentIngestionType field value if set, zero value otherwise.
func (o *BatchIngestionConfig) GetSegmentIngestionType() string {
	if o == nil || IsNil(o.SegmentIngestionType) {
		var ret string
		return ret
	}
	return *o.SegmentIngestionType
}

// GetSegmentIngestionTypeOk returns a tuple with the SegmentIngestionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchIngestionConfig) GetSegmentIngestionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SegmentIngestionType) {
		return nil, false
	}
	return o.SegmentIngestionType, true
}

// HasSegmentIngestionType returns a boolean if a field has been set.
func (o *BatchIngestionConfig) HasSegmentIngestionType() bool {
	if o != nil && !IsNil(o.SegmentIngestionType) {
		return true
	}

	return false
}

// SetSegmentIngestionType gets a reference to the given string and assigns it to the SegmentIngestionType field.
func (o *BatchIngestionConfig) SetSegmentIngestionType(v string) {
	o.SegmentIngestionType = &v
}

// GetSegmentIngestionFrequency returns the SegmentIngestionFrequency field value if set, zero value otherwise.
func (o *BatchIngestionConfig) GetSegmentIngestionFrequency() string {
	if o == nil || IsNil(o.SegmentIngestionFrequency) {
		var ret string
		return ret
	}
	return *o.SegmentIngestionFrequency
}

// GetSegmentIngestionFrequencyOk returns a tuple with the SegmentIngestionFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchIngestionConfig) GetSegmentIngestionFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.SegmentIngestionFrequency) {
		return nil, false
	}
	return o.SegmentIngestionFrequency, true
}

// HasSegmentIngestionFrequency returns a boolean if a field has been set.
func (o *BatchIngestionConfig) HasSegmentIngestionFrequency() bool {
	if o != nil && !IsNil(o.SegmentIngestionFrequency) {
		return true
	}

	return false
}

// SetSegmentIngestionFrequency gets a reference to the given string and assigns it to the SegmentIngestionFrequency field.
func (o *BatchIngestionConfig) SetSegmentIngestionFrequency(v string) {
	o.SegmentIngestionFrequency = &v
}

// GetConsistentDataPush returns the ConsistentDataPush field value if set, zero value otherwise.
func (o *BatchIngestionConfig) GetConsistentDataPush() bool {
	if o == nil || IsNil(o.ConsistentDataPush) {
		var ret bool
		return ret
	}
	return *o.ConsistentDataPush
}

// GetConsistentDataPushOk returns a tuple with the ConsistentDataPush field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchIngestionConfig) GetConsistentDataPushOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsistentDataPush) {
		return nil, false
	}
	return o.ConsistentDataPush, true
}

// HasConsistentDataPush returns a boolean if a field has been set.
func (o *BatchIngestionConfig) HasConsistentDataPush() bool {
	if o != nil && !IsNil(o.ConsistentDataPush) {
		return true
	}

	return false
}

// SetConsistentDataPush gets a reference to the given bool and assigns it to the ConsistentDataPush field.
func (o *BatchIngestionConfig) SetConsistentDataPush(v bool) {
	o.ConsistentDataPush = &v
}

func (o BatchIngestionConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchIngestionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchConfigMaps) {
		toSerialize["batchConfigMaps"] = o.BatchConfigMaps
	}
	if !IsNil(o.SegmentIngestionType) {
		toSerialize["segmentIngestionType"] = o.SegmentIngestionType
	}
	if !IsNil(o.SegmentIngestionFrequency) {
		toSerialize["segmentIngestionFrequency"] = o.SegmentIngestionFrequency
	}
	if !IsNil(o.ConsistentDataPush) {
		toSerialize["consistentDataPush"] = o.ConsistentDataPush
	}
	return toSerialize, nil
}

type NullableBatchIngestionConfig struct {
	value *BatchIngestionConfig
	isSet bool
}

func (v NullableBatchIngestionConfig) Get() *BatchIngestionConfig {
	return v.value
}

func (v *NullableBatchIngestionConfig) Set(val *BatchIngestionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchIngestionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchIngestionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchIngestionConfig(val *BatchIngestionConfig) *NullableBatchIngestionConfig {
	return &NullableBatchIngestionConfig{value: val, isSet: true}
}

func (v NullableBatchIngestionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchIngestionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


