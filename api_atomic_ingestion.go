/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AtomicIngestionApiService AtomicIngestionApi service
type AtomicIngestionApiService service

type ApiEndDataIngestRequestRequest struct {
	ctx context.Context
	ApiService *AtomicIngestionApiService
	tableName string
	tableType *string
	taskType *string
	checkpointEntryKey *string
}

// OFFLINE|REALTIME
func (r ApiEndDataIngestRequestRequest) TableType(tableType string) ApiEndDataIngestRequestRequest {
	r.tableType = &tableType
	return r
}

// Task type
func (r ApiEndDataIngestRequestRequest) TaskType(taskType string) ApiEndDataIngestRequestRequest {
	r.taskType = &taskType
	return r
}

// Key of checkpoint entry
func (r ApiEndDataIngestRequestRequest) CheckpointEntryKey(checkpointEntryKey string) ApiEndDataIngestRequestRequest {
	r.checkpointEntryKey = &checkpointEntryKey
	return r
}

func (r ApiEndDataIngestRequestRequest) Execute() (*http.Response, error) {
	return r.ApiService.EndDataIngestRequestExecute(r)
}

/*
EndDataIngestRequest Mark the end of data ingestion to upload multiple segments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tableName Name of the table
 @return ApiEndDataIngestRequestRequest
*/
func (a *AtomicIngestionApiService) EndDataIngestRequest(ctx context.Context, tableName string) ApiEndDataIngestRequestRequest {
	return ApiEndDataIngestRequestRequest{
		ApiService: a,
		ctx: ctx,
		tableName: tableName,
	}
}

// Execute executes the request
func (a *AtomicIngestionApiService) EndDataIngestRequestExecute(r ApiEndDataIngestRequestRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AtomicIngestionApiService.EndDataIngestRequest")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/segments/{tableName}/endDataIngestRequest"
	localVarPath = strings.Replace(localVarPath, "{"+"tableName"+"}", url.PathEscape(parameterValueToString(r.tableName, "tableName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tableType == nil {
		return nil, reportError("tableType is required and must be specified")
	}
	if r.taskType == nil {
		return nil, reportError("taskType is required and must be specified")
	}
	if r.checkpointEntryKey == nil {
		return nil, reportError("checkpointEntryKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tableType", r.tableType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "taskType", r.taskType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "checkpointEntryKey", r.checkpointEntryKey, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["oauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiStartDataIngestRequestRequest struct {
	ctx context.Context
	ApiService *AtomicIngestionApiService
	tableName string
	tableType *string
	taskType *string
	body *string
}

// OFFLINE|REALTIME
func (r ApiStartDataIngestRequestRequest) TableType(tableType string) ApiStartDataIngestRequestRequest {
	r.tableType = &tableType
	return r
}

// Task type
func (r ApiStartDataIngestRequestRequest) TaskType(taskType string) ApiStartDataIngestRequestRequest {
	r.taskType = &taskType
	return r
}

func (r ApiStartDataIngestRequestRequest) Body(body string) ApiStartDataIngestRequestRequest {
	r.body = &body
	return r
}

func (r ApiStartDataIngestRequestRequest) Execute() (*http.Response, error) {
	return r.ApiService.StartDataIngestRequestExecute(r)
}

/*
StartDataIngestRequest Mark the start of data ingestion to upload multiple segments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tableName Name of the table
 @return ApiStartDataIngestRequestRequest
*/
func (a *AtomicIngestionApiService) StartDataIngestRequest(ctx context.Context, tableName string) ApiStartDataIngestRequestRequest {
	return ApiStartDataIngestRequestRequest{
		ApiService: a,
		ctx: ctx,
		tableName: tableName,
	}
}

// Execute executes the request
func (a *AtomicIngestionApiService) StartDataIngestRequestExecute(r ApiStartDataIngestRequestRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AtomicIngestionApiService.StartDataIngestRequest")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/segments/{tableName}/startDataIngestRequest"
	localVarPath = strings.Replace(localVarPath, "{"+"tableName"+"}", url.PathEscape(parameterValueToString(r.tableName, "tableName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tableType == nil {
		return nil, reportError("tableType is required and must be specified")
	}
	if r.taskType == nil {
		return nil, reportError("taskType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tableType", r.tableType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "taskType", r.taskType, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["oauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
