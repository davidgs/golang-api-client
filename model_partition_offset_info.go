/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PartitionOffsetInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionOffsetInfo{}

// PartitionOffsetInfo struct for PartitionOffsetInfo
type PartitionOffsetInfo struct {
	CurrentOffsetsMap *map[string]string `json:"currentOffsetsMap,omitempty"`
	LatestUpstreamOffsetMap *map[string]string `json:"latestUpstreamOffsetMap,omitempty"`
	RecordsLagMap *map[string]string `json:"recordsLagMap,omitempty"`
	AvailabilityLagMsMap *map[string]string `json:"availabilityLagMsMap,omitempty"`
}

// NewPartitionOffsetInfo instantiates a new PartitionOffsetInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionOffsetInfo() *PartitionOffsetInfo {
	this := PartitionOffsetInfo{}
	return &this
}

// NewPartitionOffsetInfoWithDefaults instantiates a new PartitionOffsetInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionOffsetInfoWithDefaults() *PartitionOffsetInfo {
	this := PartitionOffsetInfo{}
	return &this
}

// GetCurrentOffsetsMap returns the CurrentOffsetsMap field value if set, zero value otherwise.
func (o *PartitionOffsetInfo) GetCurrentOffsetsMap() map[string]string {
	if o == nil || IsNil(o.CurrentOffsetsMap) {
		var ret map[string]string
		return ret
	}
	return *o.CurrentOffsetsMap
}

// GetCurrentOffsetsMapOk returns a tuple with the CurrentOffsetsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionOffsetInfo) GetCurrentOffsetsMapOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CurrentOffsetsMap) {
		return nil, false
	}
	return o.CurrentOffsetsMap, true
}

// HasCurrentOffsetsMap returns a boolean if a field has been set.
func (o *PartitionOffsetInfo) HasCurrentOffsetsMap() bool {
	if o != nil && !IsNil(o.CurrentOffsetsMap) {
		return true
	}

	return false
}

// SetCurrentOffsetsMap gets a reference to the given map[string]string and assigns it to the CurrentOffsetsMap field.
func (o *PartitionOffsetInfo) SetCurrentOffsetsMap(v map[string]string) {
	o.CurrentOffsetsMap = &v
}

// GetLatestUpstreamOffsetMap returns the LatestUpstreamOffsetMap field value if set, zero value otherwise.
func (o *PartitionOffsetInfo) GetLatestUpstreamOffsetMap() map[string]string {
	if o == nil || IsNil(o.LatestUpstreamOffsetMap) {
		var ret map[string]string
		return ret
	}
	return *o.LatestUpstreamOffsetMap
}

// GetLatestUpstreamOffsetMapOk returns a tuple with the LatestUpstreamOffsetMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionOffsetInfo) GetLatestUpstreamOffsetMapOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.LatestUpstreamOffsetMap) {
		return nil, false
	}
	return o.LatestUpstreamOffsetMap, true
}

// HasLatestUpstreamOffsetMap returns a boolean if a field has been set.
func (o *PartitionOffsetInfo) HasLatestUpstreamOffsetMap() bool {
	if o != nil && !IsNil(o.LatestUpstreamOffsetMap) {
		return true
	}

	return false
}

// SetLatestUpstreamOffsetMap gets a reference to the given map[string]string and assigns it to the LatestUpstreamOffsetMap field.
func (o *PartitionOffsetInfo) SetLatestUpstreamOffsetMap(v map[string]string) {
	o.LatestUpstreamOffsetMap = &v
}

// GetRecordsLagMap returns the RecordsLagMap field value if set, zero value otherwise.
func (o *PartitionOffsetInfo) GetRecordsLagMap() map[string]string {
	if o == nil || IsNil(o.RecordsLagMap) {
		var ret map[string]string
		return ret
	}
	return *o.RecordsLagMap
}

// GetRecordsLagMapOk returns a tuple with the RecordsLagMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionOffsetInfo) GetRecordsLagMapOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.RecordsLagMap) {
		return nil, false
	}
	return o.RecordsLagMap, true
}

// HasRecordsLagMap returns a boolean if a field has been set.
func (o *PartitionOffsetInfo) HasRecordsLagMap() bool {
	if o != nil && !IsNil(o.RecordsLagMap) {
		return true
	}

	return false
}

// SetRecordsLagMap gets a reference to the given map[string]string and assigns it to the RecordsLagMap field.
func (o *PartitionOffsetInfo) SetRecordsLagMap(v map[string]string) {
	o.RecordsLagMap = &v
}

// GetAvailabilityLagMsMap returns the AvailabilityLagMsMap field value if set, zero value otherwise.
func (o *PartitionOffsetInfo) GetAvailabilityLagMsMap() map[string]string {
	if o == nil || IsNil(o.AvailabilityLagMsMap) {
		var ret map[string]string
		return ret
	}
	return *o.AvailabilityLagMsMap
}

// GetAvailabilityLagMsMapOk returns a tuple with the AvailabilityLagMsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionOffsetInfo) GetAvailabilityLagMsMapOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AvailabilityLagMsMap) {
		return nil, false
	}
	return o.AvailabilityLagMsMap, true
}

// HasAvailabilityLagMsMap returns a boolean if a field has been set.
func (o *PartitionOffsetInfo) HasAvailabilityLagMsMap() bool {
	if o != nil && !IsNil(o.AvailabilityLagMsMap) {
		return true
	}

	return false
}

// SetAvailabilityLagMsMap gets a reference to the given map[string]string and assigns it to the AvailabilityLagMsMap field.
func (o *PartitionOffsetInfo) SetAvailabilityLagMsMap(v map[string]string) {
	o.AvailabilityLagMsMap = &v
}

func (o PartitionOffsetInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionOffsetInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentOffsetsMap) {
		toSerialize["currentOffsetsMap"] = o.CurrentOffsetsMap
	}
	if !IsNil(o.LatestUpstreamOffsetMap) {
		toSerialize["latestUpstreamOffsetMap"] = o.LatestUpstreamOffsetMap
	}
	if !IsNil(o.RecordsLagMap) {
		toSerialize["recordsLagMap"] = o.RecordsLagMap
	}
	if !IsNil(o.AvailabilityLagMsMap) {
		toSerialize["availabilityLagMsMap"] = o.AvailabilityLagMsMap
	}
	return toSerialize, nil
}

type NullablePartitionOffsetInfo struct {
	value *PartitionOffsetInfo
	isSet bool
}

func (v NullablePartitionOffsetInfo) Get() *PartitionOffsetInfo {
	return v.value
}

func (v *NullablePartitionOffsetInfo) Set(val *PartitionOffsetInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionOffsetInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionOffsetInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionOffsetInfo(val *PartitionOffsetInfo) *NullablePartitionOffsetInfo {
	return &NullablePartitionOffsetInfo{value: val, isSet: true}
}

func (v NullablePartitionOffsetInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionOffsetInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


