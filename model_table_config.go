/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TableConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableConfig{}

// TableConfig struct for TableConfig
type TableConfig struct {
	TableName *string `json:"tableName,omitempty"`
	TableType *string `json:"tableType,omitempty"`
	SegmentsConfig *SegmentsValidationAndRetentionConfig `json:"segmentsConfig,omitempty"`
	Tenants *TenantConfig `json:"tenants,omitempty"`
	TableIndexConfig *IndexingConfig `json:"tableIndexConfig,omitempty"`
	Metadata *TableCustomConfig `json:"metadata,omitempty"`
	Quota *QuotaConfig `json:"quota,omitempty"`
	Task *TableTaskConfig `json:"task,omitempty"`
	Routing *RoutingConfig `json:"routing,omitempty"`
	Query *QueryConfig `json:"query,omitempty"`
	InstanceAssignmentConfigMap *map[string]InstanceAssignmentConfig `json:"instanceAssignmentConfigMap,omitempty"`
	FieldConfigList []FieldConfig `json:"fieldConfigList,omitempty"`
	UpsertConfig *UpsertConfig `json:"upsertConfig,omitempty"`
	DedupConfig *DedupConfig `json:"dedupConfig,omitempty"`
	DimensionTableConfig *DimensionTableConfig `json:"dimensionTableConfig,omitempty"`
	IngestionConfig *IngestionConfig `json:"ingestionConfig,omitempty"`
	TierConfigs []TierConfig `json:"tierConfigs,omitempty"`
	IsDimTable *bool `json:"isDimTable,omitempty"`
	TunerConfigs []TunerConfig `json:"tunerConfigs,omitempty"`
	InstancePartitionsMap *map[string]string `json:"instancePartitionsMap,omitempty"`
	SegmentAssignmentConfigMap *map[string]SegmentAssignmentConfig `json:"segmentAssignmentConfigMap,omitempty"`
}

// NewTableConfig instantiates a new TableConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableConfig() *TableConfig {
	this := TableConfig{}
	return &this
}

// NewTableConfigWithDefaults instantiates a new TableConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableConfigWithDefaults() *TableConfig {
	this := TableConfig{}
	return &this
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *TableConfig) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *TableConfig) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *TableConfig) SetTableName(v string) {
	o.TableName = &v
}

// GetTableType returns the TableType field value if set, zero value otherwise.
func (o *TableConfig) GetTableType() string {
	if o == nil || IsNil(o.TableType) {
		var ret string
		return ret
	}
	return *o.TableType
}

// GetTableTypeOk returns a tuple with the TableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetTableTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TableType) {
		return nil, false
	}
	return o.TableType, true
}

// HasTableType returns a boolean if a field has been set.
func (o *TableConfig) HasTableType() bool {
	if o != nil && !IsNil(o.TableType) {
		return true
	}

	return false
}

// SetTableType gets a reference to the given string and assigns it to the TableType field.
func (o *TableConfig) SetTableType(v string) {
	o.TableType = &v
}

// GetSegmentsConfig returns the SegmentsConfig field value if set, zero value otherwise.
func (o *TableConfig) GetSegmentsConfig() SegmentsValidationAndRetentionConfig {
	if o == nil || IsNil(o.SegmentsConfig) {
		var ret SegmentsValidationAndRetentionConfig
		return ret
	}
	return *o.SegmentsConfig
}

// GetSegmentsConfigOk returns a tuple with the SegmentsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetSegmentsConfigOk() (*SegmentsValidationAndRetentionConfig, bool) {
	if o == nil || IsNil(o.SegmentsConfig) {
		return nil, false
	}
	return o.SegmentsConfig, true
}

// HasSegmentsConfig returns a boolean if a field has been set.
func (o *TableConfig) HasSegmentsConfig() bool {
	if o != nil && !IsNil(o.SegmentsConfig) {
		return true
	}

	return false
}

// SetSegmentsConfig gets a reference to the given SegmentsValidationAndRetentionConfig and assigns it to the SegmentsConfig field.
func (o *TableConfig) SetSegmentsConfig(v SegmentsValidationAndRetentionConfig) {
	o.SegmentsConfig = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *TableConfig) GetTenants() TenantConfig {
	if o == nil || IsNil(o.Tenants) {
		var ret TenantConfig
		return ret
	}
	return *o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetTenantsOk() (*TenantConfig, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *TableConfig) HasTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given TenantConfig and assigns it to the Tenants field.
func (o *TableConfig) SetTenants(v TenantConfig) {
	o.Tenants = &v
}

// GetTableIndexConfig returns the TableIndexConfig field value if set, zero value otherwise.
func (o *TableConfig) GetTableIndexConfig() IndexingConfig {
	if o == nil || IsNil(o.TableIndexConfig) {
		var ret IndexingConfig
		return ret
	}
	return *o.TableIndexConfig
}

// GetTableIndexConfigOk returns a tuple with the TableIndexConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetTableIndexConfigOk() (*IndexingConfig, bool) {
	if o == nil || IsNil(o.TableIndexConfig) {
		return nil, false
	}
	return o.TableIndexConfig, true
}

// HasTableIndexConfig returns a boolean if a field has been set.
func (o *TableConfig) HasTableIndexConfig() bool {
	if o != nil && !IsNil(o.TableIndexConfig) {
		return true
	}

	return false
}

// SetTableIndexConfig gets a reference to the given IndexingConfig and assigns it to the TableIndexConfig field.
func (o *TableConfig) SetTableIndexConfig(v IndexingConfig) {
	o.TableIndexConfig = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *TableConfig) GetMetadata() TableCustomConfig {
	if o == nil || IsNil(o.Metadata) {
		var ret TableCustomConfig
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetMetadataOk() (*TableCustomConfig, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TableConfig) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given TableCustomConfig and assigns it to the Metadata field.
func (o *TableConfig) SetMetadata(v TableCustomConfig) {
	o.Metadata = &v
}

// GetQuota returns the Quota field value if set, zero value otherwise.
func (o *TableConfig) GetQuota() QuotaConfig {
	if o == nil || IsNil(o.Quota) {
		var ret QuotaConfig
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetQuotaOk() (*QuotaConfig, bool) {
	if o == nil || IsNil(o.Quota) {
		return nil, false
	}
	return o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *TableConfig) HasQuota() bool {
	if o != nil && !IsNil(o.Quota) {
		return true
	}

	return false
}

// SetQuota gets a reference to the given QuotaConfig and assigns it to the Quota field.
func (o *TableConfig) SetQuota(v QuotaConfig) {
	o.Quota = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *TableConfig) GetTask() TableTaskConfig {
	if o == nil || IsNil(o.Task) {
		var ret TableTaskConfig
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetTaskOk() (*TableTaskConfig, bool) {
	if o == nil || IsNil(o.Task) {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *TableConfig) HasTask() bool {
	if o != nil && !IsNil(o.Task) {
		return true
	}

	return false
}

// SetTask gets a reference to the given TableTaskConfig and assigns it to the Task field.
func (o *TableConfig) SetTask(v TableTaskConfig) {
	o.Task = &v
}

// GetRouting returns the Routing field value if set, zero value otherwise.
func (o *TableConfig) GetRouting() RoutingConfig {
	if o == nil || IsNil(o.Routing) {
		var ret RoutingConfig
		return ret
	}
	return *o.Routing
}

// GetRoutingOk returns a tuple with the Routing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetRoutingOk() (*RoutingConfig, bool) {
	if o == nil || IsNil(o.Routing) {
		return nil, false
	}
	return o.Routing, true
}

// HasRouting returns a boolean if a field has been set.
func (o *TableConfig) HasRouting() bool {
	if o != nil && !IsNil(o.Routing) {
		return true
	}

	return false
}

// SetRouting gets a reference to the given RoutingConfig and assigns it to the Routing field.
func (o *TableConfig) SetRouting(v RoutingConfig) {
	o.Routing = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *TableConfig) GetQuery() QueryConfig {
	if o == nil || IsNil(o.Query) {
		var ret QueryConfig
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetQueryOk() (*QueryConfig, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *TableConfig) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given QueryConfig and assigns it to the Query field.
func (o *TableConfig) SetQuery(v QueryConfig) {
	o.Query = &v
}

// GetInstanceAssignmentConfigMap returns the InstanceAssignmentConfigMap field value if set, zero value otherwise.
func (o *TableConfig) GetInstanceAssignmentConfigMap() map[string]InstanceAssignmentConfig {
	if o == nil || IsNil(o.InstanceAssignmentConfigMap) {
		var ret map[string]InstanceAssignmentConfig
		return ret
	}
	return *o.InstanceAssignmentConfigMap
}

// GetInstanceAssignmentConfigMapOk returns a tuple with the InstanceAssignmentConfigMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetInstanceAssignmentConfigMapOk() (*map[string]InstanceAssignmentConfig, bool) {
	if o == nil || IsNil(o.InstanceAssignmentConfigMap) {
		return nil, false
	}
	return o.InstanceAssignmentConfigMap, true
}

// HasInstanceAssignmentConfigMap returns a boolean if a field has been set.
func (o *TableConfig) HasInstanceAssignmentConfigMap() bool {
	if o != nil && !IsNil(o.InstanceAssignmentConfigMap) {
		return true
	}

	return false
}

// SetInstanceAssignmentConfigMap gets a reference to the given map[string]InstanceAssignmentConfig and assigns it to the InstanceAssignmentConfigMap field.
func (o *TableConfig) SetInstanceAssignmentConfigMap(v map[string]InstanceAssignmentConfig) {
	o.InstanceAssignmentConfigMap = &v
}

// GetFieldConfigList returns the FieldConfigList field value if set, zero value otherwise.
func (o *TableConfig) GetFieldConfigList() []FieldConfig {
	if o == nil || IsNil(o.FieldConfigList) {
		var ret []FieldConfig
		return ret
	}
	return o.FieldConfigList
}

// GetFieldConfigListOk returns a tuple with the FieldConfigList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetFieldConfigListOk() ([]FieldConfig, bool) {
	if o == nil || IsNil(o.FieldConfigList) {
		return nil, false
	}
	return o.FieldConfigList, true
}

// HasFieldConfigList returns a boolean if a field has been set.
func (o *TableConfig) HasFieldConfigList() bool {
	if o != nil && !IsNil(o.FieldConfigList) {
		return true
	}

	return false
}

// SetFieldConfigList gets a reference to the given []FieldConfig and assigns it to the FieldConfigList field.
func (o *TableConfig) SetFieldConfigList(v []FieldConfig) {
	o.FieldConfigList = v
}

// GetUpsertConfig returns the UpsertConfig field value if set, zero value otherwise.
func (o *TableConfig) GetUpsertConfig() UpsertConfig {
	if o == nil || IsNil(o.UpsertConfig) {
		var ret UpsertConfig
		return ret
	}
	return *o.UpsertConfig
}

// GetUpsertConfigOk returns a tuple with the UpsertConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetUpsertConfigOk() (*UpsertConfig, bool) {
	if o == nil || IsNil(o.UpsertConfig) {
		return nil, false
	}
	return o.UpsertConfig, true
}

// HasUpsertConfig returns a boolean if a field has been set.
func (o *TableConfig) HasUpsertConfig() bool {
	if o != nil && !IsNil(o.UpsertConfig) {
		return true
	}

	return false
}

// SetUpsertConfig gets a reference to the given UpsertConfig and assigns it to the UpsertConfig field.
func (o *TableConfig) SetUpsertConfig(v UpsertConfig) {
	o.UpsertConfig = &v
}

// GetDedupConfig returns the DedupConfig field value if set, zero value otherwise.
func (o *TableConfig) GetDedupConfig() DedupConfig {
	if o == nil || IsNil(o.DedupConfig) {
		var ret DedupConfig
		return ret
	}
	return *o.DedupConfig
}

// GetDedupConfigOk returns a tuple with the DedupConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetDedupConfigOk() (*DedupConfig, bool) {
	if o == nil || IsNil(o.DedupConfig) {
		return nil, false
	}
	return o.DedupConfig, true
}

// HasDedupConfig returns a boolean if a field has been set.
func (o *TableConfig) HasDedupConfig() bool {
	if o != nil && !IsNil(o.DedupConfig) {
		return true
	}

	return false
}

// SetDedupConfig gets a reference to the given DedupConfig and assigns it to the DedupConfig field.
func (o *TableConfig) SetDedupConfig(v DedupConfig) {
	o.DedupConfig = &v
}

// GetDimensionTableConfig returns the DimensionTableConfig field value if set, zero value otherwise.
func (o *TableConfig) GetDimensionTableConfig() DimensionTableConfig {
	if o == nil || IsNil(o.DimensionTableConfig) {
		var ret DimensionTableConfig
		return ret
	}
	return *o.DimensionTableConfig
}

// GetDimensionTableConfigOk returns a tuple with the DimensionTableConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetDimensionTableConfigOk() (*DimensionTableConfig, bool) {
	if o == nil || IsNil(o.DimensionTableConfig) {
		return nil, false
	}
	return o.DimensionTableConfig, true
}

// HasDimensionTableConfig returns a boolean if a field has been set.
func (o *TableConfig) HasDimensionTableConfig() bool {
	if o != nil && !IsNil(o.DimensionTableConfig) {
		return true
	}

	return false
}

// SetDimensionTableConfig gets a reference to the given DimensionTableConfig and assigns it to the DimensionTableConfig field.
func (o *TableConfig) SetDimensionTableConfig(v DimensionTableConfig) {
	o.DimensionTableConfig = &v
}

// GetIngestionConfig returns the IngestionConfig field value if set, zero value otherwise.
func (o *TableConfig) GetIngestionConfig() IngestionConfig {
	if o == nil || IsNil(o.IngestionConfig) {
		var ret IngestionConfig
		return ret
	}
	return *o.IngestionConfig
}

// GetIngestionConfigOk returns a tuple with the IngestionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetIngestionConfigOk() (*IngestionConfig, bool) {
	if o == nil || IsNil(o.IngestionConfig) {
		return nil, false
	}
	return o.IngestionConfig, true
}

// HasIngestionConfig returns a boolean if a field has been set.
func (o *TableConfig) HasIngestionConfig() bool {
	if o != nil && !IsNil(o.IngestionConfig) {
		return true
	}

	return false
}

// SetIngestionConfig gets a reference to the given IngestionConfig and assigns it to the IngestionConfig field.
func (o *TableConfig) SetIngestionConfig(v IngestionConfig) {
	o.IngestionConfig = &v
}

// GetTierConfigs returns the TierConfigs field value if set, zero value otherwise.
func (o *TableConfig) GetTierConfigs() []TierConfig {
	if o == nil || IsNil(o.TierConfigs) {
		var ret []TierConfig
		return ret
	}
	return o.TierConfigs
}

// GetTierConfigsOk returns a tuple with the TierConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetTierConfigsOk() ([]TierConfig, bool) {
	if o == nil || IsNil(o.TierConfigs) {
		return nil, false
	}
	return o.TierConfigs, true
}

// HasTierConfigs returns a boolean if a field has been set.
func (o *TableConfig) HasTierConfigs() bool {
	if o != nil && !IsNil(o.TierConfigs) {
		return true
	}

	return false
}

// SetTierConfigs gets a reference to the given []TierConfig and assigns it to the TierConfigs field.
func (o *TableConfig) SetTierConfigs(v []TierConfig) {
	o.TierConfigs = v
}

// GetIsDimTable returns the IsDimTable field value if set, zero value otherwise.
func (o *TableConfig) GetIsDimTable() bool {
	if o == nil || IsNil(o.IsDimTable) {
		var ret bool
		return ret
	}
	return *o.IsDimTable
}

// GetIsDimTableOk returns a tuple with the IsDimTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetIsDimTableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDimTable) {
		return nil, false
	}
	return o.IsDimTable, true
}

// HasIsDimTable returns a boolean if a field has been set.
func (o *TableConfig) HasIsDimTable() bool {
	if o != nil && !IsNil(o.IsDimTable) {
		return true
	}

	return false
}

// SetIsDimTable gets a reference to the given bool and assigns it to the IsDimTable field.
func (o *TableConfig) SetIsDimTable(v bool) {
	o.IsDimTable = &v
}

// GetTunerConfigs returns the TunerConfigs field value if set, zero value otherwise.
func (o *TableConfig) GetTunerConfigs() []TunerConfig {
	if o == nil || IsNil(o.TunerConfigs) {
		var ret []TunerConfig
		return ret
	}
	return o.TunerConfigs
}

// GetTunerConfigsOk returns a tuple with the TunerConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetTunerConfigsOk() ([]TunerConfig, bool) {
	if o == nil || IsNil(o.TunerConfigs) {
		return nil, false
	}
	return o.TunerConfigs, true
}

// HasTunerConfigs returns a boolean if a field has been set.
func (o *TableConfig) HasTunerConfigs() bool {
	if o != nil && !IsNil(o.TunerConfigs) {
		return true
	}

	return false
}

// SetTunerConfigs gets a reference to the given []TunerConfig and assigns it to the TunerConfigs field.
func (o *TableConfig) SetTunerConfigs(v []TunerConfig) {
	o.TunerConfigs = v
}

// GetInstancePartitionsMap returns the InstancePartitionsMap field value if set, zero value otherwise.
func (o *TableConfig) GetInstancePartitionsMap() map[string]string {
	if o == nil || IsNil(o.InstancePartitionsMap) {
		var ret map[string]string
		return ret
	}
	return *o.InstancePartitionsMap
}

// GetInstancePartitionsMapOk returns a tuple with the InstancePartitionsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetInstancePartitionsMapOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.InstancePartitionsMap) {
		return nil, false
	}
	return o.InstancePartitionsMap, true
}

// HasInstancePartitionsMap returns a boolean if a field has been set.
func (o *TableConfig) HasInstancePartitionsMap() bool {
	if o != nil && !IsNil(o.InstancePartitionsMap) {
		return true
	}

	return false
}

// SetInstancePartitionsMap gets a reference to the given map[string]string and assigns it to the InstancePartitionsMap field.
func (o *TableConfig) SetInstancePartitionsMap(v map[string]string) {
	o.InstancePartitionsMap = &v
}

// GetSegmentAssignmentConfigMap returns the SegmentAssignmentConfigMap field value if set, zero value otherwise.
func (o *TableConfig) GetSegmentAssignmentConfigMap() map[string]SegmentAssignmentConfig {
	if o == nil || IsNil(o.SegmentAssignmentConfigMap) {
		var ret map[string]SegmentAssignmentConfig
		return ret
	}
	return *o.SegmentAssignmentConfigMap
}

// GetSegmentAssignmentConfigMapOk returns a tuple with the SegmentAssignmentConfigMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableConfig) GetSegmentAssignmentConfigMapOk() (*map[string]SegmentAssignmentConfig, bool) {
	if o == nil || IsNil(o.SegmentAssignmentConfigMap) {
		return nil, false
	}
	return o.SegmentAssignmentConfigMap, true
}

// HasSegmentAssignmentConfigMap returns a boolean if a field has been set.
func (o *TableConfig) HasSegmentAssignmentConfigMap() bool {
	if o != nil && !IsNil(o.SegmentAssignmentConfigMap) {
		return true
	}

	return false
}

// SetSegmentAssignmentConfigMap gets a reference to the given map[string]SegmentAssignmentConfig and assigns it to the SegmentAssignmentConfigMap field.
func (o *TableConfig) SetSegmentAssignmentConfigMap(v map[string]SegmentAssignmentConfig) {
	o.SegmentAssignmentConfigMap = &v
}

func (o TableConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: tableName is readOnly
	// skip: tableType is readOnly
	if !IsNil(o.SegmentsConfig) {
		toSerialize["segmentsConfig"] = o.SegmentsConfig
	}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	if !IsNil(o.TableIndexConfig) {
		toSerialize["tableIndexConfig"] = o.TableIndexConfig
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Quota) {
		toSerialize["quota"] = o.Quota
	}
	if !IsNil(o.Task) {
		toSerialize["task"] = o.Task
	}
	if !IsNil(o.Routing) {
		toSerialize["routing"] = o.Routing
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.InstanceAssignmentConfigMap) {
		toSerialize["instanceAssignmentConfigMap"] = o.InstanceAssignmentConfigMap
	}
	if !IsNil(o.FieldConfigList) {
		toSerialize["fieldConfigList"] = o.FieldConfigList
	}
	if !IsNil(o.UpsertConfig) {
		toSerialize["upsertConfig"] = o.UpsertConfig
	}
	if !IsNil(o.DedupConfig) {
		toSerialize["dedupConfig"] = o.DedupConfig
	}
	if !IsNil(o.DimensionTableConfig) {
		toSerialize["dimensionTableConfig"] = o.DimensionTableConfig
	}
	if !IsNil(o.IngestionConfig) {
		toSerialize["ingestionConfig"] = o.IngestionConfig
	}
	if !IsNil(o.TierConfigs) {
		toSerialize["tierConfigs"] = o.TierConfigs
	}
	// skip: isDimTable is readOnly
	if !IsNil(o.TunerConfigs) {
		toSerialize["tunerConfigs"] = o.TunerConfigs
	}
	if !IsNil(o.InstancePartitionsMap) {
		toSerialize["instancePartitionsMap"] = o.InstancePartitionsMap
	}
	if !IsNil(o.SegmentAssignmentConfigMap) {
		toSerialize["segmentAssignmentConfigMap"] = o.SegmentAssignmentConfigMap
	}
	return toSerialize, nil
}

type NullableTableConfig struct {
	value *TableConfig
	isSet bool
}

func (v NullableTableConfig) Get() *TableConfig {
	return v.value
}

func (v *NullableTableConfig) Set(val *TableConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTableConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTableConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableConfig(val *TableConfig) *NullableTableConfig {
	return &NullableTableConfig{value: val, isSet: true}
}

func (v NullableTableConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


