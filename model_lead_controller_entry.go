/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LeadControllerEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LeadControllerEntry{}

// LeadControllerEntry struct for LeadControllerEntry
type LeadControllerEntry struct {
	TableNames []string `json:"tableNames,omitempty"`
	LeadControllerId *string `json:"leadControllerId,omitempty"`
}

// NewLeadControllerEntry instantiates a new LeadControllerEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeadControllerEntry() *LeadControllerEntry {
	this := LeadControllerEntry{}
	return &this
}

// NewLeadControllerEntryWithDefaults instantiates a new LeadControllerEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeadControllerEntryWithDefaults() *LeadControllerEntry {
	this := LeadControllerEntry{}
	return &this
}

// GetTableNames returns the TableNames field value if set, zero value otherwise.
func (o *LeadControllerEntry) GetTableNames() []string {
	if o == nil || IsNil(o.TableNames) {
		var ret []string
		return ret
	}
	return o.TableNames
}

// GetTableNamesOk returns a tuple with the TableNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeadControllerEntry) GetTableNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.TableNames) {
		return nil, false
	}
	return o.TableNames, true
}

// HasTableNames returns a boolean if a field has been set.
func (o *LeadControllerEntry) HasTableNames() bool {
	if o != nil && !IsNil(o.TableNames) {
		return true
	}

	return false
}

// SetTableNames gets a reference to the given []string and assigns it to the TableNames field.
func (o *LeadControllerEntry) SetTableNames(v []string) {
	o.TableNames = v
}

// GetLeadControllerId returns the LeadControllerId field value if set, zero value otherwise.
func (o *LeadControllerEntry) GetLeadControllerId() string {
	if o == nil || IsNil(o.LeadControllerId) {
		var ret string
		return ret
	}
	return *o.LeadControllerId
}

// GetLeadControllerIdOk returns a tuple with the LeadControllerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeadControllerEntry) GetLeadControllerIdOk() (*string, bool) {
	if o == nil || IsNil(o.LeadControllerId) {
		return nil, false
	}
	return o.LeadControllerId, true
}

// HasLeadControllerId returns a boolean if a field has been set.
func (o *LeadControllerEntry) HasLeadControllerId() bool {
	if o != nil && !IsNil(o.LeadControllerId) {
		return true
	}

	return false
}

// SetLeadControllerId gets a reference to the given string and assigns it to the LeadControllerId field.
func (o *LeadControllerEntry) SetLeadControllerId(v string) {
	o.LeadControllerId = &v
}

func (o LeadControllerEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LeadControllerEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: tableNames is readOnly
	// skip: leadControllerId is readOnly
	return toSerialize, nil
}

type NullableLeadControllerEntry struct {
	value *LeadControllerEntry
	isSet bool
}

func (v NullableLeadControllerEntry) Get() *LeadControllerEntry {
	return v.value
}

func (v *NullableLeadControllerEntry) Set(val *LeadControllerEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableLeadControllerEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableLeadControllerEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeadControllerEntry(val *LeadControllerEntry) *NullableLeadControllerEntry {
	return &NullableLeadControllerEntry{value: val, isSet: true}
}

func (v NullableLeadControllerEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeadControllerEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


