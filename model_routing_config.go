/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoutingConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingConfig{}

// RoutingConfig struct for RoutingConfig
type RoutingConfig struct {
	RoutingTableBuilderName *string `json:"routingTableBuilderName,omitempty"`
	SegmentPrunerTypes []string `json:"segmentPrunerTypes,omitempty"`
	InstanceSelectorType *string `json:"instanceSelectorType,omitempty"`
}

// NewRoutingConfig instantiates a new RoutingConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingConfig() *RoutingConfig {
	this := RoutingConfig{}
	return &this
}

// NewRoutingConfigWithDefaults instantiates a new RoutingConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingConfigWithDefaults() *RoutingConfig {
	this := RoutingConfig{}
	return &this
}

// GetRoutingTableBuilderName returns the RoutingTableBuilderName field value if set, zero value otherwise.
func (o *RoutingConfig) GetRoutingTableBuilderName() string {
	if o == nil || IsNil(o.RoutingTableBuilderName) {
		var ret string
		return ret
	}
	return *o.RoutingTableBuilderName
}

// GetRoutingTableBuilderNameOk returns a tuple with the RoutingTableBuilderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingConfig) GetRoutingTableBuilderNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoutingTableBuilderName) {
		return nil, false
	}
	return o.RoutingTableBuilderName, true
}

// HasRoutingTableBuilderName returns a boolean if a field has been set.
func (o *RoutingConfig) HasRoutingTableBuilderName() bool {
	if o != nil && !IsNil(o.RoutingTableBuilderName) {
		return true
	}

	return false
}

// SetRoutingTableBuilderName gets a reference to the given string and assigns it to the RoutingTableBuilderName field.
func (o *RoutingConfig) SetRoutingTableBuilderName(v string) {
	o.RoutingTableBuilderName = &v
}

// GetSegmentPrunerTypes returns the SegmentPrunerTypes field value if set, zero value otherwise.
func (o *RoutingConfig) GetSegmentPrunerTypes() []string {
	if o == nil || IsNil(o.SegmentPrunerTypes) {
		var ret []string
		return ret
	}
	return o.SegmentPrunerTypes
}

// GetSegmentPrunerTypesOk returns a tuple with the SegmentPrunerTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingConfig) GetSegmentPrunerTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.SegmentPrunerTypes) {
		return nil, false
	}
	return o.SegmentPrunerTypes, true
}

// HasSegmentPrunerTypes returns a boolean if a field has been set.
func (o *RoutingConfig) HasSegmentPrunerTypes() bool {
	if o != nil && !IsNil(o.SegmentPrunerTypes) {
		return true
	}

	return false
}

// SetSegmentPrunerTypes gets a reference to the given []string and assigns it to the SegmentPrunerTypes field.
func (o *RoutingConfig) SetSegmentPrunerTypes(v []string) {
	o.SegmentPrunerTypes = v
}

// GetInstanceSelectorType returns the InstanceSelectorType field value if set, zero value otherwise.
func (o *RoutingConfig) GetInstanceSelectorType() string {
	if o == nil || IsNil(o.InstanceSelectorType) {
		var ret string
		return ret
	}
	return *o.InstanceSelectorType
}

// GetInstanceSelectorTypeOk returns a tuple with the InstanceSelectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingConfig) GetInstanceSelectorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceSelectorType) {
		return nil, false
	}
	return o.InstanceSelectorType, true
}

// HasInstanceSelectorType returns a boolean if a field has been set.
func (o *RoutingConfig) HasInstanceSelectorType() bool {
	if o != nil && !IsNil(o.InstanceSelectorType) {
		return true
	}

	return false
}

// SetInstanceSelectorType gets a reference to the given string and assigns it to the InstanceSelectorType field.
func (o *RoutingConfig) SetInstanceSelectorType(v string) {
	o.InstanceSelectorType = &v
}

func (o RoutingConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: routingTableBuilderName is readOnly
	// skip: segmentPrunerTypes is readOnly
	// skip: instanceSelectorType is readOnly
	return toSerialize, nil
}

type NullableRoutingConfig struct {
	value *RoutingConfig
	isSet bool
}

func (v NullableRoutingConfig) Get() *RoutingConfig {
	return v.value
}

func (v *NullableRoutingConfig) Set(val *RoutingConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingConfig(val *RoutingConfig) *NullableRoutingConfig {
	return &NullableRoutingConfig{value: val, isSet: true}
}

func (v NullableRoutingConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


