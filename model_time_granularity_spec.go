/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TimeGranularitySpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeGranularitySpec{}

// TimeGranularitySpec struct for TimeGranularitySpec
type TimeGranularitySpec struct {
	Name *string `json:"name,omitempty"`
	DataType *string `json:"dataType,omitempty"`
	TimeType *string `json:"timeType,omitempty"`
	TimeUnitSize *int32 `json:"timeUnitSize,omitempty"`
	TimeFormat *string `json:"timeFormat,omitempty"`
}

// NewTimeGranularitySpec instantiates a new TimeGranularitySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeGranularitySpec() *TimeGranularitySpec {
	this := TimeGranularitySpec{}
	return &this
}

// NewTimeGranularitySpecWithDefaults instantiates a new TimeGranularitySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeGranularitySpecWithDefaults() *TimeGranularitySpec {
	this := TimeGranularitySpec{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TimeGranularitySpec) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeGranularitySpec) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TimeGranularitySpec) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TimeGranularitySpec) SetName(v string) {
	o.Name = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *TimeGranularitySpec) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeGranularitySpec) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *TimeGranularitySpec) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *TimeGranularitySpec) SetDataType(v string) {
	o.DataType = &v
}

// GetTimeType returns the TimeType field value if set, zero value otherwise.
func (o *TimeGranularitySpec) GetTimeType() string {
	if o == nil || IsNil(o.TimeType) {
		var ret string
		return ret
	}
	return *o.TimeType
}

// GetTimeTypeOk returns a tuple with the TimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeGranularitySpec) GetTimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TimeType) {
		return nil, false
	}
	return o.TimeType, true
}

// HasTimeType returns a boolean if a field has been set.
func (o *TimeGranularitySpec) HasTimeType() bool {
	if o != nil && !IsNil(o.TimeType) {
		return true
	}

	return false
}

// SetTimeType gets a reference to the given string and assigns it to the TimeType field.
func (o *TimeGranularitySpec) SetTimeType(v string) {
	o.TimeType = &v
}

// GetTimeUnitSize returns the TimeUnitSize field value if set, zero value otherwise.
func (o *TimeGranularitySpec) GetTimeUnitSize() int32 {
	if o == nil || IsNil(o.TimeUnitSize) {
		var ret int32
		return ret
	}
	return *o.TimeUnitSize
}

// GetTimeUnitSizeOk returns a tuple with the TimeUnitSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeGranularitySpec) GetTimeUnitSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeUnitSize) {
		return nil, false
	}
	return o.TimeUnitSize, true
}

// HasTimeUnitSize returns a boolean if a field has been set.
func (o *TimeGranularitySpec) HasTimeUnitSize() bool {
	if o != nil && !IsNil(o.TimeUnitSize) {
		return true
	}

	return false
}

// SetTimeUnitSize gets a reference to the given int32 and assigns it to the TimeUnitSize field.
func (o *TimeGranularitySpec) SetTimeUnitSize(v int32) {
	o.TimeUnitSize = &v
}

// GetTimeFormat returns the TimeFormat field value if set, zero value otherwise.
func (o *TimeGranularitySpec) GetTimeFormat() string {
	if o == nil || IsNil(o.TimeFormat) {
		var ret string
		return ret
	}
	return *o.TimeFormat
}

// GetTimeFormatOk returns a tuple with the TimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeGranularitySpec) GetTimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.TimeFormat) {
		return nil, false
	}
	return o.TimeFormat, true
}

// HasTimeFormat returns a boolean if a field has been set.
func (o *TimeGranularitySpec) HasTimeFormat() bool {
	if o != nil && !IsNil(o.TimeFormat) {
		return true
	}

	return false
}

// SetTimeFormat gets a reference to the given string and assigns it to the TimeFormat field.
func (o *TimeGranularitySpec) SetTimeFormat(v string) {
	o.TimeFormat = &v
}

func (o TimeGranularitySpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeGranularitySpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !IsNil(o.TimeType) {
		toSerialize["timeType"] = o.TimeType
	}
	if !IsNil(o.TimeUnitSize) {
		toSerialize["timeUnitSize"] = o.TimeUnitSize
	}
	if !IsNil(o.TimeFormat) {
		toSerialize["timeFormat"] = o.TimeFormat
	}
	return toSerialize, nil
}

type NullableTimeGranularitySpec struct {
	value *TimeGranularitySpec
	isSet bool
}

func (v NullableTimeGranularitySpec) Get() *TimeGranularitySpec {
	return v.value
}

func (v *NullableTimeGranularitySpec) Set(val *TimeGranularitySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeGranularitySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeGranularitySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeGranularitySpec(val *TimeGranularitySpec) *NullableTimeGranularitySpec {
	return &NullableTimeGranularitySpec{value: val, isSet: true}
}

func (v NullableTimeGranularitySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeGranularitySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


