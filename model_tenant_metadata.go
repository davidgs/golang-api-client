/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TenantMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantMetadata{}

// TenantMetadata struct for TenantMetadata
type TenantMetadata struct {
	ServerInstances []string `json:"ServerInstances,omitempty"`
	OfflineServerInstances []string `json:"OfflineServerInstances,omitempty"`
	RealtimeServerInstances []string `json:"RealtimeServerInstances,omitempty"`
	BrokerInstances []string `json:"BrokerInstances,omitempty"`
	TenantName *string `json:"tenantName,omitempty"`
}

// NewTenantMetadata instantiates a new TenantMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantMetadata() *TenantMetadata {
	this := TenantMetadata{}
	return &this
}

// NewTenantMetadataWithDefaults instantiates a new TenantMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantMetadataWithDefaults() *TenantMetadata {
	this := TenantMetadata{}
	return &this
}

// GetServerInstances returns the ServerInstances field value if set, zero value otherwise.
func (o *TenantMetadata) GetServerInstances() []string {
	if o == nil || IsNil(o.ServerInstances) {
		var ret []string
		return ret
	}
	return o.ServerInstances
}

// GetServerInstancesOk returns a tuple with the ServerInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantMetadata) GetServerInstancesOk() ([]string, bool) {
	if o == nil || IsNil(o.ServerInstances) {
		return nil, false
	}
	return o.ServerInstances, true
}

// HasServerInstances returns a boolean if a field has been set.
func (o *TenantMetadata) HasServerInstances() bool {
	if o != nil && !IsNil(o.ServerInstances) {
		return true
	}

	return false
}

// SetServerInstances gets a reference to the given []string and assigns it to the ServerInstances field.
func (o *TenantMetadata) SetServerInstances(v []string) {
	o.ServerInstances = v
}

// GetOfflineServerInstances returns the OfflineServerInstances field value if set, zero value otherwise.
func (o *TenantMetadata) GetOfflineServerInstances() []string {
	if o == nil || IsNil(o.OfflineServerInstances) {
		var ret []string
		return ret
	}
	return o.OfflineServerInstances
}

// GetOfflineServerInstancesOk returns a tuple with the OfflineServerInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantMetadata) GetOfflineServerInstancesOk() ([]string, bool) {
	if o == nil || IsNil(o.OfflineServerInstances) {
		return nil, false
	}
	return o.OfflineServerInstances, true
}

// HasOfflineServerInstances returns a boolean if a field has been set.
func (o *TenantMetadata) HasOfflineServerInstances() bool {
	if o != nil && !IsNil(o.OfflineServerInstances) {
		return true
	}

	return false
}

// SetOfflineServerInstances gets a reference to the given []string and assigns it to the OfflineServerInstances field.
func (o *TenantMetadata) SetOfflineServerInstances(v []string) {
	o.OfflineServerInstances = v
}

// GetRealtimeServerInstances returns the RealtimeServerInstances field value if set, zero value otherwise.
func (o *TenantMetadata) GetRealtimeServerInstances() []string {
	if o == nil || IsNil(o.RealtimeServerInstances) {
		var ret []string
		return ret
	}
	return o.RealtimeServerInstances
}

// GetRealtimeServerInstancesOk returns a tuple with the RealtimeServerInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantMetadata) GetRealtimeServerInstancesOk() ([]string, bool) {
	if o == nil || IsNil(o.RealtimeServerInstances) {
		return nil, false
	}
	return o.RealtimeServerInstances, true
}

// HasRealtimeServerInstances returns a boolean if a field has been set.
func (o *TenantMetadata) HasRealtimeServerInstances() bool {
	if o != nil && !IsNil(o.RealtimeServerInstances) {
		return true
	}

	return false
}

// SetRealtimeServerInstances gets a reference to the given []string and assigns it to the RealtimeServerInstances field.
func (o *TenantMetadata) SetRealtimeServerInstances(v []string) {
	o.RealtimeServerInstances = v
}

// GetBrokerInstances returns the BrokerInstances field value if set, zero value otherwise.
func (o *TenantMetadata) GetBrokerInstances() []string {
	if o == nil || IsNil(o.BrokerInstances) {
		var ret []string
		return ret
	}
	return o.BrokerInstances
}

// GetBrokerInstancesOk returns a tuple with the BrokerInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantMetadata) GetBrokerInstancesOk() ([]string, bool) {
	if o == nil || IsNil(o.BrokerInstances) {
		return nil, false
	}
	return o.BrokerInstances, true
}

// HasBrokerInstances returns a boolean if a field has been set.
func (o *TenantMetadata) HasBrokerInstances() bool {
	if o != nil && !IsNil(o.BrokerInstances) {
		return true
	}

	return false
}

// SetBrokerInstances gets a reference to the given []string and assigns it to the BrokerInstances field.
func (o *TenantMetadata) SetBrokerInstances(v []string) {
	o.BrokerInstances = v
}

// GetTenantName returns the TenantName field value if set, zero value otherwise.
func (o *TenantMetadata) GetTenantName() string {
	if o == nil || IsNil(o.TenantName) {
		var ret string
		return ret
	}
	return *o.TenantName
}

// GetTenantNameOk returns a tuple with the TenantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantMetadata) GetTenantNameOk() (*string, bool) {
	if o == nil || IsNil(o.TenantName) {
		return nil, false
	}
	return o.TenantName, true
}

// HasTenantName returns a boolean if a field has been set.
func (o *TenantMetadata) HasTenantName() bool {
	if o != nil && !IsNil(o.TenantName) {
		return true
	}

	return false
}

// SetTenantName gets a reference to the given string and assigns it to the TenantName field.
func (o *TenantMetadata) SetTenantName(v string) {
	o.TenantName = &v
}

func (o TenantMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerInstances) {
		toSerialize["ServerInstances"] = o.ServerInstances
	}
	if !IsNil(o.OfflineServerInstances) {
		toSerialize["OfflineServerInstances"] = o.OfflineServerInstances
	}
	if !IsNil(o.RealtimeServerInstances) {
		toSerialize["RealtimeServerInstances"] = o.RealtimeServerInstances
	}
	if !IsNil(o.BrokerInstances) {
		toSerialize["BrokerInstances"] = o.BrokerInstances
	}
	if !IsNil(o.TenantName) {
		toSerialize["tenantName"] = o.TenantName
	}
	return toSerialize, nil
}

type NullableTenantMetadata struct {
	value *TenantMetadata
	isSet bool
}

func (v NullableTenantMetadata) Get() *TenantMetadata {
	return v.value
}

func (v *NullableTenantMetadata) Set(val *TenantMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantMetadata(val *TenantMetadata) *NullableTenantMetadata {
	return &NullableTenantMetadata{value: val, isSet: true}
}

func (v NullableTenantMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


