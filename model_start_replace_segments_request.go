/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StartReplaceSegmentsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartReplaceSegmentsRequest{}

// StartReplaceSegmentsRequest struct for StartReplaceSegmentsRequest
type StartReplaceSegmentsRequest struct {
	SegmentsFrom []string `json:"segmentsFrom,omitempty"`
	SegmentsTo []string `json:"segmentsTo,omitempty"`
}

// NewStartReplaceSegmentsRequest instantiates a new StartReplaceSegmentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartReplaceSegmentsRequest() *StartReplaceSegmentsRequest {
	this := StartReplaceSegmentsRequest{}
	return &this
}

// NewStartReplaceSegmentsRequestWithDefaults instantiates a new StartReplaceSegmentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartReplaceSegmentsRequestWithDefaults() *StartReplaceSegmentsRequest {
	this := StartReplaceSegmentsRequest{}
	return &this
}

// GetSegmentsFrom returns the SegmentsFrom field value if set, zero value otherwise.
func (o *StartReplaceSegmentsRequest) GetSegmentsFrom() []string {
	if o == nil || IsNil(o.SegmentsFrom) {
		var ret []string
		return ret
	}
	return o.SegmentsFrom
}

// GetSegmentsFromOk returns a tuple with the SegmentsFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartReplaceSegmentsRequest) GetSegmentsFromOk() ([]string, bool) {
	if o == nil || IsNil(o.SegmentsFrom) {
		return nil, false
	}
	return o.SegmentsFrom, true
}

// HasSegmentsFrom returns a boolean if a field has been set.
func (o *StartReplaceSegmentsRequest) HasSegmentsFrom() bool {
	if o != nil && !IsNil(o.SegmentsFrom) {
		return true
	}

	return false
}

// SetSegmentsFrom gets a reference to the given []string and assigns it to the SegmentsFrom field.
func (o *StartReplaceSegmentsRequest) SetSegmentsFrom(v []string) {
	o.SegmentsFrom = v
}

// GetSegmentsTo returns the SegmentsTo field value if set, zero value otherwise.
func (o *StartReplaceSegmentsRequest) GetSegmentsTo() []string {
	if o == nil || IsNil(o.SegmentsTo) {
		var ret []string
		return ret
	}
	return o.SegmentsTo
}

// GetSegmentsToOk returns a tuple with the SegmentsTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartReplaceSegmentsRequest) GetSegmentsToOk() ([]string, bool) {
	if o == nil || IsNil(o.SegmentsTo) {
		return nil, false
	}
	return o.SegmentsTo, true
}

// HasSegmentsTo returns a boolean if a field has been set.
func (o *StartReplaceSegmentsRequest) HasSegmentsTo() bool {
	if o != nil && !IsNil(o.SegmentsTo) {
		return true
	}

	return false
}

// SetSegmentsTo gets a reference to the given []string and assigns it to the SegmentsTo field.
func (o *StartReplaceSegmentsRequest) SetSegmentsTo(v []string) {
	o.SegmentsTo = v
}

func (o StartReplaceSegmentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartReplaceSegmentsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: segmentsFrom is readOnly
	// skip: segmentsTo is readOnly
	return toSerialize, nil
}

type NullableStartReplaceSegmentsRequest struct {
	value *StartReplaceSegmentsRequest
	isSet bool
}

func (v NullableStartReplaceSegmentsRequest) Get() *StartReplaceSegmentsRequest {
	return v.value
}

func (v *NullableStartReplaceSegmentsRequest) Set(val *StartReplaceSegmentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStartReplaceSegmentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStartReplaceSegmentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartReplaceSegmentsRequest(val *StartReplaceSegmentsRequest) *NullableStartReplaceSegmentsRequest {
	return &NullableStartReplaceSegmentsRequest{value: val, isSet: true}
}

func (v NullableStartReplaceSegmentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartReplaceSegmentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


