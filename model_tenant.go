/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Tenant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tenant{}

// Tenant struct for Tenant
type Tenant struct {
	TenantRole string `json:"tenantRole"`
	TenantName string `json:"tenantName"`
	NumberOfInstances *int32 `json:"numberOfInstances,omitempty"`
	OfflineInstances *int32 `json:"offlineInstances,omitempty"`
	RealtimeInstances *int32 `json:"realtimeInstances,omitempty"`
}

// NewTenant instantiates a new Tenant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenant(tenantRole string, tenantName string) *Tenant {
	this := Tenant{}
	this.TenantRole = tenantRole
	this.TenantName = tenantName
	return &this
}

// NewTenantWithDefaults instantiates a new Tenant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantWithDefaults() *Tenant {
	this := Tenant{}
	return &this
}

// GetTenantRole returns the TenantRole field value
func (o *Tenant) GetTenantRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantRole
}

// GetTenantRoleOk returns a tuple with the TenantRole field value
// and a boolean to check if the value has been set.
func (o *Tenant) GetTenantRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantRole, true
}

// SetTenantRole sets field value
func (o *Tenant) SetTenantRole(v string) {
	o.TenantRole = v
}

// GetTenantName returns the TenantName field value
func (o *Tenant) GetTenantName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantName
}

// GetTenantNameOk returns a tuple with the TenantName field value
// and a boolean to check if the value has been set.
func (o *Tenant) GetTenantNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantName, true
}

// SetTenantName sets field value
func (o *Tenant) SetTenantName(v string) {
	o.TenantName = v
}

// GetNumberOfInstances returns the NumberOfInstances field value if set, zero value otherwise.
func (o *Tenant) GetNumberOfInstances() int32 {
	if o == nil || IsNil(o.NumberOfInstances) {
		var ret int32
		return ret
	}
	return *o.NumberOfInstances
}

// GetNumberOfInstancesOk returns a tuple with the NumberOfInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenant) GetNumberOfInstancesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfInstances) {
		return nil, false
	}
	return o.NumberOfInstances, true
}

// HasNumberOfInstances returns a boolean if a field has been set.
func (o *Tenant) HasNumberOfInstances() bool {
	if o != nil && !IsNil(o.NumberOfInstances) {
		return true
	}

	return false
}

// SetNumberOfInstances gets a reference to the given int32 and assigns it to the NumberOfInstances field.
func (o *Tenant) SetNumberOfInstances(v int32) {
	o.NumberOfInstances = &v
}

// GetOfflineInstances returns the OfflineInstances field value if set, zero value otherwise.
func (o *Tenant) GetOfflineInstances() int32 {
	if o == nil || IsNil(o.OfflineInstances) {
		var ret int32
		return ret
	}
	return *o.OfflineInstances
}

// GetOfflineInstancesOk returns a tuple with the OfflineInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenant) GetOfflineInstancesOk() (*int32, bool) {
	if o == nil || IsNil(o.OfflineInstances) {
		return nil, false
	}
	return o.OfflineInstances, true
}

// HasOfflineInstances returns a boolean if a field has been set.
func (o *Tenant) HasOfflineInstances() bool {
	if o != nil && !IsNil(o.OfflineInstances) {
		return true
	}

	return false
}

// SetOfflineInstances gets a reference to the given int32 and assigns it to the OfflineInstances field.
func (o *Tenant) SetOfflineInstances(v int32) {
	o.OfflineInstances = &v
}

// GetRealtimeInstances returns the RealtimeInstances field value if set, zero value otherwise.
func (o *Tenant) GetRealtimeInstances() int32 {
	if o == nil || IsNil(o.RealtimeInstances) {
		var ret int32
		return ret
	}
	return *o.RealtimeInstances
}

// GetRealtimeInstancesOk returns a tuple with the RealtimeInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenant) GetRealtimeInstancesOk() (*int32, bool) {
	if o == nil || IsNil(o.RealtimeInstances) {
		return nil, false
	}
	return o.RealtimeInstances, true
}

// HasRealtimeInstances returns a boolean if a field has been set.
func (o *Tenant) HasRealtimeInstances() bool {
	if o != nil && !IsNil(o.RealtimeInstances) {
		return true
	}

	return false
}

// SetRealtimeInstances gets a reference to the given int32 and assigns it to the RealtimeInstances field.
func (o *Tenant) SetRealtimeInstances(v int32) {
	o.RealtimeInstances = &v
}

func (o Tenant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tenant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: tenantRole is readOnly
	// skip: tenantName is readOnly
	// skip: numberOfInstances is readOnly
	// skip: offlineInstances is readOnly
	// skip: realtimeInstances is readOnly
	return toSerialize, nil
}

type NullableTenant struct {
	value *Tenant
	isSet bool
}

func (v NullableTenant) Get() *Tenant {
	return v.value
}

func (v *NullableTenant) Set(val *Tenant) {
	v.value = val
	v.isSet = true
}

func (v NullableTenant) IsSet() bool {
	return v.isSet
}

func (v *NullableTenant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenant(val *Tenant) *NullableTenant {
	return &NullableTenant{value: val, isSet: true}
}

func (v NullableTenant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


