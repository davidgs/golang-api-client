/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TableTierDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableTierDetails{}

// TableTierDetails struct for TableTierDetails
type TableTierDetails struct {
	// Name of table to look for segment storage tiers
	TableName *string `json:"tableName,omitempty"`
	// Storage tiers of segments for the given table
	SegmentTiers *map[string]map[string]string `json:"segmentTiers,omitempty"`
}

// NewTableTierDetails instantiates a new TableTierDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableTierDetails() *TableTierDetails {
	this := TableTierDetails{}
	return &this
}

// NewTableTierDetailsWithDefaults instantiates a new TableTierDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableTierDetailsWithDefaults() *TableTierDetails {
	this := TableTierDetails{}
	return &this
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *TableTierDetails) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableTierDetails) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *TableTierDetails) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *TableTierDetails) SetTableName(v string) {
	o.TableName = &v
}

// GetSegmentTiers returns the SegmentTiers field value if set, zero value otherwise.
func (o *TableTierDetails) GetSegmentTiers() map[string]map[string]string {
	if o == nil || IsNil(o.SegmentTiers) {
		var ret map[string]map[string]string
		return ret
	}
	return *o.SegmentTiers
}

// GetSegmentTiersOk returns a tuple with the SegmentTiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableTierDetails) GetSegmentTiersOk() (*map[string]map[string]string, bool) {
	if o == nil || IsNil(o.SegmentTiers) {
		return nil, false
	}
	return o.SegmentTiers, true
}

// HasSegmentTiers returns a boolean if a field has been set.
func (o *TableTierDetails) HasSegmentTiers() bool {
	if o != nil && !IsNil(o.SegmentTiers) {
		return true
	}

	return false
}

// SetSegmentTiers gets a reference to the given map[string]map[string]string and assigns it to the SegmentTiers field.
func (o *TableTierDetails) SetSegmentTiers(v map[string]map[string]string) {
	o.SegmentTiers = &v
}

func (o TableTierDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableTierDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: tableName is readOnly
	// skip: segmentTiers is readOnly
	return toSerialize, nil
}

type NullableTableTierDetails struct {
	value *TableTierDetails
	isSet bool
}

func (v NullableTableTierDetails) Get() *TableTierDetails {
	return v.value
}

func (v *NullableTableTierDetails) Set(val *TableTierDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableTableTierDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableTableTierDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableTierDetails(val *TableTierDetails) *NullableTableTierDetails {
	return &NullableTableTierDetails{value: val, isSet: true}
}

func (v NullableTableTierDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableTierDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


