/*
Pinot Controller API

Testing LoggerApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_LoggerApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LoggerApiService DownloadLogFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.LoggerApi.DownloadLogFile(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoggerApiService DownloadLogFileFromInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceName string

		httpRes, err := apiClient.LoggerApi.DownloadLogFileFromInstance(context.Background(), instanceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoggerApiService GetLocalLogFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LoggerApi.GetLocalLogFiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoggerApiService GetLogFilesFromAllInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LoggerApi.GetLogFilesFromAllInstances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoggerApiService GetLogFilesFromInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceName string

		resp, httpRes, err := apiClient.LoggerApi.GetLogFilesFromInstance(context.Background(), instanceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoggerApiService GetLogger", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loggerName string

		resp, httpRes, err := apiClient.LoggerApi.GetLogger(context.Background(), loggerName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoggerApiService GetLoggers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LoggerApi.GetLoggers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoggerApiService SetLoggerLevel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loggerName string

		resp, httpRes, err := apiClient.LoggerApi.SetLoggerLevel(context.Background(), loggerName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
