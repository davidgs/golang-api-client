/*
Pinot Controller API

Testing TableApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/davidgs/golang-api-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_TableApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TableApiService AddConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TableApi.AddConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService AddTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TableApi.AddTable(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService AlterTableStateOrListTableConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.AlterTableStateOrListTableConfig(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService AssignInstances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.AssignInstances(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService CheckTableConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TableApi.CheckTableConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService DeleteConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.DeleteConfig(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService DeleteTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.DeleteTable(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService DeleteTimeBoundary", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.DeleteTimeBoundary(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService ForceCommit", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.ForceCommit(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.GetConfig(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetConsumingSegmentsInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		httpRes, err := apiClient.TableApi.GetConsumingSegmentsInfo(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetControllerJobs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.GetControllerJobs(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetExternalView", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.GetExternalView(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetForceCommitJobStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.TableApi.GetForceCommitJobStatus(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetIdealState", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.GetIdealState(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetInstancePartitions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.GetInstancePartitions(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetLiveBrokers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.TableApi.GetLiveBrokers(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetLiveBrokersForTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		httpRes, err := apiClient.TableApi.GetLiveBrokersForTable(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetPauseStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		httpRes, err := apiClient.TableApi.GetPauseStatus(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetTableAggregateMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.GetTableAggregateMetadata(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetTableInstances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		httpRes, err := apiClient.TableApi.GetTableInstances(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetTableSize", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		httpRes, err := apiClient.TableApi.GetTableSize(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetTableState", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.GetTableState(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetTableStats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.GetTableStats(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService GetTableStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.GetTableStatus(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService IngestFromFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.TableApi.IngestFromFile(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService IngestFromURI", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.TableApi.IngestFromURI(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService ListConfigs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TableApi.ListConfigs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService ListTables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TableApi.ListTables(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService PauseConsumption", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		httpRes, err := apiClient.TableApi.PauseConsumption(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService Put", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		httpRes, err := apiClient.TableApi.Put(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService Rebalance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.Rebalance(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService RebalanceStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.TableApi.RebalanceStatus(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService RebuildBrokerResource", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		httpRes, err := apiClient.TableApi.RebuildBrokerResource(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService RecommendConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TableApi.RecommendConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService RemoveInstancePartitions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.RemoveInstancePartitions(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService ReplaceInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.ReplaceInstance(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService ResumeConsumption", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		httpRes, err := apiClient.TableApi.ResumeConsumption(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService SetInstancePartitions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.SetInstancePartitions(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService SetTimeBoundary", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.SetTimeBoundary(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService UpdateConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.UpdateConfig(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService UpdateIndexingConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		httpRes, err := apiClient.TableApi.UpdateIndexingConfig(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService UpdateTableConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.TableApi.UpdateTableConfig(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService UpdateTableMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		httpRes, err := apiClient.TableApi.UpdateTableMetadata(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService ValidateConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TableApi.ValidateConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TableApiService ValidateTableAndSchema", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TableApi.ValidateTableAndSchema(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
