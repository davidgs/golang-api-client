/*
Pinot Controller API

Testing BrokerApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/davidgs/golang-api-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_BrokerApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BrokerApiService GetBrokersForTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.BrokerApi.GetBrokersForTable(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrokerApiService GetBrokersForTableV2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.BrokerApi.GetBrokersForTableV2(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrokerApiService GetBrokersForTenant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenantName string

		resp, httpRes, err := apiClient.BrokerApi.GetBrokersForTenant(context.Background(), tenantName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrokerApiService GetBrokersForTenantV2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenantName string

		resp, httpRes, err := apiClient.BrokerApi.GetBrokersForTenantV2(context.Background(), tenantName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrokerApiService GetTablesToBrokersMapping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BrokerApi.GetTablesToBrokersMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrokerApiService GetTablesToBrokersMappingV2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BrokerApi.GetTablesToBrokersMappingV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrokerApiService GetTenantsToBrokersMapping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BrokerApi.GetTenantsToBrokersMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrokerApiService GetTenantsToBrokersMappingV2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BrokerApi.GetTenantsToBrokersMappingV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrokerApiService ListBrokersMapping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BrokerApi.ListBrokersMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrokerApiService ListBrokersMappingV2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BrokerApi.ListBrokersMappingV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrokerApiService ToggleQueryRateLimiting", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceName string

		httpRes, err := apiClient.BrokerApi.ToggleQueryRateLimiting(context.Background(), instanceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
