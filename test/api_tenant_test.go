/*
Pinot Controller API

Testing TenantApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_TenantApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TenantApiService ChangeTenantState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantName string

		resp, httpRes, err := apiClient.TenantApi.ChangeTenantState(context.Background(), tenantName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantApiService CreateTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.TenantApi.CreateTenant(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantApiService DeleteTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantName string

		httpRes, err := apiClient.TenantApi.DeleteTenant(context.Background(), tenantName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantApiService GetAllTenants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.TenantApi.GetAllTenants(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantApiService GetTablesOnTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantName string

		httpRes, err := apiClient.TenantApi.GetTablesOnTenant(context.Background(), tenantName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantApiService GetTenantMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantName string

		resp, httpRes, err := apiClient.TenantApi.GetTenantMetadata(context.Background(), tenantName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantApiService ListInstanceOrToggleTenantState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantName string

		httpRes, err := apiClient.TenantApi.ListInstanceOrToggleTenantState(context.Background(), tenantName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantApiService RebuildBrokerResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableName string

		httpRes, err := apiClient.TenantApi.RebuildBrokerResource(context.Background(), tableName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantApiService UpdateTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.TenantApi.UpdateTenant(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
