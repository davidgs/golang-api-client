/*
Pinot Controller API

Testing InstanceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/davidgs/golang-api-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_InstanceApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InstanceApiService AddInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.InstanceApi.AddInstance(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceApiService DropInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceName string

		httpRes, err := apiClient.InstanceApi.DropInstance(context.Background(), instanceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceApiService GetAllInstances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.InstanceApi.GetAllInstances(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceApiService GetInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceName string

		httpRes, err := apiClient.InstanceApi.GetInstance(context.Background(), instanceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceApiService ToggleInstanceState", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceName string

		httpRes, err := apiClient.InstanceApi.ToggleInstanceState(context.Background(), instanceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceApiService UpdateBrokerResource", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceName string

		httpRes, err := apiClient.InstanceApi.UpdateBrokerResource(context.Background(), instanceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceApiService UpdateInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceName string

		httpRes, err := apiClient.InstanceApi.UpdateInstance(context.Background(), instanceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceApiService UpdateInstanceTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var instanceName string

		httpRes, err := apiClient.InstanceApi.UpdateInstanceTags(context.Background(), instanceName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
