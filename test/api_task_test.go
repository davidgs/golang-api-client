/*
Pinot Controller API

Testing TaskApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_TaskApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TaskApiService CleanUpTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.CleanUpTasks(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService CleanUpTasksDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.CleanUpTasksDeprecated(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService DeleteTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskName string

		resp, httpRes, err := apiClient.TaskApi.DeleteTask(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService DeleteTaskMetadataByTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string
		var tableNameWithType string

		resp, httpRes, err := apiClient.TaskApi.DeleteTaskMetadataByTable(context.Background(), taskType, tableNameWithType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService DeleteTaskQueue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.DeleteTaskQueue(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService DeleteTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.DeleteTasks(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService ExecuteAdhocTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.TaskApi.ExecuteAdhocTask(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetCronSchedulerInformation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TaskApi.GetCronSchedulerInformation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetCronSchedulerJobDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TaskApi.GetCronSchedulerJobDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetCronSchedulerJobKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TaskApi.GetCronSchedulerJobKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetSubtaskConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskName string

		resp, httpRes, err := apiClient.TaskApi.GetSubtaskConfigs(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetSubtaskOnWorkerProgress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.TaskApi.GetSubtaskOnWorkerProgress(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetSubtaskProgress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskName string

		resp, httpRes, err := apiClient.TaskApi.GetSubtaskProgress(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetSubtaskStates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskName string

		resp, httpRes, err := apiClient.TaskApi.GetSubtaskStates(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskName string

		resp, httpRes, err := apiClient.TaskApi.GetTaskConfig(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskName string

		resp, httpRes, err := apiClient.TaskApi.GetTaskConfigs(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskConfigsDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskName string

		resp, httpRes, err := apiClient.TaskApi.GetTaskConfigsDeprecated(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskCounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.GetTaskCounts(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskDebugInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskName string

		resp, httpRes, err := apiClient.TaskApi.GetTaskDebugInfo(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskGenerationDebugInto", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string
		var tableNameWithType string

		resp, httpRes, err := apiClient.TaskApi.GetTaskGenerationDebugInto(context.Background(), taskType, tableNameWithType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskMetadataByTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string
		var tableNameWithType string

		resp, httpRes, err := apiClient.TaskApi.GetTaskMetadataByTable(context.Background(), taskType, tableNameWithType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskQueueState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.GetTaskQueueState(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskQueueStateDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.GetTaskQueueStateDeprecated(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskQueues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TaskApi.GetTaskQueues(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskName string

		resp, httpRes, err := apiClient.TaskApi.GetTaskState(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskStateDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskName string

		resp, httpRes, err := apiClient.TaskApi.GetTaskStateDeprecated(context.Background(), taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskStates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.GetTaskStates(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskStatesByTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string
		var tableNameWithType string

		resp, httpRes, err := apiClient.TaskApi.GetTaskStatesByTable(context.Background(), taskType, tableNameWithType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTaskStatesDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.GetTaskStatesDeprecated(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.GetTasks(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTasksDebugInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string
		var tableNameWithType string

		resp, httpRes, err := apiClient.TaskApi.GetTasksDebugInfo(context.Background(), taskType, tableNameWithType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTasksDebugInfo1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.GetTasksDebugInfo1(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService GetTasksDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.GetTasksDeprecated(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService ListTaskTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TaskApi.ListTaskTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService ResumeTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.ResumeTasks(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService ScheduleTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TaskApi.ScheduleTasks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService ScheduleTasksDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TaskApi.ScheduleTasksDeprecated(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService StopTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.StopTasks(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskApiService ToggleTaskQueueState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskType string

		resp, httpRes, err := apiClient.TaskApi.ToggleTaskQueueState(context.Background(), taskType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
