/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InstanceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceInfo{}

// InstanceInfo struct for InstanceInfo
type InstanceInfo struct {
	Port *int32 `json:"port,omitempty"`
	Host *string `json:"host,omitempty"`
	InstanceName *string `json:"instanceName,omitempty"`
}

// NewInstanceInfo instantiates a new InstanceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceInfo() *InstanceInfo {
	this := InstanceInfo{}
	return &this
}

// NewInstanceInfoWithDefaults instantiates a new InstanceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceInfoWithDefaults() *InstanceInfo {
	this := InstanceInfo{}
	return &this
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *InstanceInfo) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *InstanceInfo) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *InstanceInfo) SetPort(v int32) {
	o.Port = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *InstanceInfo) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *InstanceInfo) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *InstanceInfo) SetHost(v string) {
	o.Host = &v
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *InstanceInfo) GetInstanceName() string {
	if o == nil || IsNil(o.InstanceName) {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInfo) GetInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceName) {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *InstanceInfo) HasInstanceName() bool {
	if o != nil && !IsNil(o.InstanceName) {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *InstanceInfo) SetInstanceName(v string) {
	o.InstanceName = &v
}

func (o InstanceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.InstanceName) {
		toSerialize["instanceName"] = o.InstanceName
	}
	return toSerialize, nil
}

type NullableInstanceInfo struct {
	value *InstanceInfo
	isSet bool
}

func (v NullableInstanceInfo) Get() *InstanceInfo {
	return v.value
}

func (v *NullableInstanceInfo) Set(val *InstanceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceInfo(val *InstanceInfo) *NullableInstanceInfo {
	return &NullableInstanceInfo{value: val, isSet: true}
}

func (v NullableInstanceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


