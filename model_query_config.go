/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryConfig{}

// QueryConfig struct for QueryConfig
type QueryConfig struct {
	TimeoutMs *int64 `json:"timeoutMs,omitempty"`
	DisableGroovy *bool `json:"disableGroovy,omitempty"`
	UseApproximateFunction *bool `json:"useApproximateFunction,omitempty"`
	ExpressionOverrideMap *map[string]string `json:"expressionOverrideMap,omitempty"`
}

// NewQueryConfig instantiates a new QueryConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryConfig() *QueryConfig {
	this := QueryConfig{}
	return &this
}

// NewQueryConfigWithDefaults instantiates a new QueryConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryConfigWithDefaults() *QueryConfig {
	this := QueryConfig{}
	return &this
}

// GetTimeoutMs returns the TimeoutMs field value if set, zero value otherwise.
func (o *QueryConfig) GetTimeoutMs() int64 {
	if o == nil || IsNil(o.TimeoutMs) {
		var ret int64
		return ret
	}
	return *o.TimeoutMs
}

// GetTimeoutMsOk returns a tuple with the TimeoutMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryConfig) GetTimeoutMsOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeoutMs) {
		return nil, false
	}
	return o.TimeoutMs, true
}

// HasTimeoutMs returns a boolean if a field has been set.
func (o *QueryConfig) HasTimeoutMs() bool {
	if o != nil && !IsNil(o.TimeoutMs) {
		return true
	}

	return false
}

// SetTimeoutMs gets a reference to the given int64 and assigns it to the TimeoutMs field.
func (o *QueryConfig) SetTimeoutMs(v int64) {
	o.TimeoutMs = &v
}

// GetDisableGroovy returns the DisableGroovy field value if set, zero value otherwise.
func (o *QueryConfig) GetDisableGroovy() bool {
	if o == nil || IsNil(o.DisableGroovy) {
		var ret bool
		return ret
	}
	return *o.DisableGroovy
}

// GetDisableGroovyOk returns a tuple with the DisableGroovy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryConfig) GetDisableGroovyOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableGroovy) {
		return nil, false
	}
	return o.DisableGroovy, true
}

// HasDisableGroovy returns a boolean if a field has been set.
func (o *QueryConfig) HasDisableGroovy() bool {
	if o != nil && !IsNil(o.DisableGroovy) {
		return true
	}

	return false
}

// SetDisableGroovy gets a reference to the given bool and assigns it to the DisableGroovy field.
func (o *QueryConfig) SetDisableGroovy(v bool) {
	o.DisableGroovy = &v
}

// GetUseApproximateFunction returns the UseApproximateFunction field value if set, zero value otherwise.
func (o *QueryConfig) GetUseApproximateFunction() bool {
	if o == nil || IsNil(o.UseApproximateFunction) {
		var ret bool
		return ret
	}
	return *o.UseApproximateFunction
}

// GetUseApproximateFunctionOk returns a tuple with the UseApproximateFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryConfig) GetUseApproximateFunctionOk() (*bool, bool) {
	if o == nil || IsNil(o.UseApproximateFunction) {
		return nil, false
	}
	return o.UseApproximateFunction, true
}

// HasUseApproximateFunction returns a boolean if a field has been set.
func (o *QueryConfig) HasUseApproximateFunction() bool {
	if o != nil && !IsNil(o.UseApproximateFunction) {
		return true
	}

	return false
}

// SetUseApproximateFunction gets a reference to the given bool and assigns it to the UseApproximateFunction field.
func (o *QueryConfig) SetUseApproximateFunction(v bool) {
	o.UseApproximateFunction = &v
}

// GetExpressionOverrideMap returns the ExpressionOverrideMap field value if set, zero value otherwise.
func (o *QueryConfig) GetExpressionOverrideMap() map[string]string {
	if o == nil || IsNil(o.ExpressionOverrideMap) {
		var ret map[string]string
		return ret
	}
	return *o.ExpressionOverrideMap
}

// GetExpressionOverrideMapOk returns a tuple with the ExpressionOverrideMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryConfig) GetExpressionOverrideMapOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ExpressionOverrideMap) {
		return nil, false
	}
	return o.ExpressionOverrideMap, true
}

// HasExpressionOverrideMap returns a boolean if a field has been set.
func (o *QueryConfig) HasExpressionOverrideMap() bool {
	if o != nil && !IsNil(o.ExpressionOverrideMap) {
		return true
	}

	return false
}

// SetExpressionOverrideMap gets a reference to the given map[string]string and assigns it to the ExpressionOverrideMap field.
func (o *QueryConfig) SetExpressionOverrideMap(v map[string]string) {
	o.ExpressionOverrideMap = &v
}

func (o QueryConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: timeoutMs is readOnly
	// skip: disableGroovy is readOnly
	// skip: useApproximateFunction is readOnly
	// skip: expressionOverrideMap is readOnly
	return toSerialize, nil
}

type NullableQueryConfig struct {
	value *QueryConfig
	isSet bool
}

func (v NullableQueryConfig) Get() *QueryConfig {
	return v.value
}

func (v *NullableQueryConfig) Set(val *QueryConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryConfig(val *QueryConfig) *NullableQueryConfig {
	return &NullableQueryConfig{value: val, isSet: true}
}

func (v NullableQueryConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


