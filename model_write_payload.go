/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WritePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WritePayload{}

// WritePayload struct for WritePayload
type WritePayload struct {
	Values []map[string]map[string]interface{} `json:"values,omitempty"`
	ColumnNames []string `json:"columnNames,omitempty"`
	Rows [][]map[string]interface{} `json:"rows,omitempty"`
}

// NewWritePayload instantiates a new WritePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWritePayload() *WritePayload {
	this := WritePayload{}
	return &this
}

// NewWritePayloadWithDefaults instantiates a new WritePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWritePayloadWithDefaults() *WritePayload {
	this := WritePayload{}
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *WritePayload) GetValues() []map[string]map[string]interface{} {
	if o == nil || IsNil(o.Values) {
		var ret []map[string]map[string]interface{}
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritePayload) GetValuesOk() ([]map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *WritePayload) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []map[string]map[string]interface{} and assigns it to the Values field.
func (o *WritePayload) SetValues(v []map[string]map[string]interface{}) {
	o.Values = v
}

// GetColumnNames returns the ColumnNames field value if set, zero value otherwise.
func (o *WritePayload) GetColumnNames() []string {
	if o == nil || IsNil(o.ColumnNames) {
		var ret []string
		return ret
	}
	return o.ColumnNames
}

// GetColumnNamesOk returns a tuple with the ColumnNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritePayload) GetColumnNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ColumnNames) {
		return nil, false
	}
	return o.ColumnNames, true
}

// HasColumnNames returns a boolean if a field has been set.
func (o *WritePayload) HasColumnNames() bool {
	if o != nil && !IsNil(o.ColumnNames) {
		return true
	}

	return false
}

// SetColumnNames gets a reference to the given []string and assigns it to the ColumnNames field.
func (o *WritePayload) SetColumnNames(v []string) {
	o.ColumnNames = v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *WritePayload) GetRows() [][]map[string]interface{} {
	if o == nil || IsNil(o.Rows) {
		var ret [][]map[string]interface{}
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritePayload) GetRowsOk() ([][]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *WritePayload) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given [][]map[string]interface{} and assigns it to the Rows field.
func (o *WritePayload) SetRows(v [][]map[string]interface{}) {
	o.Rows = v
}

func (o WritePayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WritePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.ColumnNames) {
		toSerialize["columnNames"] = o.ColumnNames
	}
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	return toSerialize, nil
}

type NullableWritePayload struct {
	value *WritePayload
	isSet bool
}

func (v NullableWritePayload) Get() *WritePayload {
	return v.value
}

func (v *NullableWritePayload) Set(val *WritePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableWritePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableWritePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritePayload(val *WritePayload) *NullableWritePayload {
	return &NullableWritePayload{value: val, isSet: true}
}

func (v NullableWritePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


