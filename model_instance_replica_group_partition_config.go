/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InstanceReplicaGroupPartitionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceReplicaGroupPartitionConfig{}

// InstanceReplicaGroupPartitionConfig struct for InstanceReplicaGroupPartitionConfig
type InstanceReplicaGroupPartitionConfig struct {
	ReplicaGroupBased *bool `json:"replicaGroupBased,omitempty"`
	NumInstances *int32 `json:"numInstances,omitempty"`
	NumReplicaGroups *int32 `json:"numReplicaGroups,omitempty"`
	NumInstancesPerReplicaGroup *int32 `json:"numInstancesPerReplicaGroup,omitempty"`
	NumPartitions *int32 `json:"numPartitions,omitempty"`
	NumInstancesPerPartition *int32 `json:"numInstancesPerPartition,omitempty"`
	MinimizeDataMovement *bool `json:"minimizeDataMovement,omitempty"`
}

// NewInstanceReplicaGroupPartitionConfig instantiates a new InstanceReplicaGroupPartitionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceReplicaGroupPartitionConfig() *InstanceReplicaGroupPartitionConfig {
	this := InstanceReplicaGroupPartitionConfig{}
	return &this
}

// NewInstanceReplicaGroupPartitionConfigWithDefaults instantiates a new InstanceReplicaGroupPartitionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceReplicaGroupPartitionConfigWithDefaults() *InstanceReplicaGroupPartitionConfig {
	this := InstanceReplicaGroupPartitionConfig{}
	return &this
}

// GetReplicaGroupBased returns the ReplicaGroupBased field value if set, zero value otherwise.
func (o *InstanceReplicaGroupPartitionConfig) GetReplicaGroupBased() bool {
	if o == nil || IsNil(o.ReplicaGroupBased) {
		var ret bool
		return ret
	}
	return *o.ReplicaGroupBased
}

// GetReplicaGroupBasedOk returns a tuple with the ReplicaGroupBased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceReplicaGroupPartitionConfig) GetReplicaGroupBasedOk() (*bool, bool) {
	if o == nil || IsNil(o.ReplicaGroupBased) {
		return nil, false
	}
	return o.ReplicaGroupBased, true
}

// HasReplicaGroupBased returns a boolean if a field has been set.
func (o *InstanceReplicaGroupPartitionConfig) HasReplicaGroupBased() bool {
	if o != nil && !IsNil(o.ReplicaGroupBased) {
		return true
	}

	return false
}

// SetReplicaGroupBased gets a reference to the given bool and assigns it to the ReplicaGroupBased field.
func (o *InstanceReplicaGroupPartitionConfig) SetReplicaGroupBased(v bool) {
	o.ReplicaGroupBased = &v
}

// GetNumInstances returns the NumInstances field value if set, zero value otherwise.
func (o *InstanceReplicaGroupPartitionConfig) GetNumInstances() int32 {
	if o == nil || IsNil(o.NumInstances) {
		var ret int32
		return ret
	}
	return *o.NumInstances
}

// GetNumInstancesOk returns a tuple with the NumInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceReplicaGroupPartitionConfig) GetNumInstancesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumInstances) {
		return nil, false
	}
	return o.NumInstances, true
}

// HasNumInstances returns a boolean if a field has been set.
func (o *InstanceReplicaGroupPartitionConfig) HasNumInstances() bool {
	if o != nil && !IsNil(o.NumInstances) {
		return true
	}

	return false
}

// SetNumInstances gets a reference to the given int32 and assigns it to the NumInstances field.
func (o *InstanceReplicaGroupPartitionConfig) SetNumInstances(v int32) {
	o.NumInstances = &v
}

// GetNumReplicaGroups returns the NumReplicaGroups field value if set, zero value otherwise.
func (o *InstanceReplicaGroupPartitionConfig) GetNumReplicaGroups() int32 {
	if o == nil || IsNil(o.NumReplicaGroups) {
		var ret int32
		return ret
	}
	return *o.NumReplicaGroups
}

// GetNumReplicaGroupsOk returns a tuple with the NumReplicaGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceReplicaGroupPartitionConfig) GetNumReplicaGroupsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumReplicaGroups) {
		return nil, false
	}
	return o.NumReplicaGroups, true
}

// HasNumReplicaGroups returns a boolean if a field has been set.
func (o *InstanceReplicaGroupPartitionConfig) HasNumReplicaGroups() bool {
	if o != nil && !IsNil(o.NumReplicaGroups) {
		return true
	}

	return false
}

// SetNumReplicaGroups gets a reference to the given int32 and assigns it to the NumReplicaGroups field.
func (o *InstanceReplicaGroupPartitionConfig) SetNumReplicaGroups(v int32) {
	o.NumReplicaGroups = &v
}

// GetNumInstancesPerReplicaGroup returns the NumInstancesPerReplicaGroup field value if set, zero value otherwise.
func (o *InstanceReplicaGroupPartitionConfig) GetNumInstancesPerReplicaGroup() int32 {
	if o == nil || IsNil(o.NumInstancesPerReplicaGroup) {
		var ret int32
		return ret
	}
	return *o.NumInstancesPerReplicaGroup
}

// GetNumInstancesPerReplicaGroupOk returns a tuple with the NumInstancesPerReplicaGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceReplicaGroupPartitionConfig) GetNumInstancesPerReplicaGroupOk() (*int32, bool) {
	if o == nil || IsNil(o.NumInstancesPerReplicaGroup) {
		return nil, false
	}
	return o.NumInstancesPerReplicaGroup, true
}

// HasNumInstancesPerReplicaGroup returns a boolean if a field has been set.
func (o *InstanceReplicaGroupPartitionConfig) HasNumInstancesPerReplicaGroup() bool {
	if o != nil && !IsNil(o.NumInstancesPerReplicaGroup) {
		return true
	}

	return false
}

// SetNumInstancesPerReplicaGroup gets a reference to the given int32 and assigns it to the NumInstancesPerReplicaGroup field.
func (o *InstanceReplicaGroupPartitionConfig) SetNumInstancesPerReplicaGroup(v int32) {
	o.NumInstancesPerReplicaGroup = &v
}

// GetNumPartitions returns the NumPartitions field value if set, zero value otherwise.
func (o *InstanceReplicaGroupPartitionConfig) GetNumPartitions() int32 {
	if o == nil || IsNil(o.NumPartitions) {
		var ret int32
		return ret
	}
	return *o.NumPartitions
}

// GetNumPartitionsOk returns a tuple with the NumPartitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceReplicaGroupPartitionConfig) GetNumPartitionsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumPartitions) {
		return nil, false
	}
	return o.NumPartitions, true
}

// HasNumPartitions returns a boolean if a field has been set.
func (o *InstanceReplicaGroupPartitionConfig) HasNumPartitions() bool {
	if o != nil && !IsNil(o.NumPartitions) {
		return true
	}

	return false
}

// SetNumPartitions gets a reference to the given int32 and assigns it to the NumPartitions field.
func (o *InstanceReplicaGroupPartitionConfig) SetNumPartitions(v int32) {
	o.NumPartitions = &v
}

// GetNumInstancesPerPartition returns the NumInstancesPerPartition field value if set, zero value otherwise.
func (o *InstanceReplicaGroupPartitionConfig) GetNumInstancesPerPartition() int32 {
	if o == nil || IsNil(o.NumInstancesPerPartition) {
		var ret int32
		return ret
	}
	return *o.NumInstancesPerPartition
}

// GetNumInstancesPerPartitionOk returns a tuple with the NumInstancesPerPartition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceReplicaGroupPartitionConfig) GetNumInstancesPerPartitionOk() (*int32, bool) {
	if o == nil || IsNil(o.NumInstancesPerPartition) {
		return nil, false
	}
	return o.NumInstancesPerPartition, true
}

// HasNumInstancesPerPartition returns a boolean if a field has been set.
func (o *InstanceReplicaGroupPartitionConfig) HasNumInstancesPerPartition() bool {
	if o != nil && !IsNil(o.NumInstancesPerPartition) {
		return true
	}

	return false
}

// SetNumInstancesPerPartition gets a reference to the given int32 and assigns it to the NumInstancesPerPartition field.
func (o *InstanceReplicaGroupPartitionConfig) SetNumInstancesPerPartition(v int32) {
	o.NumInstancesPerPartition = &v
}

// GetMinimizeDataMovement returns the MinimizeDataMovement field value if set, zero value otherwise.
func (o *InstanceReplicaGroupPartitionConfig) GetMinimizeDataMovement() bool {
	if o == nil || IsNil(o.MinimizeDataMovement) {
		var ret bool
		return ret
	}
	return *o.MinimizeDataMovement
}

// GetMinimizeDataMovementOk returns a tuple with the MinimizeDataMovement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceReplicaGroupPartitionConfig) GetMinimizeDataMovementOk() (*bool, bool) {
	if o == nil || IsNil(o.MinimizeDataMovement) {
		return nil, false
	}
	return o.MinimizeDataMovement, true
}

// HasMinimizeDataMovement returns a boolean if a field has been set.
func (o *InstanceReplicaGroupPartitionConfig) HasMinimizeDataMovement() bool {
	if o != nil && !IsNil(o.MinimizeDataMovement) {
		return true
	}

	return false
}

// SetMinimizeDataMovement gets a reference to the given bool and assigns it to the MinimizeDataMovement field.
func (o *InstanceReplicaGroupPartitionConfig) SetMinimizeDataMovement(v bool) {
	o.MinimizeDataMovement = &v
}

func (o InstanceReplicaGroupPartitionConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceReplicaGroupPartitionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: replicaGroupBased is readOnly
	// skip: numInstances is readOnly
	// skip: numReplicaGroups is readOnly
	// skip: numInstancesPerReplicaGroup is readOnly
	// skip: numPartitions is readOnly
	// skip: numInstancesPerPartition is readOnly
	// skip: minimizeDataMovement is readOnly
	return toSerialize, nil
}

type NullableInstanceReplicaGroupPartitionConfig struct {
	value *InstanceReplicaGroupPartitionConfig
	isSet bool
}

func (v NullableInstanceReplicaGroupPartitionConfig) Get() *InstanceReplicaGroupPartitionConfig {
	return v.value
}

func (v *NullableInstanceReplicaGroupPartitionConfig) Set(val *InstanceReplicaGroupPartitionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceReplicaGroupPartitionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceReplicaGroupPartitionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceReplicaGroupPartitionConfig(val *InstanceReplicaGroupPartitionConfig) *NullableInstanceReplicaGroupPartitionConfig {
	return &NullableInstanceReplicaGroupPartitionConfig{value: val, isSet: true}
}

func (v NullableInstanceReplicaGroupPartitionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceReplicaGroupPartitionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


