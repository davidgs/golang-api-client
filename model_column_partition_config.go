/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ColumnPartitionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColumnPartitionConfig{}

// ColumnPartitionConfig struct for ColumnPartitionConfig
type ColumnPartitionConfig struct {
	FunctionName string `json:"functionName"`
	NumPartitions int32 `json:"numPartitions"`
	FunctionConfig *map[string]string `json:"functionConfig,omitempty"`
}

// NewColumnPartitionConfig instantiates a new ColumnPartitionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColumnPartitionConfig(functionName string, numPartitions int32) *ColumnPartitionConfig {
	this := ColumnPartitionConfig{}
	this.FunctionName = functionName
	this.NumPartitions = numPartitions
	return &this
}

// NewColumnPartitionConfigWithDefaults instantiates a new ColumnPartitionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColumnPartitionConfigWithDefaults() *ColumnPartitionConfig {
	this := ColumnPartitionConfig{}
	return &this
}

// GetFunctionName returns the FunctionName field value
func (o *ColumnPartitionConfig) GetFunctionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value
// and a boolean to check if the value has been set.
func (o *ColumnPartitionConfig) GetFunctionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FunctionName, true
}

// SetFunctionName sets field value
func (o *ColumnPartitionConfig) SetFunctionName(v string) {
	o.FunctionName = v
}

// GetNumPartitions returns the NumPartitions field value
func (o *ColumnPartitionConfig) GetNumPartitions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumPartitions
}

// GetNumPartitionsOk returns a tuple with the NumPartitions field value
// and a boolean to check if the value has been set.
func (o *ColumnPartitionConfig) GetNumPartitionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumPartitions, true
}

// SetNumPartitions sets field value
func (o *ColumnPartitionConfig) SetNumPartitions(v int32) {
	o.NumPartitions = v
}

// GetFunctionConfig returns the FunctionConfig field value if set, zero value otherwise.
func (o *ColumnPartitionConfig) GetFunctionConfig() map[string]string {
	if o == nil || IsNil(o.FunctionConfig) {
		var ret map[string]string
		return ret
	}
	return *o.FunctionConfig
}

// GetFunctionConfigOk returns a tuple with the FunctionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColumnPartitionConfig) GetFunctionConfigOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.FunctionConfig) {
		return nil, false
	}
	return o.FunctionConfig, true
}

// HasFunctionConfig returns a boolean if a field has been set.
func (o *ColumnPartitionConfig) HasFunctionConfig() bool {
	if o != nil && !IsNil(o.FunctionConfig) {
		return true
	}

	return false
}

// SetFunctionConfig gets a reference to the given map[string]string and assigns it to the FunctionConfig field.
func (o *ColumnPartitionConfig) SetFunctionConfig(v map[string]string) {
	o.FunctionConfig = &v
}

func (o ColumnPartitionConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColumnPartitionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: functionName is readOnly
	// skip: numPartitions is readOnly
	// skip: functionConfig is readOnly
	return toSerialize, nil
}

type NullableColumnPartitionConfig struct {
	value *ColumnPartitionConfig
	isSet bool
}

func (v NullableColumnPartitionConfig) Get() *ColumnPartitionConfig {
	return v.value
}

func (v *NullableColumnPartitionConfig) Set(val *ColumnPartitionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableColumnPartitionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableColumnPartitionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumnPartitionConfig(val *ColumnPartitionConfig) *NullableColumnPartitionConfig {
	return &NullableColumnPartitionConfig{value: val, isSet: true}
}

func (v NullableColumnPartitionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumnPartitionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


