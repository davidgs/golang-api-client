/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TableWriteConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableWriteConfig{}

// TableWriteConfig struct for TableWriteConfig
type TableWriteConfig struct {
	Topic *string `json:"topic,omitempty"`
	ProducerConfig *map[string]string `json:"producerConfig,omitempty"`
	EncoderConfig *map[string]string `json:"encoderConfig,omitempty"`
	EncoderClass *string `json:"encoderClass,omitempty"`
	ProducerType *string `json:"producerType,omitempty"`
	PartitionColumns []string `json:"partitionColumns,omitempty"`
}

// NewTableWriteConfig instantiates a new TableWriteConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableWriteConfig() *TableWriteConfig {
	this := TableWriteConfig{}
	return &this
}

// NewTableWriteConfigWithDefaults instantiates a new TableWriteConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableWriteConfigWithDefaults() *TableWriteConfig {
	this := TableWriteConfig{}
	return &this
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *TableWriteConfig) GetTopic() string {
	if o == nil || IsNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableWriteConfig) GetTopicOk() (*string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *TableWriteConfig) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *TableWriteConfig) SetTopic(v string) {
	o.Topic = &v
}

// GetProducerConfig returns the ProducerConfig field value if set, zero value otherwise.
func (o *TableWriteConfig) GetProducerConfig() map[string]string {
	if o == nil || IsNil(o.ProducerConfig) {
		var ret map[string]string
		return ret
	}
	return *o.ProducerConfig
}

// GetProducerConfigOk returns a tuple with the ProducerConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableWriteConfig) GetProducerConfigOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ProducerConfig) {
		return nil, false
	}
	return o.ProducerConfig, true
}

// HasProducerConfig returns a boolean if a field has been set.
func (o *TableWriteConfig) HasProducerConfig() bool {
	if o != nil && !IsNil(o.ProducerConfig) {
		return true
	}

	return false
}

// SetProducerConfig gets a reference to the given map[string]string and assigns it to the ProducerConfig field.
func (o *TableWriteConfig) SetProducerConfig(v map[string]string) {
	o.ProducerConfig = &v
}

// GetEncoderConfig returns the EncoderConfig field value if set, zero value otherwise.
func (o *TableWriteConfig) GetEncoderConfig() map[string]string {
	if o == nil || IsNil(o.EncoderConfig) {
		var ret map[string]string
		return ret
	}
	return *o.EncoderConfig
}

// GetEncoderConfigOk returns a tuple with the EncoderConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableWriteConfig) GetEncoderConfigOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.EncoderConfig) {
		return nil, false
	}
	return o.EncoderConfig, true
}

// HasEncoderConfig returns a boolean if a field has been set.
func (o *TableWriteConfig) HasEncoderConfig() bool {
	if o != nil && !IsNil(o.EncoderConfig) {
		return true
	}

	return false
}

// SetEncoderConfig gets a reference to the given map[string]string and assigns it to the EncoderConfig field.
func (o *TableWriteConfig) SetEncoderConfig(v map[string]string) {
	o.EncoderConfig = &v
}

// GetEncoderClass returns the EncoderClass field value if set, zero value otherwise.
func (o *TableWriteConfig) GetEncoderClass() string {
	if o == nil || IsNil(o.EncoderClass) {
		var ret string
		return ret
	}
	return *o.EncoderClass
}

// GetEncoderClassOk returns a tuple with the EncoderClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableWriteConfig) GetEncoderClassOk() (*string, bool) {
	if o == nil || IsNil(o.EncoderClass) {
		return nil, false
	}
	return o.EncoderClass, true
}

// HasEncoderClass returns a boolean if a field has been set.
func (o *TableWriteConfig) HasEncoderClass() bool {
	if o != nil && !IsNil(o.EncoderClass) {
		return true
	}

	return false
}

// SetEncoderClass gets a reference to the given string and assigns it to the EncoderClass field.
func (o *TableWriteConfig) SetEncoderClass(v string) {
	o.EncoderClass = &v
}

// GetProducerType returns the ProducerType field value if set, zero value otherwise.
func (o *TableWriteConfig) GetProducerType() string {
	if o == nil || IsNil(o.ProducerType) {
		var ret string
		return ret
	}
	return *o.ProducerType
}

// GetProducerTypeOk returns a tuple with the ProducerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableWriteConfig) GetProducerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProducerType) {
		return nil, false
	}
	return o.ProducerType, true
}

// HasProducerType returns a boolean if a field has been set.
func (o *TableWriteConfig) HasProducerType() bool {
	if o != nil && !IsNil(o.ProducerType) {
		return true
	}

	return false
}

// SetProducerType gets a reference to the given string and assigns it to the ProducerType field.
func (o *TableWriteConfig) SetProducerType(v string) {
	o.ProducerType = &v
}

// GetPartitionColumns returns the PartitionColumns field value if set, zero value otherwise.
func (o *TableWriteConfig) GetPartitionColumns() []string {
	if o == nil || IsNil(o.PartitionColumns) {
		var ret []string
		return ret
	}
	return o.PartitionColumns
}

// GetPartitionColumnsOk returns a tuple with the PartitionColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableWriteConfig) GetPartitionColumnsOk() ([]string, bool) {
	if o == nil || IsNil(o.PartitionColumns) {
		return nil, false
	}
	return o.PartitionColumns, true
}

// HasPartitionColumns returns a boolean if a field has been set.
func (o *TableWriteConfig) HasPartitionColumns() bool {
	if o != nil && !IsNil(o.PartitionColumns) {
		return true
	}

	return false
}

// SetPartitionColumns gets a reference to the given []string and assigns it to the PartitionColumns field.
func (o *TableWriteConfig) SetPartitionColumns(v []string) {
	o.PartitionColumns = v
}

func (o TableWriteConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableWriteConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.ProducerConfig) {
		toSerialize["producerConfig"] = o.ProducerConfig
	}
	if !IsNil(o.EncoderConfig) {
		toSerialize["encoderConfig"] = o.EncoderConfig
	}
	if !IsNil(o.EncoderClass) {
		toSerialize["encoderClass"] = o.EncoderClass
	}
	if !IsNil(o.ProducerType) {
		toSerialize["producerType"] = o.ProducerType
	}
	if !IsNil(o.PartitionColumns) {
		toSerialize["partitionColumns"] = o.PartitionColumns
	}
	return toSerialize, nil
}

type NullableTableWriteConfig struct {
	value *TableWriteConfig
	isSet bool
}

func (v NullableTableWriteConfig) Get() *TableWriteConfig {
	return v.value
}

func (v *NullableTableWriteConfig) Set(val *TableWriteConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTableWriteConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTableWriteConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableWriteConfig(val *TableWriteConfig) *NullableTableWriteConfig {
	return &NullableTableWriteConfig{value: val, isSet: true}
}

func (v NullableTableWriteConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableWriteConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


