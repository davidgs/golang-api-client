openapi: 3.0.1
info:
  contact:
    name: https://github.com/apache/pinot
  description: APIs for accessing Pinot Controller information
  title: Pinot Controller API
  version: "1.0"
servers:
- url: /
tags:
- name: AtomicIngestion
- name: ClusterHealth
- name: Tuner
- name: Cluster
- name: User
- name: Broker
- name: AppConfigs
- name: Auth
- name: Health
- name: Logger
- name: PeriodicTask
- name: Table
- name: Instance
- name: Leader
- name: Query
- name: Schema
- name: Segment
- name: Tenant
- name: Task
- name: Upsert
- name: Version
- name: WriteApi
- name: Zookeeper
paths:
  /segments/{tableName}/startDataIngestRequest:
    post:
      operationId: startDataIngestRequest
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: tableType
        required: true
        schema:
          type: string
      - description: Task type
        in: query
        name: taskType
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Mark the start of data ingestion to upload multiple segments
      tags:
      - AtomicIngestion
      x-codegen-request-body-name: body
  /segments/{tableName}/endDataIngestRequest:
    post:
      operationId: endDataIngestRequest
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: tableType
        required: true
        schema:
          type: string
      - description: Task type
        in: query
        name: taskType
        required: true
        schema:
          type: string
      - description: Key of checkpoint entry
        in: query
        name: checkpointEntryKey
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Mark the end of data ingestion to upload multiple segments
      tags:
      - AtomicIngestion
  /clusterHealth:
    get:
      operationId: getClusterHealthDetails
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterHealthResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Get cached cluster health details
      tags:
      - ClusterHealth
  /tuner/{tableName}:
    get:
      operationId: tuneTable
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Apply tuner(s) to a table
      tags:
      - Tuner
    post:
      operationId: tuneTable_1
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Apply specific tuner to a table
      tags:
      - Tuner
      x-codegen-request-body-name: body
  /debug/tables/{tableName}:
    get:
      description: Debug information for table.
      operationId: getTableDebugInfo
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      - description: Verbosity of debug information
        in: query
        name: verbosity
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Table not found
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Get debug information for table.
      tags:
      - Cluster
  /debug/segments/{tableName}/{segmentName}:
    get:
      description: Debug information for segment.
      operationId: getSegmentDebugInfo
      parameters:
      - description: Name of the table (with type)
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Name of the segment
        in: path
        name: segmentName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Segment not found
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Get debug information for segment.
      tags:
      - Cluster
  /users:
    get:
      description: List all users in cluster
      operationId: listUers
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: List all uses in cluster
      tags:
      - User
    post:
      description: Add a user
      operationId: addUser
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Add a user
      tags:
      - User
      x-codegen-request-body-name: body
  /users/{username}:
    delete:
      description: Delete a user
      operationId: deleteUser
      parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
      - in: query
        name: component
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Delete a user
      tags:
      - User
    get:
      description: Get an user in cluster
      operationId: getUser
      parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
      - in: query
        name: component
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Get an user in cluster
      tags:
      - User
    put:
      description: Update user config for user
      operationId: updateUserConfig
      parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
      - in: query
        name: component
        schema:
          type: string
      - in: query
        name: passwordChanged
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Update user config for a user
      tags:
      - User
      x-codegen-request-body-name: body
  /brokers/tenants:
    get:
      description: List tenants to brokers mappings
      operationId: getTenantsToBrokersMapping
      parameters:
      - description: ONLINE|OFFLINE
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    type: string
                  type: array
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: List tenants to brokers mappings
      tags:
      - Broker
  /brokers/tables:
    get:
      description: List tables to brokers mappings
      operationId: getTablesToBrokersMapping
      parameters:
      - description: ONLINE|OFFLINE
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    type: string
                  type: array
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: List tables to brokers mappings
      tags:
      - Broker
  /brokers/tenants/{tenantName}:
    get:
      description: List brokers for a given tenant
      operationId: getBrokersForTenant
      parameters:
      - description: Name of the tenant
        in: path
        name: tenantName
        required: true
        schema:
          type: string
      - description: ONLINE|OFFLINE
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: List brokers for a given tenant
      tags:
      - Broker
  /v2/brokers/tenants/{tenantName}:
    get:
      description: List brokers for a given tenant
      operationId: getBrokersForTenantV2
      parameters:
      - description: Name of the tenant
        in: path
        name: tenantName
        required: true
        schema:
          type: string
      - description: ONLINE|OFFLINE
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InstanceInfo'
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: List brokers for a given tenant
      tags:
      - Broker
  /brokers/tables/{tableName}:
    get:
      description: List brokers for a given table
      operationId: getBrokersForTable
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      - description: ONLINE|OFFLINE
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: List brokers for a given table
      tags:
      - Broker
  /v2/brokers/tables/{tableName}:
    get:
      description: List brokers for a given table
      operationId: getBrokersForTableV2
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      - description: ONLINE|OFFLINE
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InstanceInfo'
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: List brokers for a given table
      tags:
      - Broker
  /v2/brokers:
    get:
      description: List tenants and tables to brokers mappings
      operationId: listBrokersMappingV2
      parameters:
      - description: ONLINE|OFFLINE
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  additionalProperties:
                    items:
                      $ref: '#/components/schemas/InstanceInfo'
                    type: array
                  type: object
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: List tenants and tables to brokers mappings
      tags:
      - Broker
  /v2/brokers/tenants:
    get:
      description: List tenants to brokers mappings
      operationId: getTenantsToBrokersMappingV2
      parameters:
      - description: ONLINE|OFFLINE
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    $ref: '#/components/schemas/InstanceInfo'
                  type: array
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: List tenants to brokers mappings
      tags:
      - Broker
  /v2/brokers/tables:
    get:
      description: List tables to brokers mappings
      operationId: getTablesToBrokersMappingV2
      parameters:
      - description: ONLINE|OFFLINE
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    $ref: '#/components/schemas/InstanceInfo'
                  type: array
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: List tables to brokers mappings
      tags:
      - Broker
  /brokers/instances/{instanceName}/qps:
    post:
      description: Enable/disable the query rate limiting for a broker instance
      operationId: toggleQueryRateLimiting
      parameters:
      - description: Broker instance name
        example: Broker_my.broker.com_30000
        in: path
        name: instanceName
        required: true
        schema:
          type: string
      - description: ENABLE|DISABLE
        in: query
        name: state
        required: true
        schema:
          enum:
          - ENABLE
          - DISABLE
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Instance not found
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Enable/disable the query rate limiting for a broker instance
      tags:
      - Broker
  /brokers:
    get:
      description: List tenants and tables to brokers mappings
      operationId: listBrokersMapping
      parameters:
      - description: ONLINE|OFFLINE
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  type: object
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: List tenants and tables to brokers mappings
      tags:
      - Broker
  /cluster/configs:
    get:
      description: List cluster level configurations
      operationId: listClusterConfigs
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: List cluster configurations
      tags:
      - Cluster
    post:
      operationId: updateClusterConfig
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Server error updating configuration
      security:
      - oauth: []
      summary: Update cluster configuration
      tags:
      - Cluster
      x-codegen-request-body-name: body
  /cluster/info:
    get:
      description: Get cluster Info
      operationId: getClusterInfo
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Get cluster Info
      tags:
      - Cluster
  /cluster/configs/{configName}:
    delete:
      operationId: deleteClusterConfig
      parameters:
      - description: Name of the config to delete
        in: path
        name: configName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Server error deleting configuration
      security:
      - oauth: []
      summary: Delete cluster configuration
      tags:
      - Cluster
  /appconfigs:
    get:
      operationId: getAppConfigs
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      tags:
      - AppConfigs
  /auth/info:
    get:
      operationId: info
      responses:
        "200":
          content: {}
          description: Auth workflow info provided
      security:
      - oauth: []
      summary: Retrieve auth workflow info
      tags:
      - Auth
  /auth/verify:
    get:
      operationId: verify
      parameters:
      - description: Table name without type
        in: query
        name: tableName
        schema:
          type: string
      - description: API access type
        in: query
        name: accessType
        schema:
          default: READ
          enum:
          - CREATE
          - READ
          - UPDATE
          - DELETE
          type: string
      - description: Endpoint URL
        in: query
        name: endpointUrl
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Verification result provided
        "500":
          content: {}
          description: Verification error
      security:
      - oauth: []
      summary: Check whether authentication is enabled
      tags:
      - Auth
  /pinot-controller/admin:
    get:
      operationId: checkHealthLegacy
      responses:
        "200":
          content: {}
          description: Good
      security:
      - oauth: []
      summary: Check controller health
      tags:
      - Health
  /health:
    get:
      operationId: checkHealth
      responses:
        "200":
          content: {}
          description: Good
      security:
      - oauth: []
      summary: Check controller health
      tags:
      - Health
  /loggers/{loggerName}:
    get:
      description: Return logger info
      operationId: getLogger
      parameters:
      - description: Logger name
        in: path
        name: loggerName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Get logger configs
      tags:
      - Logger
    put:
      description: Set logger level for a given logger
      operationId: setLoggerLevel
      parameters:
      - description: Logger name
        in: path
        name: loggerName
        required: true
        schema:
          type: string
      - description: Logger level
        in: query
        name: level
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Set logger level
      tags:
      - Logger
  /loggers:
    get:
      description: Return all the logger names
      operationId: getLoggers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: Get all the loggers
      tags:
      - Logger
  /loggers/files:
    get:
      operationId: getLocalLogFiles
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
      security:
      - oauth: []
      summary: Get all local log files
      tags:
      - Logger
  /loggers/download:
    get:
      operationId: downloadLogFile
      parameters:
      - description: Log file path
        in: query
        name: filePath
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Download a log file
      tags:
      - Logger
  /loggers/instances:
    get:
      operationId: getLogFilesFromAllInstances
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    type: string
                  type: array
                  uniqueItems: true
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Collect log files from all the instances
      tags:
      - Logger
  /loggers/instances/{instanceName}:
    get:
      operationId: getLogFilesFromInstance
      parameters:
      - description: Instance Name
        in: path
        name: instanceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
      security:
      - oauth: []
      summary: Collect log files from a given instance
      tags:
      - Logger
  /loggers/instances/{instanceName}/download:
    get:
      operationId: downloadLogFileFromInstance
      parameters:
      - description: Instance Name
        in: path
        name: instanceName
        required: true
        schema:
          type: string
      - description: Log file path
        in: query
        name: filePath
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Download a log file from a given instance
      tags:
      - Logger
  /periodictask/run:
    get:
      operationId: runPeriodicTask
      parameters:
      - description: Periodic task name
        in: query
        name: taskname
        required: true
        schema:
          type: string
      - description: Name of the table
        in: query
        name: tableName
        schema:
          type: string
      - description: OFFLINE | REALTIME
        in: query
        name: type
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: "Run periodic task against table. If table name is missing, task will\
        \ run against all tables."
      tags:
      - PeriodicTask
  /periodictask/names:
    get:
      operationId: getPeriodicTaskNames
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: Get comma-delimited list of all available periodic task names.
      tags:
      - PeriodicTask
  /ingestFromFile:
    post:
      description: "Creates a segment using given file and pushes it to Pinot. \n\
        \ All steps happen on the controller. This API is NOT meant for production\
        \ environments/large input files. \n Example usage (query params need encoding):\n\
        ```\ncurl -X POST -F file=@data.json -H \"Content-Type: multipart/form-data\"\
        \ \"http://localhost:9000/ingestFromFile?tableNameWithType=foo_OFFLINE&\n\
        batchConfigMapStr={\n  \"inputFormat\":\"csv\",\n  \"recordReader.prop.delimiter\"\
        :\"|\"\n}\" \n```"
      operationId: ingestFromFile
      parameters:
      - description: Name of the table to upload the file to
        in: query
        name: tableNameWithType
        required: true
        schema:
          type: string
      - description: "Batch config Map as json string. Must pass inputFormat, and\
          \ optionally record reader properties. e.g. {\"inputFormat\":\"json\"}"
        in: query
        name: batchConfigMapStr
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormDataMultiPart'
        required: false
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Ingest a file
      tags:
      - Table
      x-codegen-request-body-name: body
  /ingestFromURI:
    post:
      description: "Creates a segment using file at the given URI and pushes it to\
        \ Pinot. \n All steps happen on the controller. This API is NOT meant for\
        \ production environments/large input files. \nExample usage (query params\
        \ need encoding):\n```\ncurl -X POST \"http://localhost:9000/ingestFromURI?tableNameWithType=foo_OFFLINE\n\
        &batchConfigMapStr={\n  \"inputFormat\":\"json\",\n  \"input.fs.className\"\
        :\"org.apache.pinot.plugin.filesystem.S3PinotFS\",\n  \"input.fs.prop.region\"\
        :\"us-central\",\n  \"input.fs.prop.accessKey\":\"foo\",\n  \"input.fs.prop.secretKey\"\
        :\"bar\"\n}\n&sourceURIStr=s3://test.bucket/path/to/json/data/data.json\"\n\
        ```"
      operationId: ingestFromURI
      parameters:
      - description: Name of the table to upload the file to
        in: query
        name: tableNameWithType
        required: true
        schema:
          type: string
      - description: "Batch config Map as json string. Must pass inputFormat, and\
          \ optionally input FS properties. e.g. {\"inputFormat\":\"json\"}"
        in: query
        name: batchConfigMapStr
        required: true
        schema:
          type: string
      - description: URI of file to upload
        in: query
        name: sourceURIStr
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Ingest from the given URI
      tags:
      - Table
  /tables/{tableName}/assignInstances:
    post:
      operationId: assignInstances
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|CONSUMING|COMPLETED|tier name
        in: query
        name: type
        schema:
          type: string
      - description: Whether to do dry-run
        in: query
        name: dryRun
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/InstancePartitions'
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Assign server instances to a table
      tags:
      - Table
  /tables/{tableName}/instancePartitions:
    delete:
      operationId: removeInstancePartitions
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|CONSUMING|COMPLETED|tier name
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Remove the instance partitions
      tags:
      - Table
    get:
      operationId: getInstancePartitions
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|CONSUMING|COMPLETED|tier name
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/InstancePartitions'
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Get the instance partitions
      tags:
      - Table
    put:
      operationId: setInstancePartitions
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/InstancePartitions'
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Create/update the instance partitions
      tags:
      - Table
      x-codegen-request-body-name: body
  /tables/{tableName}/replaceInstance:
    post:
      operationId: replaceInstance
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|CONSUMING|COMPLETED|tier name
        in: query
        name: type
        schema:
          type: string
      - description: Old instance to be replaced
        in: query
        name: oldInstanceId
        required: true
        schema:
          type: string
      - description: New instance to replace with
        in: query
        name: newInstanceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/InstancePartitions'
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Replace an instance in the instance partitions
      tags:
      - Table
  /instances/{instanceName}:
    delete:
      description: Drop an instance
      operationId: dropInstance
      parameters:
      - description: Instance name
        example: Server_a.b.com_20000 | Broker_my.broker.com_30000
        in: path
        name: instanceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Instance not found
        "409":
          content: {}
          description: Instance cannot be dropped
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Drop an instance
      tags:
      - Instance
    get:
      operationId: getInstance
      parameters:
      - description: Instance name
        example: Server_a.b.com_20000 | Broker_my.broker.com_30000
        in: path
        name: instanceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Instance not found
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Get instance information
      tags:
      - Instance
    put:
      description: Update specified instance with given instance config
      operationId: updateInstance
      parameters:
      - description: Instance name
        example: Server_a.b.com_20000 | Broker_my.broker.com_30000
        in: path
        name: instanceName
        required: true
        schema:
          type: string
      - description: Whether to update broker resource for broker instance
        in: query
        name: updateBrokerResource
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instance'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Update the specified instance
      tags:
      - Instance
      x-codegen-request-body-name: body
  /instances:
    get:
      operationId: getAllInstances
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: List all instances
      tags:
      - Instance
    post:
      description: Creates a new instance with given instance config
      operationId: addInstance
      parameters:
      - description: Whether to update broker resource for broker instance
        in: query
        name: updateBrokerResource
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instance'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "409":
          content: {}
          description: Instance already exists
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Create a new instance
      tags:
      - Instance
      x-codegen-request-body-name: body
  /instances/{instanceName}/updateBrokerResource:
    post:
      description: "Broker resource should be updated when a new broker instance is\
        \ added, or the tags for an existing broker are changed. Updating broker resource\
        \ requires reading all the table configs, which can be costly for large cluster.\
        \ Consider updating broker resource for each table individually."
      operationId: updateBrokerResource
      parameters:
      - description: Instance name
        example: Broker_my.broker.com_30000
        in: path
        name: instanceName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Instance not found
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Update the tables served by the specified broker instance in the broker
        resource
      tags:
      - Instance
  /instances/{instanceName}/updateTags:
    put:
      description: Update the tags of the specified instance
      operationId: updateInstanceTags
      parameters:
      - description: Instance name
        example: Server_a.b.com_20000 | Broker_my.broker.com_30000
        in: path
        name: instanceName
        required: true
        schema:
          type: string
      - description: Comma separated tags list
        in: query
        name: tags
        required: true
        schema:
          type: string
      - description: Whether to update broker resource for broker instance
        in: query
        name: updateBrokerResource
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: Success
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Instance not found
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Update the tags of the specified instance
      tags:
      - Instance
  /instances/{instanceName}/state:
    post:
      description: Enable/disable/drop an instance
      operationId: toggleInstanceState
      parameters:
      - description: Instance name
        example: Server_a.b.com_20000 | Broker_my.broker.com_30000
        in: path
        name: instanceName
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Instance not found
        "409":
          content: {}
          description: Instance cannot be dropped
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Enable/disable/drop an instance
      tags:
      - Instance
      x-codegen-request-body-name: body
  /leader/tables:
    get:
      description: Gets leaders for all tables
      operationId: getLeadersForAllTables
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadControllerResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Gets leaders for all tables
      tags:
      - Leader
  /leader/tables/{tableName}:
    get:
      description: Gets leader for a given table
      operationId: getLeaderForTable
      parameters:
      - description: Table name
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadControllerResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Gets leader for a given table
      tags:
      - Leader
  /tables/{tableName}/consumingSegmentsInfo:
    get:
      description: Gets the status of consumers from all servers.Note that the partitionToOffsetMap
        has been deprecated and will be removed in the next release. The info is now
        embedded within each partition's state as currentOffsetsMap.
      operationId: getConsumingSegmentsInfo
      parameters:
      - description: Realtime table name with or without type
        example: myTable | myTable_REALTIME
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Table not found
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Returns state of consuming segments
      tags:
      - Table
  /tables/forceCommitStatus/{jobId}:
    get:
      description: Get status for a submitted force commit operation
      operationId: getForceCommitJobStatus
      parameters:
      - description: Force commit job id
        in: path
        name: jobId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
          description: successful operation
      security:
      - oauth: []
      summary: Get status for a submitted force commit operation
      tags:
      - Table
  /tables/{tableName}/forceCommit:
    post:
      description: "Force commit the current segments in consuming state and restart\
        \ consumption. This should be used after schema/table config changes. Please\
        \ note that this is an asynchronous operation, and 200 response does not mean\
        \ it has actually been done already"
      operationId: forceCommit
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Force commit the current consuming segments
      tags:
      - Table
  /tables/{tableName}/pauseConsumption:
    post:
      description: Pause the consumption of a realtime table
      operationId: pauseConsumption
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Pause consumption of a realtime table
      tags:
      - Table
  /tables/{tableName}/resumeConsumption:
    post:
      description: "Resume the consumption for a realtime table. ConsumeFrom parameter\
        \ indicates from which offsets consumption should resume. If consumeFrom parameter\
        \ is not provided, consumption continues based on the offsets in segment ZK\
        \ metadata, and in case the offsets are already gone, the first available\
        \ offsets are picked to minimize the data loss."
      operationId: resumeConsumption
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: smallest | largest
        in: query
        name: consumeFrom
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Resume consumption of a realtime table
      tags:
      - Table
  /tables/{tableName}/pauseStatus:
    get:
      description: Return pause status of a realtime table along with list of consuming
        segments.
      operationId: getPauseStatus
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Return pause status of a realtime table
      tags:
      - Table
  /query/{brokerId}/{queryId}:
    delete:
      description: No effect if no query exists for the given queryId on the requested
        broker. Query may continue to run for a short while after calling cancel as
        it's done in a non-blocking manner. The cancel method can be called multiple
        times.
      operationId: cancelQuery
      parameters:
      - description: Broker that's running the query
        in: path
        name: brokerId
        required: true
        schema:
          type: string
      - description: QueryId as assigned by the broker
        in: path
        name: queryId
        required: true
        schema:
          format: int64
          type: integer
      - description: Timeout for servers to respond the cancel request
        in: query
        name: timeoutMs
        schema:
          default: 3000
          format: int32
          type: integer
      - description: Return verbose responses for troubleshooting
        in: query
        name: verbose
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Internal server error
        "404":
          content: {}
          description: Query not found on the requested broker
      security:
      - oauth: []
      summary: Cancel a query as identified by the queryId
      tags:
      - Query
  /queries:
    get:
      description: The queries are returned with brokers running them
      operationId: getRunningQueries
      parameters:
      - description: Timeout for brokers to return running queries
        in: query
        name: timeoutMs
        schema:
          default: 3000
          format: int32
          type: integer
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Get running queries from all brokers
      tags:
      - Query
  /schemas/{schemaName}:
    delete:
      description: Deletes a schema by name
      operationId: deleteSchema
      parameters:
      - description: Schema name
        in: path
        name: schemaName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successfully deleted schema
        "404":
          content: {}
          description: Schema not found
        "409":
          content: {}
          description: Schema is in use
        "500":
          content: {}
          description: Error deleting schema
      security:
      - oauth: []
      summary: Delete a schema
      tags:
      - Schema
    get:
      description: Gets a schema by name
      operationId: getSchema
      parameters:
      - description: Schema name
        in: path
        name: schemaName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Schema not found
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Get a schema
      tags:
      - Schema
    put:
      description: Updates a schema
      operationId: updateSchema_1
      parameters:
      - description: Name of the schema
        in: path
        name: schemaName
        required: true
        schema:
          type: string
      - description: Whether to reload the table if the new schema is backward compatible
        in: query
        name: reload
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FormDataMultiPart'
        required: false
      responses:
        "200":
          content: {}
          description: Successfully updated schema
        "404":
          content: {}
          description: Schema not found
        "400":
          content: {}
          description: Missing or invalid request body
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Update a schema
      tags:
      - Schema
      x-codegen-request-body-name: body
  /schemas:
    get:
      description: Lists all schema names
      operationId: listSchemaNames
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: List all schema names
      tags:
      - Schema
    post:
      description: Adds a new schema
      operationId: addSchema_1
      parameters:
      - description: Whether to override the schema if the schema exists
        in: query
        name: override
        schema:
          default: true
          type: boolean
      - description: Whether to force overriding the schema if the schema exists
        in: query
        name: force
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        "200":
          content: {}
          description: Successfully created schema
        "409":
          content: {}
          description: Schema already exists
        "400":
          content: {}
          description: Missing or invalid request body
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Add a new schema
      tags:
      - Schema
      x-codegen-request-body-name: body
  /schemas/validate:
    post:
      description: "This API returns the schema that matches the one you get from\
        \ 'GET /schema/{schemaName}'. This allows us to validate schema before apply."
      operationId: validateSchema_1
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        "200":
          content: {}
          description: Successfully validated schema
        "400":
          content: {}
          description: Missing or invalid request body
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Validate schema
      tags:
      - Schema
      x-codegen-request-body-name: body
  /segments/{tableName}:
    delete:
      description: Delete all segments
      operationId: deleteAllSegments
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        required: true
        schema:
          type: string
      - description: "Retention period for the table segments (e.g. 12h, 3d); If not\
          \ set, the retention period will default to the first config that's not\
          \ null: the table config, then to cluster setting, then '7d'. Using 0d or\
          \ -1d will instantly delete segments without retention"
        in: query
        name: retention
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Delete all segments
      tags:
      - Segment
    get:
      description: List all segments
      operationId: getSegments
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      - description: "Whether to exclude replaced segments in the response, which\
          \ have been replaced specified in the segment lineage entries and cannot\
          \ be queried from the table"
        in: query
        name: excludeReplacedSegments
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  type: object
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: List all segments. An optional 'excludeReplacedSegments' parameter
        is used to get the list of segments which has not yet been replaced (determined
        by segment lineage entries) and can be queried from the table. The value is
        false by default.
      tags:
      - Segment
  /segments/{tableName}/delete:
    post:
      description: Delete the segments in the JSON array payload
      operationId: deleteSegments
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: "Retention period for the table segments (e.g. 12h, 3d); If not\
          \ set, the retention period will default to the first config that's not\
          \ null: the table config, then to cluster setting, then '7d'. Using 0d or\
          \ -1d will instantly delete segments without retention"
        in: query
        name: retention
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Delete the segments in the JSON array payload
      tags:
      - Segment
      x-codegen-request-body-name: body
  /segments/{tableName}/{segmentName}:
    delete:
      description: Delete a segment
      operationId: deleteSegment
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Name of the segment
        in: path
        name: segmentName
        required: true
        schema:
          type: string
      - description: "Retention period for the table segments (e.g. 12h, 3d); If not\
          \ set, the retention period will default to the first config that's not\
          \ null: the table config, then to cluster setting, then '7d'. Using 0d or\
          \ -1d will instantly delete segments without retention"
        in: query
        name: retention
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Delete a segment
      tags:
      - Segment
    get:
      description: Download a segment
      operationId: downloadSegment
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Name of the segment
        in: path
        name: segmentName
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Download a segment
      tags:
      - Segment
  /segments/{tableName}/reload:
    post:
      description: Reload all segments
      operationId: reloadAllSegments
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      - description: Whether to force server to download segment
        in: query
        name: forceDownload
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Reload all segments
      tags:
      - Segment
  /segments/{tableName}/{segmentName}/reload:
    post:
      description: Reload a segment
      operationId: reloadSegment
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Name of the segment
        in: path
        name: segmentName
        required: true
        schema:
          type: string
      - description: Whether to force server to download segment
        in: query
        name: forceDownload
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Reload a segment
      tags:
      - Segment
  /segments/{tableNameWithType}/{segmentName}/reset:
    post:
      description: Resets a segment by disabling and then enabling it
      operationId: resetSegment
      parameters:
      - description: Name of the table with type
        in: path
        name: tableNameWithType
        required: true
        schema:
          type: string
      - description: Name of the segment
        in: path
        name: segmentName
        required: true
        schema:
          type: string
      - description: Name of the target instance to reset
        in: query
        name: targetInstance
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: "Resets a segment by first disabling it, waiting for external view\
        \ to stabilize, and finally enabling it again"
      tags:
      - Segment
  /segments/{tableNameWithType}/reset:
    post:
      description: Resets segments by disabling and then enabling them
      operationId: resetSegments
      parameters:
      - description: Name of the table with type
        in: path
        name: tableNameWithType
        required: true
        schema:
          type: string
      - description: Name of the target instance to reset
        in: query
        name: targetInstance
        schema:
          type: string
      - description: Whether to reset only segments with error state
        in: query
        name: errorSegmentsOnly
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: "Resets all segments (when errorSegmentsOnly = false) or segments with\
        \ Error state (when errorSegmentsOnly = true) of the table, by first disabling\
        \ them, waiting for external view to stabilize, and finally enabling them"
      tags:
      - Segment
  /segments/{tableName}/servers:
    get:
      description: Get a map from server to segments hosted by the server
      operationId: getServerToSegmentsMap
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    properties: {}
                    type: object
                  type: object
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: Get a map from server to segments hosted by the server
      tags:
      - Segment
  /segments/{tableName}/lineage:
    get:
      description: List segment lineage in chronologically sorted order
      operationId: listSegmentLineage
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: List segment lineage
      tags:
      - Segment
  /tables/{tableName}/segments:
    get:
      deprecated: true
      description: "Get a map from server to segments hosted by the server (deprecated,\
        \ use 'GET /segments/{tableName}/servers' instead)"
      operationId: getServerToSegmentsMapDeprecated1
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: MUST be null
        in: query
        name: state
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    type: string
                  type: object
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: "Get a map from server to segments hosted by the server (deprecated,\
        \ use 'GET /segments/{tableName}/servers' instead)"
      tags:
      - Segment
  /tables/{tableName}/segments/metadata:
    get:
      deprecated: true
      description: "Get a map from server to segments hosted by the server (deprecated,\
        \ use 'GET /segments/{tableName}/servers' instead)"
      operationId: getServerToSegmentsMapDeprecated2
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: MUST be null
        in: query
        name: state
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    type: string
                  type: object
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: "Get a map from server to segments hosted by the server (deprecated,\
        \ use 'GET /segments/{tableName}/servers' instead)"
      tags:
      - Segment
  /segments/{tableName}/crc:
    get:
      description: Get a map from segment to CRC of the segment (only apply to OFFLINE
        table)
      operationId: getSegmentToCrcMap
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Get a map from segment to CRC of the segment (only apply to OFFLINE
        table)
      tags:
      - Segment
  /tables/{tableName}/segments/crc:
    get:
      deprecated: true
      description: "Get a map from segment to CRC of the segment (deprecated, use\
        \ 'GET /segments/{tableName}/crc' instead)"
      operationId: getSegmentToCrcMapDeprecated
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: "Get a map from segment to CRC of the segment (deprecated, use 'GET\
        \ /segments/{tableName}/crc' instead)"
      tags:
      - Segment
  /tables/{tableName}/segments/{segmentName}/metadata:
    get:
      deprecated: true
      description: "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata'\
        \ instead)"
      operationId: getSegmentMetadataDeprecated1
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Name of the segment
        in: path
        name: segmentName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    additionalProperties:
                      properties: {}
                      type: object
                    type: object
                  type: array
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata'\
        \ instead)"
      tags:
      - Segment
  /tables/{tableName}/segments/{segmentName}:
    get:
      deprecated: true
      description: "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata'\
        \ instead)"
      operationId: getSegmentMetadataDeprecated2
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Name of the segment
        in: path
        name: segmentName
        required: true
        schema:
          type: string
      - description: MUST be null
        in: query
        name: state
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    additionalProperties:
                      properties: {}
                      type: object
                    type: object
                  type: array
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata'\
        \ instead)"
      tags:
      - Segment
  /tables/{tableName}/segments/{segmentName}/reload:
    get:
      deprecated: true
      description: "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload'\
        \ instead)"
      operationId: reloadSegmentDeprecated2
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Name of the segment
        in: path
        name: segmentName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload'\
        \ instead)"
      tags:
      - Segment
    post:
      deprecated: true
      description: "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload'\
        \ instead)"
      operationId: reloadSegmentDeprecated1
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Name of the segment
        in: path
        name: segmentName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload'\
        \ instead)"
      tags:
      - Segment
  /segments/segmentReloadStatus/{jobId}:
    get:
      description: Get status for a submitted reload operation
      operationId: getReloadJobStatus
      parameters:
      - description: Reload job id
        in: path
        name: jobId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerReloadControllerJobStatusResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Get status for a submitted reload operation
      tags:
      - Segment
  /tables/{tableName}/segments/reload:
    get:
      deprecated: true
      description: "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload'\
        \ instead)"
      operationId: reloadAllSegmentsDeprecated2
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload'\
        \ instead)"
      tags:
      - Segment
    post:
      deprecated: true
      description: "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload'\
        \ instead)"
      operationId: reloadAllSegmentsDeprecated1
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload'\
        \ instead)"
      tags:
      - Segment
  /segments/{tableName}/metadata:
    get:
      description: Get the server metadata for all table segments
      operationId: getServerMetadata
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      - description: Columns name
        explode: true
        in: query
        name: columns
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Get the server metadata for all table segments
      tags:
      - Segment
  /segments/{tableName}/zkmetadata:
    get:
      description: Get the zookeeper metadata for all table segments
      operationId: getZookeeperMetadata
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  additionalProperties:
                    type: string
                  type: object
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Get the zookeeper metadata for all table segments
      tags:
      - Segment
  /segments/{tableName}/tiers:
    get:
      description: Get storage tier for all segments in the given table
      operationId: getTableTiers
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Internal server error
        "404":
          content: {}
          description: Table not found
      security:
      - oauth: []
      summary: Get storage tier for all segments in the given table
      tags:
      - Segment
  /segments/{tableName}/{segmentName}/tiers:
    get:
      description: Get storage tiers for the given segment
      operationId: getSegmentTiers
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Name of the segment
        in: path
        name: segmentName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Internal server error
        "404":
          content: {}
          description: Table or segment not found
      security:
      - oauth: []
      summary: Get storage tiers for the given segment
      tags:
      - Segment
  /segments/{tableName}/select:
    get:
      description: Get the selected segments given the start and end timestamps in
        milliseconds
      operationId: getSelectedSegments
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      - description: Start timestamp (inclusive)
        in: query
        name: startTimestamp
        schema:
          type: string
      - description: End timestamp (exclusive)
        in: query
        name: endTimestamp
        schema:
          type: string
      - description: "Whether to exclude the segments overlapping with the timestamps,\
          \ false by default"
        in: query
        name: excludeOverlapping
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  type: object
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: "Get the selected segments given the (inclusive) start and (exclusive)\
        \ end timestamps in milliseconds. These timestamps will be compared against\
        \ the minmax values of the time column in each segment. If the table is a\
        \ refresh use case, the value of start and end timestamp is voided, since\
        \ there is no time column for refresh use case; instead, the whole qualified\
        \ segments will be returned. If no timestamps are provided, all the qualified\
        \ segments will be returned. For the segments that partially belong to the\
        \ time range, the boolean flag 'excludeOverlapping' is introduced in order\
        \ for user to determine whether to exclude this kind of segments in the response."
      tags:
      - Segment
  /segments/{tableNameWithType}/updateZKTimeInterval:
    post:
      description: Update the start and end time of the segments based on latest schema
      operationId: updateTimeIntervalZK
      parameters:
      - description: Table name with type
        example: myTable_REALTIME
        in: path
        name: tableNameWithType
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Table not found
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Update the start and end time of the segments based on latest schema
      tags:
      - Segment
  /segments/{tableName}/{segmentName}/metadata:
    get:
      description: Get the metadata for a segment
      operationId: getSegmentMetadata
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Name of the segment
        in: path
        name: segmentName
        required: true
        schema:
          type: string
      - description: Columns name
        explode: true
        in: query
        name: columns
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Get the metadata for a segment
      tags:
      - Segment
  /segments/{tableName}/startReplaceSegments:
    post:
      description: Start to replace segments
      operationId: startReplaceSegments
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        required: true
        schema:
          type: string
      - description: Force cleanup
        in: query
        name: forceCleanup
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StartReplaceSegmentsRequest'
        description: Fields belonging to start replace segment request
        required: true
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Start to replace segments
      tags:
      - Segment
      x-codegen-request-body-name: body
  /segments/{tableName}/endReplaceSegments:
    post:
      description: End to replace segments
      operationId: endReplaceSegments
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        required: true
        schema:
          type: string
      - description: Segment lineage entry id returned by startReplaceSegments API
        in: query
        name: segmentLineageEntryId
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: End to replace segments
      tags:
      - Segment
  /segments/{tableName}/revertReplaceSegments:
    post:
      description: Revert segments replacement
      operationId: revertReplaceSegments
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        required: true
        schema:
          type: string
      - description: Segment lineage entry id to revert
        in: query
        name: segmentLineageEntryId
        required: true
        schema:
          type: string
      - description: Force revert in case the user knows that the lineage entry is
          interrupted
        in: query
        name: forceRevert
        schema:
          default: false
          type: boolean
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Revert segments replacement
      tags:
      - Segment
  /segments:
    post:
      description: Upload a segment as binary
      operationId: uploadSegmentAsMultiPart
      parameters:
      - description: Name of the table
        in: query
        name: tableName
        schema:
          type: string
      - description: Type of the table
        in: query
        name: tableType
        schema:
          default: OFFLINE
          type: string
      - description: Whether to enable parallel push protection
        in: query
        name: enableParallelPushProtection
        schema:
          default: false
          type: boolean
      - description: Whether to refresh if the segment already exists
        in: query
        name: allowRefresh
        schema:
          default: true
          type: boolean
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormDataMultiPart'
        required: false
      responses:
        "200":
          content: {}
          description: Successfully uploaded segment
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Segment validation fails
        "409":
          content: {}
          description: Segment already exists or another parallel push in progress
        "410":
          content: {}
          description: Segment to refresh does not exist
        "412":
          content: {}
          description: CRC check fails
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Upload a segment
      tags:
      - Segment
      x-codegen-request-body-name: body
  /v2/segments:
    post:
      description: Upload a segment as binary
      operationId: uploadSegmentAsMultiPartV2
      parameters:
      - description: Name of the table
        in: query
        name: tableName
        schema:
          type: string
      - description: Type of the table
        in: query
        name: tableType
        schema:
          default: OFFLINE
          type: string
      - description: Whether to enable parallel push protection
        in: query
        name: enableParallelPushProtection
        schema:
          default: false
          type: boolean
      - description: Whether to refresh if the segment already exists
        in: query
        name: allowRefresh
        schema:
          default: true
          type: boolean
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormDataMultiPart'
        required: false
      responses:
        "200":
          content: {}
          description: Successfully uploaded segment
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Segment validation fails
        "409":
          content: {}
          description: Segment already exists or another parallel push in progress
        "410":
          content: {}
          description: Segment to refresh does not exist
        "412":
          content: {}
          description: CRC check fails
        "500":
          content: {}
          description: Internal error
      security:
      - oauth: []
      summary: Upload a segment
      tags:
      - Segment
      x-codegen-request-body-name: body
  /tables/{tableName}/indexingConfigs:
    put:
      deprecated: true
      operationId: updateIndexingConfig
      parameters:
      - description: Table name (without type)
        in: path
        name: tableName
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Table not found
        "500":
          content: {}
          description: Server error updating configuration
      security:
      - oauth: []
      summary: Update table indexing configuration
      tags:
      - Table
      x-codegen-request-body-name: body
  /tables/{tableName}/livebrokers:
    get:
      description: List live brokers of the given table based on EV
      operationId: getLiveBrokersForTable
      parameters:
      - description: Table name (with or without type)
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Table not found
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: List the brokers serving a table
      tags:
      - Table
  /tables/{tableName}/instances:
    get:
      description: List instances of the given table
      operationId: getTableInstances
      parameters:
      - description: Table name without type
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Instance type
        example: broker
        in: query
        name: type
        schema:
          enum:
          - BROKER
          - SERVER
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Table not found
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: List table instances
      tags:
      - Table
  /tables/livebrokers:
    get:
      description: List tables to live brokers mappings based on EV
      operationId: getLiveBrokers
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: List tables to live brokers mappings
      tags:
      - Table
  /tables/{tableName}/metadataConfigs:
    put:
      deprecated: true
      description: Updates table configuration
      operationId: updateTableMetadata
      parameters:
      - in: path
        name: tableName
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Internal server error
        "404":
          content: {}
          description: Table not found
      security:
      - oauth: []
      summary: Update table metadata
      tags:
      - Table
      x-codegen-request-body-name: body
  /tables/{tableName}/rebalance:
    post:
      description: Rebalances a table (reassign instances and segments for a table)
      operationId: rebalance
      parameters:
      - description: Name of the table to rebalance
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        required: true
        schema:
          type: string
      - description: Whether to rebalance table in dry-run mode
        in: query
        name: dryRun
        schema:
          default: false
          type: boolean
      - description: Whether to reassign instances before reassigning segments
        in: query
        name: reassignInstances
        schema:
          default: false
          type: boolean
      - description: Whether to reassign CONSUMING segments for real-time table
        in: query
        name: includeConsuming
        schema:
          default: false
          type: boolean
      - description: "Whether to rebalance table in bootstrap mode (regardless of\
          \ minimum segment movement, reassign all segments in a round-robin fashion\
          \ as if adding new segments to an empty table)"
        in: query
        name: bootstrap
        schema:
          default: false
          type: boolean
      - description: Whether to allow downtime for the rebalance
        in: query
        name: downtime
        schema:
          default: false
          type: boolean
      - description: "For no-downtime rebalance, minimum number of replicas to keep\
          \ alive during rebalance, or maximum number of replicas allowed to be unavailable\
          \ if value is negative"
        in: query
        name: minAvailableReplicas
        schema:
          default: 1
          format: int32
          type: integer
      - description: Whether to use best-efforts to rebalance (not fail the rebalance
          when the no-downtime contract cannot be achieved)
        in: query
        name: bestEfforts
        schema:
          default: false
          type: boolean
      - description: How often to check if external view converges with ideal states
        in: query
        name: externalViewCheckIntervalInMs
        schema:
          default: 1000
          format: int64
          type: integer
      - description: How long to wait till external view converges with ideal states
        in: query
        name: externalViewStabilizationTimeoutInMs
        schema:
          default: 3600000
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebalanceResult'
          description: successful operation
      security:
      - oauth: []
      summary: Rebalances a table (reassign instances and segments for a table)
      tags:
      - Table
  /tables/{tableName}:
    delete:
      description: Deletes a table
      operationId: deleteTable
      parameters:
      - description: Name of the table to delete
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: realtime|offline
        in: query
        name: type
        schema:
          type: string
      - description: "Retention period for the table segments (e.g. 12h, 3d); If not\
          \ set, the retention period will default to the first config that's not\
          \ null: the cluster setting, then '7d'. Using 0d or -1d will instantly delete\
          \ segments without retention"
        in: query
        name: retention
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Deletes a table
      tags:
      - Table
    get:
      description: "Get/Enable/Disable/Drop a table. If table name is the only parameter\
        \ specified , the tableconfig will be printed"
      operationId: alterTableStateOrListTableConfig
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: enable|disable|drop
        in: query
        name: state
        schema:
          type: string
      - description: realtime|offline
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Get/Enable/Disable/Drop a table
      tags:
      - Table
    put:
      description: Updates table config for a table
      operationId: updateTableConfig
      parameters:
      - description: Name of the table to update
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: "comma separated list of validation type(s) to skip. supported\
          \ types: (ALL|TASK|UPSERT)"
        in: query
        name: validationTypesToSkip
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigSuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Updates table config for a table
      tags:
      - Table
      x-codegen-request-body-name: body
  /tables/{tableName}/stats:
    get:
      description: Provides metadata info/stats about the table.
      operationId: getTableStats
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: realtime|offline
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: table stats
      tags:
      - Table
  /tables/{tableName}/state:
    get:
      description: Get current table state
      operationId: getTableState
      parameters:
      - description: Name of the table to get its state
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: realtime|offline
        in: query
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Get current table state
      tags:
      - Table
  /tables/validate:
    post:
      description: "This API returns the table config that matches the one you get\
        \ from 'GET /tables/{tableName}'. This allows us to validate table config\
        \ before apply."
      operationId: checkTableConfig
      parameters:
      - description: "comma separated list of validation type(s) to skip. supported\
          \ types: (ALL|TASK|UPSERT)"
        in: query
        name: validationTypesToSkip
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNode'
          description: successful operation
      security:
      - oauth: []
      summary: Validate table config for a table
      tags:
      - Table
      x-codegen-request-body-name: body
  /tables/validateTableAndSchema:
    post:
      deprecated: true
      description: "Deprecated. Use /tableConfigs/validate instead.Validate given\
        \ table config and schema. If specified schema is null, attempt to retrieve\
        \ schema using the table name. This API returns the table config that matches\
        \ the one you get from 'GET /tables/{tableName}'. This allows us to validate\
        \ table config before apply."
      operationId: validateTableAndSchema
      parameters:
      - description: "comma separated list of validation type(s) to skip. supported\
          \ types: (ALL|TASK|UPSERT)"
        in: query
        name: validationTypesToSkip
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableAndSchemaConfig'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Validate table config for a table along with specified schema
      tags:
      - Table
      x-codegen-request-body-name: body
  /rebalanceStatus/{jobId}:
    get:
      description: Gets detailed stats of a rebalance operation
      operationId: rebalanceStatus
      parameters:
      - description: Rebalance Job Id
        in: path
        name: jobId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerRebalanceJobStatusResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Gets detailed stats of a rebalance operation
      tags:
      - Table
  /tables/{tableName}/status:
    get:
      description: Provides status of the table including ingestion status
      operationId: getTableStatus
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: realtime|offline
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: table status
      tags:
      - Table
  /tables/{tableName}/metadata:
    get:
      description: Get the aggregate metadata of all segments for a table
      operationId: getTableAggregateMetadata
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      - description: Columns name
        explode: true
        in: query
        name: columns
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Get the aggregate metadata of all segments for a table
      tags:
      - Table
  /tables/recommender:
    put:
      description: Recommend a config with input json
      operationId: recommendConfig
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Recommend config
      tags:
      - Table
      x-codegen-request-body-name: body
  /tables:
    get:
      description: Lists all tables in cluster
      operationId: listTables
      parameters:
      - description: realtime|offline
        in: query
        name: type
        schema:
          type: string
      - description: Task type
        in: query
        name: taskType
        schema:
          type: string
      - description: name|creationTime|lastModifiedTime
        in: query
        name: sortType
        schema:
          type: string
      - description: true|false
        in: query
        name: sortAsc
        schema:
          default: true
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Lists all tables in cluster
      tags:
      - Table
    post:
      description: Adds a table
      operationId: addTable
      parameters:
      - description: "comma separated list of validation type(s) to skip. supported\
          \ types: (ALL|TASK|UPSERT)"
        in: query
        name: validationTypesToSkip
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigSuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Adds a table
      tags:
      - Table
      x-codegen-request-body-name: body
  /table/{tableName}/jobs:
    get:
      description: Get list of controller jobs for this table
      operationId: getControllerJobs
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: OFFLINE|REALTIME
        in: query
        name: type
        schema:
          type: string
      - description: Comma separated list of job types
        in: query
        name: jobTypes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  additionalProperties:
                    type: string
                  type: object
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Get list of controller jobs for this table
      tags:
      - Table
  /tables/{tableName}/timeBoundary:
    delete:
      description: Delete hybrid table query time boundary
      operationId: deleteTimeBoundary
      parameters:
      - description: Name of the hybrid table (without type suffix)
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Delete hybrid table query time boundary
      tags:
      - Table
    post:
      description: Set hybrid table query time boundary based on offline segments'
        metadata
      operationId: setTimeBoundary
      parameters:
      - description: Name of the hybrid table (without type suffix)
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Set hybrid table query time boundary based on offline segments' metadata
      tags:
      - Table
  /tables/{tableName}/schema:
    get:
      description: Read table schema
      operationId: getTableSchema
      parameters:
      - description: Table name (without type)
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Table not found
      security:
      - oauth: []
      summary: Get table schema
      tags:
      - Schema
  /tables/{tableName}/segmentConfigs:
    put:
      deprecated: true
      description: Updates segmentsConfig section (validation and retention) of a
        table
      operationId: put
      parameters:
      - description: Table name
        in: path
        name: tableName
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Table not found
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Update segments configuration
      tags:
      - Table
      x-codegen-request-body-name: body
  /tables/{tableName}/rebuildBrokerResourceFromHelixTags:
    post:
      description: when new brokers are added
      operationId: rebuildBrokerResource
      parameters:
      - description: Table name (with type)
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "400":
          content: {}
          description: "Bad request: table name has to be with table type"
        "500":
          content: {}
          description: Internal error rebuilding broker resource or serializing response
      security:
      - oauth: []
      summary: Rebuild broker resource for table
      tags:
      - Table
      - Tenant
  /tasks/task/{taskName}/runtime/config:
    get:
      operationId: getTaskConfig
      parameters:
      - description: Task name
        in: path
        name: taskName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Get the task runtime config for the given task
      tags:
      - Task
  /tasks/tasktypes:
    get:
      operationId: listTaskTypes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
      security:
      - oauth: []
      summary: List all task types
      tags:
      - Task
  /tasks/taskqueuestate/{taskType}:
    get:
      deprecated: true
      operationId: getTaskQueueStateDeprecated
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringResultResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Get the state (task queue state) for the given task type (deprecated)
      tags:
      - Task
  /tasks/generator/{tableNameWithType}/{taskType}/debug:
    get:
      operationId: getTaskGenerationDebugInto
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      - description: Table name with type
        in: path
        name: tableNameWithType
        required: true
        schema:
          type: string
      - description: Whether to only lookup local cache for logs
        in: query
        name: localOnly
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Fetch task generation information for the recent runs of the given
        task for the given table
      tags:
      - Task
  /tasks/tasks/{taskType}:
    get:
      deprecated: true
      operationId: getTasksDeprecated
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
      security:
      - oauth: []
      summary: List all tasks for the given task type (deprecated)
      tags:
      - Task
  /tasks/taskstates/{taskType}:
    get:
      deprecated: true
      operationId: getTaskStatesDeprecated
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  enum:
                  - NOT_STARTED
                  - IN_PROGRESS
                  - STOPPED
                  - STOPPING
                  - FAILED
                  - COMPLETED
                  - ABORTED
                  - TIMED_OUT
                  - TIMING_OUT
                  - FAILING
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Get a map from task to task state for the given task type (deprecated)
      tags:
      - Task
  /tasks/taskstate/{taskName}:
    get:
      deprecated: true
      operationId: getTaskStateDeprecated
      parameters:
      - description: Task name
        in: path
        name: taskName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringResultResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Get the task state for the given task (deprecated)
      tags:
      - Task
  /tasks/taskconfig/{taskName}:
    get:
      deprecated: true
      operationId: getTaskConfigsDeprecated
      parameters:
      - description: Task name
        in: path
        name: taskName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PinotTaskConfig'
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: Get the task config (a list of child task configs) for the given task
        (deprecated)
      tags:
      - Task
  /tasks/scheduler/information:
    get:
      operationId: getCronSchedulerInformation
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Fetch cron scheduler information
      tags:
      - Task
  /tasks/scheduler/jobKeys:
    get:
      operationId: getCronSchedulerJobKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JobKey'
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: Fetch cron scheduler job keys
      tags:
      - Task
  /tasks/scheduler/jobDetails:
    get:
      operationId: getCronSchedulerJobDetails
      parameters:
      - description: Table name (with type suffix)
        in: query
        name: tableName
        schema:
          type: string
      - description: Task type
        in: query
        name: taskType
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Fetch cron scheduler job keys
      tags:
      - Task
  /tasks/execute:
    post:
      operationId: executeAdhocTask
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AdhocTaskConfig'
        required: false
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Execute a task on minion
      tags:
      - Task
      x-codegen-request-body-name: body
  /tasks/scheduletasks:
    put:
      deprecated: true
      operationId: scheduleTasksDeprecated
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Schedule tasks (deprecated)
      tags:
      - Task
  /tasks/{taskType}/cleanup:
    put:
      operationId: cleanUpTasks
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: "Clean up finished tasks (COMPLETED, FAILED) for the given task type"
      tags:
      - Task
  /tasks/cleanuptasks/{taskType}:
    put:
      deprecated: true
      operationId: cleanUpTasksDeprecated
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: "Clean up finished tasks (COMPLETED, FAILED) for the given task type\
        \ (deprecated)"
      tags:
      - Task
  /tasks/{taskType}/stop:
    put:
      operationId: stopTasks
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Stop all running/pending tasks (as well as the task queue) for the
        given task type
      tags:
      - Task
  /tasks/{taskType}/resume:
    put:
      operationId: resumeTasks
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Resume all stopped tasks (as well as the task queue) for the given
        task type
      tags:
      - Task
  /tasks/taskqueue/{taskType}:
    delete:
      deprecated: true
      operationId: deleteTaskQueue
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      - description: "Whether to force delete the task queue (expert only option,\
          \ enable with cautious"
        in: query
        name: forceDelete
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Delete a task queue (deprecated)
      tags:
      - Task
    put:
      deprecated: true
      operationId: toggleTaskQueueState
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      - description: state
        in: query
        name: state
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Stop/resume a task queue (deprecated)
      tags:
      - Task
  /tasks/{taskType}:
    delete:
      operationId: deleteTasks
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      - description: "Whether to force deleting the tasks (expert only option, enable\
          \ with cautious"
        in: query
        name: forceDelete
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Delete all tasks (as well as the task queue) for the given task type
      tags:
      - Task
  /tasks/task/{taskName}/state:
    get:
      operationId: getTaskState
      parameters:
      - description: Task name
        in: path
        name: taskName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                enum:
                - NOT_STARTED
                - IN_PROGRESS
                - STOPPED
                - STOPPING
                - FAILED
                - COMPLETED
                - ABORTED
                - TIMED_OUT
                - TIMING_OUT
                - FAILING
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Get the task state for the given task
      tags:
      - Task
  /tasks/{taskType}/tasks:
    get:
      operationId: getTasks
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
      security:
      - oauth: []
      summary: List all tasks for the given task type
      tags:
      - Task
  /tasks/{taskType}/taskstates:
    get:
      operationId: getTaskStates
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  enum:
                  - NOT_STARTED
                  - IN_PROGRESS
                  - STOPPED
                  - STOPPING
                  - FAILED
                  - COMPLETED
                  - ABORTED
                  - TIMED_OUT
                  - TIMING_OUT
                  - FAILING
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Get a map from task to task state for the given task type
      tags:
      - Task
  /tasks/subtask/{taskName}/state:
    get:
      operationId: getSubtaskStates
      parameters:
      - description: Task name
        in: path
        name: taskName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  enum:
                  - INIT
                  - RUNNING
                  - STOPPED
                  - COMPLETED
                  - TIMED_OUT
                  - TASK_ERROR
                  - TASK_ABORTED
                  - ERROR
                  - DROPPED
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Get the states of all the sub tasks for the given task
      tags:
      - Task
  /tasks/subtask/{taskName}/config:
    get:
      operationId: getSubtaskConfigs
      parameters:
      - description: Task name
        in: path
        name: taskName
        required: true
        schema:
          type: string
      - description: Sub task names separated by comma
        in: query
        name: subtaskNames
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/PinotTaskConfig'
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Get the configs of specified sub tasks for the given task
      tags:
      - Task
  /tasks/subtask/{taskName}/progress:
    get:
      operationId: getSubtaskProgress
      parameters:
      - description: Task name
        in: path
        name: taskName
        required: true
        schema:
          type: string
      - description: Sub task names separated by comma
        in: query
        name: subtaskNames
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Get progress of specified sub tasks for the given task tracked by minion
        worker in memory
      tags:
      - Task
  /tasks/task/{taskName}:
    delete:
      operationId: deleteTask
      parameters:
      - description: Task name
        in: path
        name: taskName
        required: true
        schema:
          type: string
      - description: "Whether to force deleting the task (expert only option, enable\
          \ with cautious"
        in: query
        name: forceDelete
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Delete a single task given its task name
      tags:
      - Task
  /tasks/taskqueues:
    get:
      deprecated: true
      operationId: getTaskQueues
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
      security:
      - oauth: []
      summary: List all task queues (deprecated)
      tags:
      - Task
  /tasks/{taskType}/state:
    get:
      operationId: getTaskQueueState
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                enum:
                - NOT_STARTED
                - IN_PROGRESS
                - STOPPED
                - STOPPING
                - FAILED
                - COMPLETED
                - ABORTED
                - TIMED_OUT
                - TIMING_OUT
                - FAILING
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Get the state (task queue state) for the given task type
      tags:
      - Task
  /tasks/subtask/workers/progress:
    get:
      operationId: getSubtaskOnWorkerProgress
      parameters:
      - description: "Subtask state (UNKNOWN,IN_PROGRESS,SUCCEEDED,CANCELLED,ERROR)"
        in: query
        name: subTaskState
        required: true
        schema:
          type: string
      - description: Minion worker IDs separated by comma
        in: query
        name: minionWorkerIds
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Get progress of all subtasks with specified state tracked by minion
        worker in memory
      tags:
      - Task
  /tasks/{taskType}/{tableNameWithType}/state:
    get:
      operationId: getTaskStatesByTable
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      - description: Table name with type
        in: path
        name: tableNameWithType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  enum:
                  - NOT_STARTED
                  - IN_PROGRESS
                  - STOPPED
                  - STOPPING
                  - FAILED
                  - COMPLETED
                  - ABORTED
                  - TIMED_OUT
                  - TIMING_OUT
                  - FAILING
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: List all tasks for the given task type
      tags:
      - Task
  /tasks/{taskType}/taskcounts:
    get:
      operationId: getTaskCounts
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/TaskCount'
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Fetch count of sub-tasks for each of the tasks for the given task type
      tags:
      - Task
  /tasks/{taskType}/{tableNameWithType}/debug:
    get:
      operationId: getTasksDebugInfo
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      - description: Table name with type
        in: path
        name: tableNameWithType
        required: true
        schema:
          type: string
      - description: "verbosity (Prints information for all the tasks for the given\
          \ task type and table.By default, only prints subtask details for running\
          \ and error tasks. Value of > 0 prints subtask details for all tasks)"
        in: query
        name: verbosity
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/TaskDebugInfo'
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Fetch information for all the tasks for the given task type and table
      tags:
      - Task
  /tasks/{taskType}/debug:
    get:
      operationId: getTasksDebugInfo_1
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      - description: "verbosity (Prints information for all the tasks for the given\
          \ task type.By default, only prints subtask details for running and error\
          \ tasks. Value of > 0 prints subtask details for all tasks)"
        in: query
        name: verbosity
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/TaskDebugInfo'
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Fetch information for all the tasks for the given task type
      tags:
      - Task
  /tasks/task/{taskName}/debug:
    get:
      operationId: getTaskDebugInfo
      parameters:
      - description: Task name
        in: path
        name: taskName
        required: true
        schema:
          type: string
      - description: "verbosity (Prints information for the given task name.By default,\
          \ only prints subtask details for running and error tasks. Value of > 0\
          \ prints subtask details for all tasks)"
        in: query
        name: verbosity
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDebugInfo'
          description: successful operation
      security:
      - oauth: []
      summary: Fetch information for the given task name
      tags:
      - Task
  /tasks/{taskType}/{tableNameWithType}/metadata:
    delete:
      operationId: deleteTaskMetadataByTable
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      - description: Table name with type
        in: path
        name: tableNameWithType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Delete task metadata for the given task type and table
      tags:
      - Task
    get:
      operationId: getTaskMetadataByTable
      parameters:
      - description: Task type
        in: path
        name: taskType
        required: true
        schema:
          type: string
      - description: Table name with type
        in: path
        name: tableNameWithType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Get task metadata for the given task type and table
      tags:
      - Task
  /tasks/task/{taskName}/config:
    get:
      operationId: getTaskConfigs
      parameters:
      - description: Task name
        in: path
        name: taskName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PinotTaskConfig'
                type: array
          description: successful operation
      security:
      - oauth: []
      summary: Get the task config (a list of child task configs) for the given task
      tags:
      - Task
  /tasks/schedule:
    post:
      operationId: scheduleTasks
      parameters:
      - description: Task type
        in: query
        name: taskType
        schema:
          type: string
      - description: Table name (with type suffix)
        in: query
        name: tableName
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: successful operation
      security:
      - oauth: []
      summary: Schedule tasks and return a map from task type to task name scheduled
      tags:
      - Task
  /tenants:
    get:
      operationId: getAllTenants
      parameters:
      - description: Tenant type
        in: query
        name: type
        schema:
          enum:
          - BROKER
          - SERVER
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Error reading tenants list
      security:
      - oauth: []
      summary: List all tenants
      tags:
      - Tenant
    post:
      operationId: createTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Error creating tenant
      security:
      - oauth: []
      summary: ' Create a tenant'
      tags:
      - Tenant
      x-codegen-request-body-name: body
    put:
      operationId: updateTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Failed to update the tenant
      security:
      - oauth: []
      summary: Update a tenant
      tags:
      - Tenant
      x-codegen-request-body-name: body
  /tenants/{tenantName}:
    delete:
      operationId: deleteTenant
      parameters:
      - description: Tenant name
        in: path
        name: tenantName
        required: true
        schema:
          type: string
      - description: Tenant type
        in: query
        name: type
        required: true
        schema:
          enum:
          - SERVER
          - BROKER
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "400":
          content: {}
          description: Tenant can not be deleted
        "404":
          content: {}
          description: Tenant not found
        "500":
          content: {}
          description: Error deleting tenant
      security:
      - oauth: []
      summary: Delete a tenant
      tags:
      - Tenant
    get:
      operationId: listInstanceOrToggleTenantState
      parameters:
      - description: Tenant name
        in: path
        name: tenantName
        required: true
        schema:
          type: string
      - description: Tenant type (server|broker)
        in: query
        name: type
        schema:
          type: string
      - description: Table type (offline|realtime)
        in: query
        name: tableType
        schema:
          type: string
      - description: state
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Error reading tenants list
      security:
      - oauth: []
      summary: "List instance for a tenant, or enable/disable/drop a tenant"
      tags:
      - Tenant
  /tenants/{tenantName}/tables:
    get:
      operationId: getTablesOnTenant
      parameters:
      - description: Tenant name
        in: path
        name: tenantName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "500":
          content: {}
          description: Error reading list
      security:
      - oauth: []
      summary: List tables on a a server tenant
      tags:
      - Tenant
  /tenants/{tenantName}/metadata:
    get:
      operationId: getTenantMetadata
      parameters:
      - description: Tenant name
        in: path
        name: tenantName
        required: true
        schema:
          type: string
      - description: tenant type
        in: query
        name: type
        schema:
          enum:
          - SERVER
          - BROKER
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantMetadata'
          description: Success
        "404":
          content: {}
          description: Tenant not found
        "500":
          content: {}
          description: Server error reading tenant information
      security:
      - oauth: []
      summary: Get tenant information
      tags:
      - Tenant
    post:
      operationId: changeTenantState
      parameters:
      - description: Tenant name
        in: path
        name: tenantName
        required: true
        schema:
          type: string
      - description: tenant type
        in: query
        name: type
        schema:
          enum:
          - SERVER
          - BROKER
          type: string
      - description: state
        in: query
        name: state
        required: true
        schema:
          enum:
          - enable
          - disable
          - drop
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Success
        "404":
          content: {}
          description: Tenant not found
        "500":
          content: {}
          description: Server error reading tenant information
      security:
      - oauth: []
      summary: Change tenant state
      tags:
      - Tenant
  /upsert/estimateHeapUsage:
    post:
      description: This API returns the estimated heap usage based on primary key
        column stats. This allows us to estimate table size before onboarding.
      operationId: estimateHeapUsage
      parameters:
      - description: cardinality
        in: query
        name: cardinality
        required: true
        schema:
          format: int64
          type: integer
      - description: primaryKeySize
        in: query
        name: primaryKeySize
        schema:
          default: -1
          format: int32
          type: integer
      - description: numPartitions
        in: query
        name: numPartitions
        schema:
          default: -1
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Estimate memory usage for an upsert table
      tags:
      - Upsert
      x-codegen-request-body-name: body
  /version:
    get:
      operationId: getVersionNumber
      responses:
        "200":
          content: {}
          description: Success
      security:
      - oauth: []
      summary: Get version number of Pinot components
      tags:
      - Version
  /tableConfigs/{tableName}:
    delete:
      description: Delete the TableConfigs
      operationId: deleteConfig
      parameters:
      - description: TableConfigs name i.e. raw table name
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Delete the TableConfigs
      tags:
      - Table
    get:
      description: Get the TableConfigs for a given raw tableName
      operationId: getConfig
      parameters:
      - description: Raw table name
        in: path
        name: tableName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Get the TableConfigs for a given raw tableName
      tags:
      - Table
    put:
      description: Update the TableConfigs provided by the tableConfigsStr json
      operationId: updateConfig
      parameters:
      - description: TableConfigs name i.e. raw table name
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: "comma separated list of validation type(s) to skip. supported\
          \ types: (ALL|TASK|UPSERT)"
        in: query
        name: validationTypesToSkip
        schema:
          type: string
      - description: Reload the table if the new schema is backward compatible
        in: query
        name: reload
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigSuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Update the TableConfigs provided by the tableConfigsStr json
      tags:
      - Table
      x-codegen-request-body-name: body
  /tableConfigs/validate:
    post:
      description: Validate the TableConfigs
      operationId: validateConfig
      parameters:
      - description: "comma separated list of validation type(s) to skip. supported\
          \ types: (ALL|TASK|UPSERT)"
        in: query
        name: validationTypesToSkip
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Validate the TableConfigs
      tags:
      - Table
      x-codegen-request-body-name: body
  /tableConfigs:
    get:
      description: Lists all TableConfigs in cluster
      operationId: listConfigs
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - oauth: []
      summary: Lists all TableConfigs in cluster
      tags:
      - Table
    post:
      description: Add the TableConfigs using the tableConfigsStr json
      operationId: addConfig
      parameters:
      - description: "comma separated list of validation type(s) to skip. supported\
          \ types: (ALL|TASK|UPSERT)"
        in: query
        name: validationTypesToSkip
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigSuccessResponse'
          description: successful operation
      security:
      - oauth: []
      summary: Add the TableConfigs using the tableConfigsStr json
      tags:
      - Table
      x-codegen-request-body-name: body
  /tables/{tableName}/size:
    get:
      description: Get table size details. Table size is the size of untarred segments
        including replication
      operationId: getTableSize
      parameters:
      - description: Table name without type
        example: myTable | myTable_OFFLINE
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: Get detailed information
        in: query
        name: detailed
        schema:
          default: true
          type: boolean
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Table not found
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Read table sizes
      tags:
      - Table
  /tables/{tableName}/idealstate:
    get:
      description: Get table ideal state
      operationId: getIdealState
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: realtime|offline
        in: query
        name: tableType
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableView'
          description: successful operation
      security:
      - oauth: []
      summary: Get table ideal state
      tags:
      - Table
  /tables/{tableName}/externalview:
    get:
      description: Get table external view
      operationId: getExternalView
      parameters:
      - description: Name of the table
        in: path
        name: tableName
        required: true
        schema:
          type: string
      - description: realtime|offline
        in: query
        name: tableType
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableView'
          description: successful operation
      security:
      - oauth: []
      summary: Get table external view
      tags:
      - Table
  /v1/write/config/{table}:
    get:
      description: Gets a config for specific table. May contain Kafka producer configs
      operationId: getWriteConfig
      parameters:
      - in: path
        name: table
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Get table config for write operation
      tags:
      - WriteApi
    put:
      description: Gets a config for specific table. May contain Kafka producer configs
      operationId: updateWriteConfig
      parameters:
      - in: path
        name: table
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableWriteConfig'
        required: false
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Update table config for write operation
      tags:
      - WriteApi
      x-codegen-request-body-name: body
  /v1/write/{table}:
    post:
      description: Insert records into a table
      operationId: insert
      parameters:
      - in: path
        name: table
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WritePayload'
        required: false
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - oauth: []
      summary: Insert By POST Payload
      tags:
      - WriteApi
      x-codegen-request-body-name: body
  /zk/delete:
    delete:
      operationId: delete
      parameters:
      - description: "Zookeeper Path, must start with /"
        in: query
        name: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: ZK Path not found
        "204":
          content: {}
          description: No Content
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Delete the znode at this path
      tags:
      - Zookeeper
  /zk/stat:
    get:
      description: " Use this api to fetch additional details of a znode such as creation\
        \ time, modified time, numChildren etc "
      operationId: stat
      parameters:
      - description: "Zookeeper Path, must start with /"
        in: query
        name: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: Table not found
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Get the stat
      tags:
      - Zookeeper
  /zk/ls:
    get:
      operationId: ls
      parameters:
      - description: "Zookeeper Path, must start with /"
        in: query
        name: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: ZK Path not found
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: List the child znodes
      tags:
      - Zookeeper
  /zk/getChildren:
    get:
      operationId: getChildren
      parameters:
      - description: "Zookeeper Path, must start with /"
        in: query
        name: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: ZK Path not found
        "204":
          content: {}
          description: No Content
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Get all child znodes
      tags:
      - Zookeeper
  /zk/get:
    get:
      operationId: getData
      parameters:
      - description: "Zookeeper Path, must start with /"
        in: query
        name: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: ZK Path not found
        "204":
          content: {}
          description: No Content
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Get content of the znode
      tags:
      - Zookeeper
  /zk/putChildren:
    put:
      operationId: putChildren
      parameters:
      - description: "Zookeeper path of parent, must start with /"
        in: query
        name: path
        required: true
        schema:
          type: string
      - description: Content
        in: query
        name: data
        schema:
          type: string
      - description: expectedVersion
        in: query
        name: expectedVersion
        schema:
          default: -1
          format: int32
          type: integer
      - description: accessOption
        in: query
        name: accessOption
        schema:
          default: 1
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: ZK Path not found
        "204":
          content: {}
          description: No Content
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Update the content of multiple znRecord node under the same path
      tags:
      - Zookeeper
      x-codegen-request-body-name: body
  /zk/put:
    put:
      operationId: putData
      parameters:
      - description: "Zookeeper Path, must start with /"
        in: query
        name: path
        required: true
        schema:
          type: string
      - description: Content
        in: query
        name: data
        schema:
          type: string
      - description: expectedVersion
        in: query
        name: expectedVersion
        schema:
          default: -1
          format: int32
          type: integer
      - description: accessOption
        in: query
        name: accessOption
        schema:
          default: 1
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: ZK Path not found
        "204":
          content: {}
          description: No Content
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: Update the content of the node
      tags:
      - Zookeeper
      x-codegen-request-body-name: body
  /zk/lsl:
    get:
      operationId: lsl
      parameters:
      - description: "Zookeeper Path, must start with /"
        in: query
        name: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: ZK Path not found
        "500":
          content: {}
          description: Internal server error
      security:
      - oauth: []
      summary: List the child znodes along with Stats
      tags:
      - Zookeeper
components:
  schemas:
    ClusterHealthResponse:
      example:
        tableToSegmentsWitHMissingColumnsCount:
          key: 5
        tableToMisconfiguredSegmentCount:
          key: 6
        tableToErrorSegmentsCount:
          key: 1
        unhealthyServerCount: 0
      properties:
        unhealthyServerCount:
          format: int64
          type: integer
        tableToMisconfiguredSegmentCount:
          additionalProperties:
            format: int32
            type: integer
          type: object
        tableToErrorSegmentsCount:
          additionalProperties:
            format: int32
            type: integer
          type: object
        tableToSegmentsWitHMissingColumnsCount:
          additionalProperties:
            format: int32
            type: integer
          type: object
      type: object
    PartitionOffsetInfo:
      properties:
        currentOffsetsMap:
          additionalProperties:
            type: string
          type: object
        latestUpstreamOffsetMap:
          additionalProperties:
            type: string
          type: object
        recordsLagMap:
          additionalProperties:
            type: string
          type: object
        availabilityLagMsMap:
          additionalProperties:
            type: string
          type: object
      type: object
    SegmentConsumerInfo:
      properties:
        segmentName:
          readOnly: true
          type: string
        consumerState:
          readOnly: true
          type: string
        lastConsumedTimestamp:
          format: int64
          readOnly: true
          type: integer
        partitionToOffsetMap:
          additionalProperties:
            type: string
          readOnly: true
          type: object
        partitionOffsetInfo:
          $ref: '#/components/schemas/PartitionOffsetInfo'
      type: object
    SegmentDebugInfo:
      properties:
        segmentName:
          readOnly: true
          type: string
        serverState:
          additionalProperties:
            $ref: '#/components/schemas/SegmentState'
          readOnly: true
          type: object
      type: object
    SegmentErrorInfo:
      properties:
        timestamp:
          readOnly: true
          type: string
        errorMessage:
          readOnly: true
          type: string
        stackTrace:
          readOnly: true
          type: string
      type: object
    SegmentState:
      properties:
        idealState:
          readOnly: true
          type: string
        externalView:
          readOnly: true
          type: string
        segmentSize:
          readOnly: true
          type: string
        consumerInfo:
          $ref: '#/components/schemas/SegmentConsumerInfo'
        errorInfo:
          $ref: '#/components/schemas/SegmentErrorInfo'
      type: object
    SuccessResponse:
      example:
        status: status
      properties:
        status:
          type: string
      type: object
    InstanceInfo:
      example:
        port: 0
        instanceName: instanceName
        host: host
      properties:
        port:
          format: int32
          type: integer
        host:
          type: string
        instanceName:
          type: string
      type: object
    AuthWorkflowInfo:
      properties:
        workflow:
          type: string
      type: object
    BodyPart:
      example:
        headers:
          key:
          - headers
          - headers
        parent: null
        parameterizedHeaders:
          key:
          - value: value
            parameters:
              key: parameters
          - value: value
            parameters:
              key: parameters
        messageBodyWorkers: null
        contentDisposition:
          fileName: fileName
          modificationDate: 2000-01-23T04:56:07.000+00:00
          size: 0
          readDate: 2000-01-23T04:56:07.000+00:00
          type: type
          creationDate: 2000-01-23T04:56:07.000+00:00
          parameters:
            key: parameters
        mediaType:
          subtype: subtype
          type: type
          parameters:
            key: parameters
          wildcardSubtype: true
          wildcardType: true
        entity: "{}"
        providers: null
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          properties: {}
          type: object
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        mediaType:
          $ref: '#/components/schemas/MediaType'
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          $ref: '#/components/schemas/Providers'
        parameterizedHeaders:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
            type: array
          type: object
      type: object
    ContentDisposition:
      example:
        fileName: fileName
        modificationDate: 2000-01-23T04:56:07.000+00:00
        size: 0
        readDate: 2000-01-23T04:56:07.000+00:00
        type: type
        creationDate: 2000-01-23T04:56:07.000+00:00
        parameters:
          key: parameters
      properties:
        type:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        fileName:
          type: string
        creationDate:
          format: date-time
          type: string
        modificationDate:
          format: date-time
          type: string
        readDate:
          format: date-time
          type: string
        size:
          format: int64
          type: integer
      type: object
    FormDataBodyPart:
      example:
        headers:
          key:
          - headers
          - headers
        parent:
          headers:
            key:
            - headers
            - headers
          parent: null
          parameterizedHeaders:
            key:
            - value: value
              parameters:
                key: parameters
            - value: value
              parameters:
                key: parameters
          messageBodyWorkers: null
          contentDisposition:
            fileName: fileName
            modificationDate: 2000-01-23T04:56:07.000+00:00
            size: 0
            readDate: 2000-01-23T04:56:07.000+00:00
            type: type
            creationDate: 2000-01-23T04:56:07.000+00:00
            parameters:
              key: parameters
          mediaType:
            subtype: subtype
            type: type
            parameters:
              key: parameters
            wildcardSubtype: true
            wildcardType: true
          bodyParts:
          - headers:
              key:
              - headers
              - headers
            parent: null
            parameterizedHeaders:
              key:
              - value: value
                parameters:
                  key: parameters
              - value: value
                parameters:
                  key: parameters
            messageBodyWorkers: null
            contentDisposition:
              fileName: fileName
              modificationDate: 2000-01-23T04:56:07.000+00:00
              size: 0
              readDate: 2000-01-23T04:56:07.000+00:00
              type: type
              creationDate: 2000-01-23T04:56:07.000+00:00
              parameters:
                key: parameters
            mediaType:
              subtype: subtype
              type: type
              parameters:
                key: parameters
              wildcardSubtype: true
              wildcardType: true
            entity: "{}"
            providers: null
          - headers:
              key:
              - headers
              - headers
            parent: null
            parameterizedHeaders:
              key:
              - value: value
                parameters:
                  key: parameters
              - value: value
                parameters:
                  key: parameters
            messageBodyWorkers: null
            contentDisposition:
              fileName: fileName
              modificationDate: 2000-01-23T04:56:07.000+00:00
              size: 0
              readDate: 2000-01-23T04:56:07.000+00:00
              type: type
              creationDate: 2000-01-23T04:56:07.000+00:00
              parameters:
                key: parameters
            mediaType:
              subtype: subtype
              type: type
              parameters:
                key: parameters
              wildcardSubtype: true
              wildcardType: true
            entity: "{}"
            providers: null
          entity: "{}"
          providers: null
        parameterizedHeaders:
          key:
          - value: value
            parameters:
              key: parameters
          - value: value
            parameters:
              key: parameters
        messageBodyWorkers: null
        contentDisposition:
          fileName: fileName
          modificationDate: 2000-01-23T04:56:07.000+00:00
          size: 0
          readDate: 2000-01-23T04:56:07.000+00:00
          type: type
          creationDate: 2000-01-23T04:56:07.000+00:00
          parameters:
            key: parameters
        name: name
        mediaType:
          subtype: subtype
          type: type
          parameters:
            key: parameters
          wildcardSubtype: true
          wildcardType: true
        simple: true
        value: value
        formDataContentDisposition:
          fileName: fileName
          modificationDate: 2000-01-23T04:56:07.000+00:00
          size: 6
          readDate: 2000-01-23T04:56:07.000+00:00
          name: name
          type: type
          creationDate: 2000-01-23T04:56:07.000+00:00
          parameters:
            key: parameters
        entity: "{}"
        providers: null
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          properties: {}
          type: object
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        mediaType:
          $ref: '#/components/schemas/MediaType'
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          $ref: '#/components/schemas/Providers'
        name:
          type: string
        value:
          type: string
        simple:
          type: boolean
        formDataContentDisposition:
          $ref: '#/components/schemas/FormDataContentDisposition'
        parameterizedHeaders:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
            type: array
          type: object
      type: object
    FormDataContentDisposition:
      example:
        fileName: fileName
        modificationDate: 2000-01-23T04:56:07.000+00:00
        size: 6
        readDate: 2000-01-23T04:56:07.000+00:00
        name: name
        type: type
        creationDate: 2000-01-23T04:56:07.000+00:00
        parameters:
          key: parameters
      properties:
        type:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        fileName:
          type: string
        creationDate:
          format: date-time
          type: string
        modificationDate:
          format: date-time
          type: string
        readDate:
          format: date-time
          type: string
        size:
          format: int64
          type: integer
        name:
          type: string
      type: object
    FormDataMultiPart:
      example:
        headers:
          key:
          - headers
          - headers
        parent:
          headers:
            key:
            - headers
            - headers
          parent: null
          parameterizedHeaders:
            key:
            - value: value
              parameters:
                key: parameters
            - value: value
              parameters:
                key: parameters
          messageBodyWorkers: null
          contentDisposition:
            fileName: fileName
            modificationDate: 2000-01-23T04:56:07.000+00:00
            size: 0
            readDate: 2000-01-23T04:56:07.000+00:00
            type: type
            creationDate: 2000-01-23T04:56:07.000+00:00
            parameters:
              key: parameters
          mediaType:
            subtype: subtype
            type: type
            parameters:
              key: parameters
            wildcardSubtype: true
            wildcardType: true
          bodyParts:
          - headers:
              key:
              - headers
              - headers
            parent: null
            parameterizedHeaders:
              key:
              - value: value
                parameters:
                  key: parameters
              - value: value
                parameters:
                  key: parameters
            messageBodyWorkers: null
            contentDisposition:
              fileName: fileName
              modificationDate: 2000-01-23T04:56:07.000+00:00
              size: 0
              readDate: 2000-01-23T04:56:07.000+00:00
              type: type
              creationDate: 2000-01-23T04:56:07.000+00:00
              parameters:
                key: parameters
            mediaType:
              subtype: subtype
              type: type
              parameters:
                key: parameters
              wildcardSubtype: true
              wildcardType: true
            entity: "{}"
            providers: null
          - headers:
              key:
              - headers
              - headers
            parent: null
            parameterizedHeaders:
              key:
              - value: value
                parameters:
                  key: parameters
              - value: value
                parameters:
                  key: parameters
            messageBodyWorkers: null
            contentDisposition:
              fileName: fileName
              modificationDate: 2000-01-23T04:56:07.000+00:00
              size: 0
              readDate: 2000-01-23T04:56:07.000+00:00
              type: type
              creationDate: 2000-01-23T04:56:07.000+00:00
              parameters:
                key: parameters
            mediaType:
              subtype: subtype
              type: type
              parameters:
                key: parameters
              wildcardSubtype: true
              wildcardType: true
            entity: "{}"
            providers: null
          entity: "{}"
          providers: null
        parameterizedHeaders:
          key:
          - value: value
            parameters:
              key: parameters
          - value: value
            parameters:
              key: parameters
        messageBodyWorkers: "{}"
        contentDisposition:
          fileName: fileName
          modificationDate: 2000-01-23T04:56:07.000+00:00
          size: 0
          readDate: 2000-01-23T04:56:07.000+00:00
          type: type
          creationDate: 2000-01-23T04:56:07.000+00:00
          parameters:
            key: parameters
        mediaType:
          subtype: subtype
          type: type
          parameters:
            key: parameters
          wildcardSubtype: true
          wildcardType: true
        fields:
          key:
          - headers:
              key:
              - headers
              - headers
            parent:
              headers:
                key:
                - headers
                - headers
              parent: null
              parameterizedHeaders:
                key:
                - value: value
                  parameters:
                    key: parameters
                - value: value
                  parameters:
                    key: parameters
              messageBodyWorkers: null
              contentDisposition:
                fileName: fileName
                modificationDate: 2000-01-23T04:56:07.000+00:00
                size: 0
                readDate: 2000-01-23T04:56:07.000+00:00
                type: type
                creationDate: 2000-01-23T04:56:07.000+00:00
                parameters:
                  key: parameters
              mediaType:
                subtype: subtype
                type: type
                parameters:
                  key: parameters
                wildcardSubtype: true
                wildcardType: true
              bodyParts:
              - headers:
                  key:
                  - headers
                  - headers
                parent: null
                parameterizedHeaders:
                  key:
                  - value: value
                    parameters:
                      key: parameters
                  - value: value
                    parameters:
                      key: parameters
                messageBodyWorkers: null
                contentDisposition:
                  fileName: fileName
                  modificationDate: 2000-01-23T04:56:07.000+00:00
                  size: 0
                  readDate: 2000-01-23T04:56:07.000+00:00
                  type: type
                  creationDate: 2000-01-23T04:56:07.000+00:00
                  parameters:
                    key: parameters
                mediaType:
                  subtype: subtype
                  type: type
                  parameters:
                    key: parameters
                  wildcardSubtype: true
                  wildcardType: true
                entity: "{}"
                providers: null
              - headers:
                  key:
                  - headers
                  - headers
                parent: null
                parameterizedHeaders:
                  key:
                  - value: value
                    parameters:
                      key: parameters
                  - value: value
                    parameters:
                      key: parameters
                messageBodyWorkers: null
                contentDisposition:
                  fileName: fileName
                  modificationDate: 2000-01-23T04:56:07.000+00:00
                  size: 0
                  readDate: 2000-01-23T04:56:07.000+00:00
                  type: type
                  creationDate: 2000-01-23T04:56:07.000+00:00
                  parameters:
                    key: parameters
                mediaType:
                  subtype: subtype
                  type: type
                  parameters:
                    key: parameters
                  wildcardSubtype: true
                  wildcardType: true
                entity: "{}"
                providers: null
              entity: "{}"
              providers: null
            parameterizedHeaders:
              key:
              - value: value
                parameters:
                  key: parameters
              - value: value
                parameters:
                  key: parameters
            messageBodyWorkers: null
            contentDisposition:
              fileName: fileName
              modificationDate: 2000-01-23T04:56:07.000+00:00
              size: 0
              readDate: 2000-01-23T04:56:07.000+00:00
              type: type
              creationDate: 2000-01-23T04:56:07.000+00:00
              parameters:
                key: parameters
            name: name
            mediaType:
              subtype: subtype
              type: type
              parameters:
                key: parameters
              wildcardSubtype: true
              wildcardType: true
            simple: true
            value: value
            formDataContentDisposition:
              fileName: fileName
              modificationDate: 2000-01-23T04:56:07.000+00:00
              size: 6
              readDate: 2000-01-23T04:56:07.000+00:00
              name: name
              type: type
              creationDate: 2000-01-23T04:56:07.000+00:00
              parameters:
                key: parameters
            entity: "{}"
            providers: null
          - headers:
              key:
              - headers
              - headers
            parent:
              headers:
                key:
                - headers
                - headers
              parent: null
              parameterizedHeaders:
                key:
                - value: value
                  parameters:
                    key: parameters
                - value: value
                  parameters:
                    key: parameters
              messageBodyWorkers: null
              contentDisposition:
                fileName: fileName
                modificationDate: 2000-01-23T04:56:07.000+00:00
                size: 0
                readDate: 2000-01-23T04:56:07.000+00:00
                type: type
                creationDate: 2000-01-23T04:56:07.000+00:00
                parameters:
                  key: parameters
              mediaType:
                subtype: subtype
                type: type
                parameters:
                  key: parameters
                wildcardSubtype: true
                wildcardType: true
              bodyParts:
              - headers:
                  key:
                  - headers
                  - headers
                parent: null
                parameterizedHeaders:
                  key:
                  - value: value
                    parameters:
                      key: parameters
                  - value: value
                    parameters:
                      key: parameters
                messageBodyWorkers: null
                contentDisposition:
                  fileName: fileName
                  modificationDate: 2000-01-23T04:56:07.000+00:00
                  size: 0
                  readDate: 2000-01-23T04:56:07.000+00:00
                  type: type
                  creationDate: 2000-01-23T04:56:07.000+00:00
                  parameters:
                    key: parameters
                mediaType:
                  subtype: subtype
                  type: type
                  parameters:
                    key: parameters
                  wildcardSubtype: true
                  wildcardType: true
                entity: "{}"
                providers: null
              - headers:
                  key:
                  - headers
                  - headers
                parent: null
                parameterizedHeaders:
                  key:
                  - value: value
                    parameters:
                      key: parameters
                  - value: value
                    parameters:
                      key: parameters
                messageBodyWorkers: null
                contentDisposition:
                  fileName: fileName
                  modificationDate: 2000-01-23T04:56:07.000+00:00
                  size: 0
                  readDate: 2000-01-23T04:56:07.000+00:00
                  type: type
                  creationDate: 2000-01-23T04:56:07.000+00:00
                  parameters:
                    key: parameters
                mediaType:
                  subtype: subtype
                  type: type
                  parameters:
                    key: parameters
                  wildcardSubtype: true
                  wildcardType: true
                entity: "{}"
                providers: null
              entity: "{}"
              providers: null
            parameterizedHeaders:
              key:
              - value: value
                parameters:
                  key: parameters
              - value: value
                parameters:
                  key: parameters
            messageBodyWorkers: null
            contentDisposition:
              fileName: fileName
              modificationDate: 2000-01-23T04:56:07.000+00:00
              size: 0
              readDate: 2000-01-23T04:56:07.000+00:00
              type: type
              creationDate: 2000-01-23T04:56:07.000+00:00
              parameters:
                key: parameters
            name: name
            mediaType:
              subtype: subtype
              type: type
              parameters:
                key: parameters
              wildcardSubtype: true
              wildcardType: true
            simple: true
            value: value
            formDataContentDisposition:
              fileName: fileName
              modificationDate: 2000-01-23T04:56:07.000+00:00
              size: 6
              readDate: 2000-01-23T04:56:07.000+00:00
              name: name
              type: type
              creationDate: 2000-01-23T04:56:07.000+00:00
              parameters:
                key: parameters
            entity: "{}"
            providers: null
        bodyParts:
        - headers:
            key:
            - headers
            - headers
          parent: null
          parameterizedHeaders:
            key:
            - value: value
              parameters:
                key: parameters
            - value: value
              parameters:
                key: parameters
          messageBodyWorkers: null
          contentDisposition:
            fileName: fileName
            modificationDate: 2000-01-23T04:56:07.000+00:00
            size: 0
            readDate: 2000-01-23T04:56:07.000+00:00
            type: type
            creationDate: 2000-01-23T04:56:07.000+00:00
            parameters:
              key: parameters
          mediaType:
            subtype: subtype
            type: type
            parameters:
              key: parameters
            wildcardSubtype: true
            wildcardType: true
          entity: "{}"
          providers: null
        - headers:
            key:
            - headers
            - headers
          parent: null
          parameterizedHeaders:
            key:
            - value: value
              parameters:
                key: parameters
            - value: value
              parameters:
                key: parameters
          messageBodyWorkers: null
          contentDisposition:
            fileName: fileName
            modificationDate: 2000-01-23T04:56:07.000+00:00
            size: 0
            readDate: 2000-01-23T04:56:07.000+00:00
            type: type
            creationDate: 2000-01-23T04:56:07.000+00:00
            parameters:
              key: parameters
          mediaType:
            subtype: subtype
            type: type
            parameters:
              key: parameters
            wildcardSubtype: true
            wildcardType: true
          entity: "{}"
          providers: null
        entity: "{}"
        providers: "{}"
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          properties: {}
          type: object
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        mediaType:
          $ref: '#/components/schemas/MediaType'
        messageBodyWorkers:
          type: object
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          type: object
        bodyParts:
          items:
            $ref: '#/components/schemas/BodyPart'
          type: array
        fields:
          additionalProperties:
            items:
              $ref: '#/components/schemas/FormDataBodyPart'
            type: array
          type: object
        parameterizedHeaders:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
            type: array
          type: object
      type: object
    MediaType:
      example:
        subtype: subtype
        type: type
        parameters:
          key: parameters
        wildcardSubtype: true
        wildcardType: true
      properties:
        type:
          type: string
        subtype:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        wildcardType:
          type: boolean
        wildcardSubtype:
          type: boolean
      type: object
    MessageBodyWorkers:
      type: object
    MultiPart:
      example:
        headers:
          key:
          - headers
          - headers
        parent: null
        parameterizedHeaders:
          key:
          - value: value
            parameters:
              key: parameters
          - value: value
            parameters:
              key: parameters
        messageBodyWorkers: null
        contentDisposition:
          fileName: fileName
          modificationDate: 2000-01-23T04:56:07.000+00:00
          size: 0
          readDate: 2000-01-23T04:56:07.000+00:00
          type: type
          creationDate: 2000-01-23T04:56:07.000+00:00
          parameters:
            key: parameters
        mediaType:
          subtype: subtype
          type: type
          parameters:
            key: parameters
          wildcardSubtype: true
          wildcardType: true
        bodyParts:
        - headers:
            key:
            - headers
            - headers
          parent: null
          parameterizedHeaders:
            key:
            - value: value
              parameters:
                key: parameters
            - value: value
              parameters:
                key: parameters
          messageBodyWorkers: null
          contentDisposition:
            fileName: fileName
            modificationDate: 2000-01-23T04:56:07.000+00:00
            size: 0
            readDate: 2000-01-23T04:56:07.000+00:00
            type: type
            creationDate: 2000-01-23T04:56:07.000+00:00
            parameters:
              key: parameters
          mediaType:
            subtype: subtype
            type: type
            parameters:
              key: parameters
            wildcardSubtype: true
            wildcardType: true
          entity: "{}"
          providers: null
        - headers:
            key:
            - headers
            - headers
          parent: null
          parameterizedHeaders:
            key:
            - value: value
              parameters:
                key: parameters
            - value: value
              parameters:
                key: parameters
          messageBodyWorkers: null
          contentDisposition:
            fileName: fileName
            modificationDate: 2000-01-23T04:56:07.000+00:00
            size: 0
            readDate: 2000-01-23T04:56:07.000+00:00
            type: type
            creationDate: 2000-01-23T04:56:07.000+00:00
            parameters:
              key: parameters
          mediaType:
            subtype: subtype
            type: type
            parameters:
              key: parameters
            wildcardSubtype: true
            wildcardType: true
          entity: "{}"
          providers: null
        entity: "{}"
        providers: null
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          properties: {}
          type: object
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        mediaType:
          $ref: '#/components/schemas/MediaType'
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          $ref: '#/components/schemas/Providers'
        bodyParts:
          items:
            $ref: '#/components/schemas/BodyPart'
          type: array
        parameterizedHeaders:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
            type: array
          type: object
      type: object
    ParameterizedHeader:
      example:
        value: value
        parameters:
          key: parameters
      properties:
        value:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
      type: object
    Providers:
      type: object
    InstancePartitions:
      example:
        instancePartitionsName: instancePartitionsName
        partitionToInstancesMap:
          key:
          - partitionToInstancesMap
          - partitionToInstancesMap
      properties:
        instancePartitionsName:
          readOnly: true
          type: string
        partitionToInstancesMap:
          additionalProperties:
            items:
              type: string
            type: array
          readOnly: true
          type: object
      type: object
    Instance:
      example:
        port: 0
        host: host
        grpcPort: 1
        pools:
          key: 6
        adminPort: 5
        queryMailboxPort: 2
        queriesDisabled: true
        type: CONTROLLER
        queryServicePort: 5
        tags:
        - tags
        - tags
      properties:
        host:
          readOnly: true
          type: string
        port:
          format: int32
          readOnly: true
          type: integer
        type:
          enum:
          - CONTROLLER
          - BROKER
          - SERVER
          - MINION
          readOnly: true
          type: string
        tags:
          items:
            type: string
          readOnly: true
          type: array
        pools:
          additionalProperties:
            format: int32
            type: integer
          readOnly: true
          type: object
        grpcPort:
          format: int32
          readOnly: true
          type: integer
        adminPort:
          format: int32
          readOnly: true
          type: integer
        queryServicePort:
          format: int32
          readOnly: true
          type: integer
        queryMailboxPort:
          format: int32
          readOnly: true
          type: integer
        queriesDisabled:
          readOnly: true
          type: boolean
      required:
      - host
      - port
      - type
      type: object
    Instances:
      properties:
        instances:
          items:
            type: string
          readOnly: true
          type: array
      type: object
    LeadControllerEntry:
      example:
        tableNames:
        - tableNames
        - tableNames
        leadControllerId: leadControllerId
      properties:
        tableNames:
          items:
            type: string
          readOnly: true
          type: array
        leadControllerId:
          readOnly: true
          type: string
      type: object
    LeadControllerResponse:
      example:
        leadControllerResourceEnabled: true
        leadControllerEntryMap:
          key:
            tableNames:
            - tableNames
            - tableNames
            leadControllerId: leadControllerId
      properties:
        leadControllerResourceEnabled:
          type: boolean
        leadControllerEntryMap:
          additionalProperties:
            $ref: '#/components/schemas/LeadControllerEntry'
          type: object
      type: object
    ConsumingSegmentInfo:
      properties:
        serverName:
          type: string
        consumerState:
          type: string
        lastConsumedTimestamp:
          format: int64
          type: integer
        partitionToOffsetMap:
          additionalProperties:
            type: string
          type: object
        partitionOffsetInfo:
          $ref: '#/components/schemas/PartitionOffsetInfo'
      type: object
    ConsumingSegmentsInfoMap:
      properties:
        _segmentToConsumingInfoMap:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ConsumingSegmentInfo'
            type: array
          type: object
      type: object
    JsonNode:
      type: object
    ConfigSuccessResponse:
      example:
        unrecognizedProperties:
          key: "{}"
        status: status
      properties:
        unrecognizedProperties:
          additionalProperties:
            properties: {}
            type: object
          type: object
        status:
          type: string
      type: object
    ServerReloadControllerJobStatusResponse:
      example:
        totalSegmentCount: 6
        metadata:
          key: metadata
        totalServerCallsFailed: 5
        estimatedTimeRemainingInMinutes: 2.3021358869347655
        successCount: 0
        totalServersQueried: 1
        timeElapsedInMinutes: 5.637376656633329
      properties:
        metadata:
          additionalProperties:
            type: string
          type: object
        successCount:
          format: int32
          type: integer
        totalSegmentCount:
          format: int32
          type: integer
        totalServersQueried:
          format: int32
          type: integer
        totalServerCallsFailed:
          format: int32
          type: integer
        timeElapsedInMinutes:
          format: double
          type: number
        estimatedTimeRemainingInMinutes:
          format: double
          type: number
      type: object
    TableTierDetails:
      properties:
        tableName:
          description: Name of table to look for segment storage tiers
          readOnly: true
          type: string
        segmentTiers:
          additionalProperties:
            additionalProperties:
              type: string
            type: object
          description: Storage tiers of segments for the given table
          readOnly: true
          type: object
      type: object
    StartReplaceSegmentsRequest:
      example:
        segmentsTo:
        - segmentsTo
        - segmentsTo
        segmentsFrom:
        - segmentsFrom
        - segmentsFrom
      properties:
        segmentsFrom:
          items:
            type: string
          readOnly: true
          type: array
        segmentsTo:
          items:
            type: string
          readOnly: true
          type: array
      type: object
    RebalanceResult:
      example:
        jobId: jobId
        instanceAssignment:
          key:
            instancePartitionsName: instancePartitionsName
            partitionToInstancesMap:
              key:
              - partitionToInstancesMap
              - partitionToInstancesMap
        segmentAssignment:
          key:
            key: segmentAssignment
        description: description
        tierInstanceAssignment:
          key:
            instancePartitionsName: instancePartitionsName
            partitionToInstancesMap:
              key:
              - partitionToInstancesMap
              - partitionToInstancesMap
        status: NO_OP
      properties:
        jobId:
          readOnly: true
          type: string
        status:
          enum:
          - NO_OP
          - DONE
          - FAILED
          - IN_PROGRESS
          readOnly: true
          type: string
        description:
          readOnly: true
          type: string
        instanceAssignment:
          additionalProperties:
            $ref: '#/components/schemas/InstancePartitions'
          readOnly: true
          type: object
        tierInstanceAssignment:
          additionalProperties:
            $ref: '#/components/schemas/InstancePartitions'
          readOnly: true
          type: object
        segmentAssignment:
          additionalProperties:
            additionalProperties:
              type: string
            type: object
          readOnly: true
          type: object
      type: object
    ObjectNode:
      type: object
    AggregationConfig:
      example:
        aggregationFunction: aggregationFunction
        columnName: columnName
      properties:
        columnName:
          readOnly: true
          type: string
        aggregationFunction:
          readOnly: true
          type: string
      type: object
    BatchIngestionConfig:
      example:
        batchConfigMaps:
        - key: batchConfigMaps
        - key: batchConfigMaps
        segmentIngestionType: segmentIngestionType
        segmentIngestionFrequency: segmentIngestionFrequency
        consistentDataPush: true
      properties:
        batchConfigMaps:
          items:
            additionalProperties:
              type: string
            type: object
          type: array
        segmentIngestionType:
          type: string
        segmentIngestionFrequency:
          type: string
        consistentDataPush:
          type: boolean
      type: object
    BloomFilterConfig:
      example:
        fpp: 5.637376656633329
        maxSizeInBytes: 2
        loadOnHeap: true
        enabled: true
      properties:
        enabled:
          readOnly: true
          type: boolean
        fpp:
          format: double
          readOnly: true
          type: number
        maxSizeInBytes:
          format: int32
          readOnly: true
          type: integer
        loadOnHeap:
          readOnly: true
          type: boolean
      type: object
    ColumnPartitionConfig:
      example:
        functionName: functionName
        numPartitions: 6
        functionConfig:
          key: functionConfig
      properties:
        functionName:
          readOnly: true
          type: string
        numPartitions:
          format: int32
          readOnly: true
          type: integer
        functionConfig:
          additionalProperties:
            type: string
          readOnly: true
          type: object
      required:
      - functionName
      - numPartitions
      type: object
    CompletionConfig:
      example:
        completionMode: completionMode
      properties:
        completionMode:
          readOnly: true
          type: string
      required:
      - completionMode
      type: object
    ComplexTypeConfig:
      example:
        prefixesToRename:
          key: prefixesToRename
        delimiter: delimiter
        collectionNotUnnestedToJson: NONE
        fieldsToUnnest:
        - fieldsToUnnest
        - fieldsToUnnest
      properties:
        fieldsToUnnest:
          items:
            type: string
          readOnly: true
          type: array
        delimiter:
          readOnly: true
          type: string
        collectionNotUnnestedToJson:
          enum:
          - NONE
          - NON_PRIMITIVE
          - ALL
          readOnly: true
          type: string
        prefixesToRename:
          additionalProperties:
            type: string
          readOnly: true
          type: object
      type: object
    DateTimeFieldSpec:
      example:
        virtualColumnProvider: virtualColumnProvider
        defaultNullValue: "{}"
        defaultNullValueString: defaultNullValueString
        granularity: granularity
        dataType: INT
        format: format
        name: name
        transformFunction: transformFunction
        sampleValue: "{}"
        singleValueField: true
        maxLength: 4
      properties:
        format:
          type: string
        sampleValue:
          properties: {}
          type: object
        granularity:
          type: string
        singleValueField:
          type: boolean
        name:
          type: string
        maxLength:
          format: int32
          type: integer
        dataType:
          enum:
          - INT
          - LONG
          - FLOAT
          - DOUBLE
          - BIG_DECIMAL
          - BOOLEAN
          - TIMESTAMP
          - STRING
          - JSON
          - BYTES
          - STRUCT
          - MAP
          - LIST
          type: string
        transformFunction:
          type: string
        defaultNullValue:
          properties: {}
          type: object
        virtualColumnProvider:
          type: string
        defaultNullValueString:
          type: string
      type: object
    DedupConfig:
      example:
        hashFunction: NONE
        dedupEnabled: true
      properties:
        dedupEnabled:
          readOnly: true
          type: boolean
        hashFunction:
          enum:
          - NONE
          - MD5
          - MURMUR3
          readOnly: true
          type: string
      required:
      - dedupEnabled
      type: object
    DimensionFieldSpec:
      example:
        virtualColumnProvider: virtualColumnProvider
        defaultNullValue: "{}"
        defaultNullValueString: defaultNullValueString
        dataType: INT
        name: name
        transformFunction: transformFunction
        singleValueField: true
        maxLength: 7
      properties:
        name:
          type: string
        maxLength:
          format: int32
          type: integer
        dataType:
          enum:
          - INT
          - LONG
          - FLOAT
          - DOUBLE
          - BIG_DECIMAL
          - BOOLEAN
          - TIMESTAMP
          - STRING
          - JSON
          - BYTES
          - STRUCT
          - MAP
          - LIST
          type: string
        transformFunction:
          type: string
        defaultNullValue:
          properties: {}
          type: object
        singleValueField:
          type: boolean
        virtualColumnProvider:
          type: string
        defaultNullValueString:
          type: string
      type: object
    DimensionTableConfig:
      example:
        disablePreload: true
      properties:
        disablePreload:
          readOnly: true
          type: boolean
      required:
      - disablePreload
      type: object
    FieldConfig:
      example:
        indexType: INVERTED
        encodingType: RAW
        compressionCodec: PASS_THROUGH
        name: name
        indexTypes:
        - INVERTED
        - INVERTED
        timestampConfig:
          granularities:
          - MILLISECOND
          - MILLISECOND
        properties:
          key: properties
      properties:
        name:
          readOnly: true
          type: string
        encodingType:
          enum:
          - RAW
          - DICTIONARY
          readOnly: true
          type: string
        indexType:
          enum:
          - INVERTED
          - SORTED
          - TEXT
          - FST
          - H3
          - JSON
          - TIMESTAMP
          - RANGE
          readOnly: true
          type: string
        indexTypes:
          items:
            enum:
            - INVERTED
            - SORTED
            - TEXT
            - FST
            - H3
            - JSON
            - TIMESTAMP
            - RANGE
            type: string
          readOnly: true
          type: array
        compressionCodec:
          enum:
          - PASS_THROUGH
          - SNAPPY
          - ZSTANDARD
          - LZ4
          readOnly: true
          type: string
        timestampConfig:
          $ref: '#/components/schemas/TimestampConfig'
        properties:
          additionalProperties:
            type: string
          readOnly: true
          type: object
      required:
      - name
      type: object
    FilterConfig:
      example:
        filterFunction: filterFunction
      properties:
        filterFunction:
          readOnly: true
          type: string
      type: object
    IndexingConfig:
      example:
        starTreeIndexConfigs:
        - dimensionsSplitOrder:
          - dimensionsSplitOrder
          - dimensionsSplitOrder
          functionColumnPairs:
          - functionColumnPairs
          - functionColumnPairs
          skipStarNodeCreationForDimensions:
          - skipStarNodeCreationForDimensions
          - skipStarNodeCreationForDimensions
          maxLeafRecords: 7
        - dimensionsSplitOrder:
          - dimensionsSplitOrder
          - dimensionsSplitOrder
          functionColumnPairs:
          - functionColumnPairs
          - functionColumnPairs
          skipStarNodeCreationForDimensions:
          - skipStarNodeCreationForDimensions
          - skipStarNodeCreationForDimensions
          maxLeafRecords: 7
        jsonIndexConfigs:
          key:
            disableCrossArrayUnnest: true
            excludePaths:
            - excludePaths
            - excludePaths
            maxLevels: 5
            excludeArray: true
            includePaths:
            - includePaths
            - includePaths
            excludeFields:
            - excludeFields
            - excludeFields
        segmentFormatVersion: segmentFormatVersion
        rangeIndexColumns:
        - rangeIndexColumns
        - rangeIndexColumns
        loadMode: loadMode
        jsonIndexColumns:
        - jsonIndexColumns
        - jsonIndexColumns
        columnMinMaxValueGeneratorMode: columnMinMaxValueGeneratorMode
        segmentPartitionConfig:
          columnPartitionMap:
            key:
              functionName: functionName
              numPartitions: 6
              functionConfig:
                key: functionConfig
        segmentNameGeneratorType: segmentNameGeneratorType
        aggregateMetrics: true
        onHeapDictionaryColumns:
        - onHeapDictionaryColumns
        - onHeapDictionaryColumns
        varLengthDictionaryColumns:
        - varLengthDictionaryColumns
        - varLengthDictionaryColumns
        bloomFilterColumns:
        - bloomFilterColumns
        - bloomFilterColumns
        autoGeneratedInvertedIndex: true
        bloomFilterConfigs:
          key:
            fpp: 5.637376656633329
            maxSizeInBytes: 2
            loadOnHeap: true
            enabled: true
        optimizeDictionary: true
        sortedColumn:
        - sortedColumn
        - sortedColumn
        enableDynamicStarTreeCreation: true
        invertedIndexColumns:
        - invertedIndexColumns
        - invertedIndexColumns
        fstindexType: LUCENE
        noDictionaryConfig:
          key: noDictionaryConfig
        createInvertedIndexDuringSegmentGeneration: true
        noDictionarySizeRatioThreshold: 9.301444243932576
        streamConfigs:
          key: streamConfigs
        enableDefaultStarTree: true
        rangeIndexVersion: 1
        noDictionaryColumns:
        - noDictionaryColumns
        - noDictionaryColumns
        nullHandlingEnabled: true
        optimizeDictionaryForMetrics: true
      properties:
        segmentNameGeneratorType:
          type: string
        streamConfigs:
          additionalProperties:
            type: string
          type: object
        invertedIndexColumns:
          items:
            type: string
          type: array
        noDictionaryColumns:
          items:
            type: string
          type: array
        segmentPartitionConfig:
          $ref: '#/components/schemas/SegmentPartitionConfig'
        rangeIndexColumns:
          items:
            type: string
          type: array
        rangeIndexVersion:
          format: int32
          type: integer
        fstindexType:
          enum:
          - LUCENE
          - NATIVE
          type: string
        jsonIndexColumns:
          items:
            type: string
          type: array
        jsonIndexConfigs:
          additionalProperties:
            $ref: '#/components/schemas/JsonIndexConfig'
          type: object
        autoGeneratedInvertedIndex:
          type: boolean
        createInvertedIndexDuringSegmentGeneration:
          type: boolean
        sortedColumn:
          items:
            type: string
          type: array
        bloomFilterColumns:
          items:
            type: string
          type: array
        bloomFilterConfigs:
          additionalProperties:
            $ref: '#/components/schemas/BloomFilterConfig'
          type: object
        loadMode:
          type: string
        segmentFormatVersion:
          type: string
        columnMinMaxValueGeneratorMode:
          type: string
        noDictionaryConfig:
          additionalProperties:
            type: string
          type: object
        onHeapDictionaryColumns:
          items:
            type: string
          type: array
        varLengthDictionaryColumns:
          items:
            type: string
          type: array
        enableDefaultStarTree:
          type: boolean
        starTreeIndexConfigs:
          items:
            $ref: '#/components/schemas/StarTreeIndexConfig'
          type: array
        enableDynamicStarTreeCreation:
          type: boolean
        aggregateMetrics:
          type: boolean
        nullHandlingEnabled:
          type: boolean
        optimizeDictionary:
          type: boolean
        optimizeDictionaryForMetrics:
          type: boolean
        noDictionarySizeRatioThreshold:
          format: double
          type: number
      type: object
    IngestionConfig:
      example:
        streamIngestionConfig:
          streamConfigMaps:
          - key: streamConfigMaps
          - key: streamConfigMaps
        segmentTimeValueCheck: true
        complexTypeConfig:
          prefixesToRename:
            key: prefixesToRename
          delimiter: delimiter
          collectionNotUnnestedToJson: NONE
          fieldsToUnnest:
          - fieldsToUnnest
          - fieldsToUnnest
        batchIngestionConfig:
          batchConfigMaps:
          - key: batchConfigMaps
          - key: batchConfigMaps
          segmentIngestionType: segmentIngestionType
          segmentIngestionFrequency: segmentIngestionFrequency
          consistentDataPush: true
        aggregationConfigs:
        - aggregationFunction: aggregationFunction
          columnName: columnName
        - aggregationFunction: aggregationFunction
          columnName: columnName
        filterConfig:
          filterFunction: filterFunction
        transformConfigs:
        - transformFunction: transformFunction
          columnName: columnName
        - transformFunction: transformFunction
          columnName: columnName
        continueOnError: true
        rowTimeValueCheck: true
      properties:
        streamIngestionConfig:
          $ref: '#/components/schemas/StreamIngestionConfig'
        batchIngestionConfig:
          $ref: '#/components/schemas/BatchIngestionConfig'
        segmentTimeValueCheck:
          type: boolean
        filterConfig:
          $ref: '#/components/schemas/FilterConfig'
        transformConfigs:
          items:
            $ref: '#/components/schemas/TransformConfig'
          type: array
        complexTypeConfig:
          $ref: '#/components/schemas/ComplexTypeConfig'
        aggregationConfigs:
          items:
            $ref: '#/components/schemas/AggregationConfig'
          type: array
        continueOnError:
          type: boolean
        rowTimeValueCheck:
          type: boolean
      type: object
    InstanceAssignmentConfig:
      example:
        tagPoolConfig:
          poolBased: true
          numPools: 2
          pools:
          - 4
          - 4
          tag: tag
        constraintConfig:
          constraints:
          - constraints
          - constraints
        replicaGroupPartitionConfig:
          numInstancesPerReplicaGroup: 1
          numInstances: 7
          replicaGroupBased: true
          numReplicaGroups: 1
          numPartitions: 1
          numInstancesPerPartition: 6
          minimizeDataMovement: true
        partitionSelector: FD_AWARE_INSTANCE_PARTITION_SELECTOR
      properties:
        tagPoolConfig:
          $ref: '#/components/schemas/InstanceTagPoolConfig'
        constraintConfig:
          $ref: '#/components/schemas/InstanceConstraintConfig'
        replicaGroupPartitionConfig:
          $ref: '#/components/schemas/InstanceReplicaGroupPartitionConfig'
        partitionSelector:
          enum:
          - FD_AWARE_INSTANCE_PARTITION_SELECTOR
          - INSTANCE_REPLICA_GROUP_PARTITION_SELECTOR
          readOnly: true
          type: string
      required:
      - replicaGroupPartitionConfig
      - tagPoolConfig
      type: object
    InstanceConstraintConfig:
      example:
        constraints:
        - constraints
        - constraints
      properties:
        constraints:
          items:
            type: string
          readOnly: true
          type: array
      required:
      - constraints
      type: object
    InstanceReplicaGroupPartitionConfig:
      example:
        numInstancesPerReplicaGroup: 1
        numInstances: 7
        replicaGroupBased: true
        numReplicaGroups: 1
        numPartitions: 1
        numInstancesPerPartition: 6
        minimizeDataMovement: true
      properties:
        replicaGroupBased:
          readOnly: true
          type: boolean
        numInstances:
          format: int32
          readOnly: true
          type: integer
        numReplicaGroups:
          format: int32
          readOnly: true
          type: integer
        numInstancesPerReplicaGroup:
          format: int32
          readOnly: true
          type: integer
        numPartitions:
          format: int32
          readOnly: true
          type: integer
        numInstancesPerPartition:
          format: int32
          readOnly: true
          type: integer
        minimizeDataMovement:
          readOnly: true
          type: boolean
      type: object
    InstanceTagPoolConfig:
      example:
        poolBased: true
        numPools: 2
        pools:
        - 4
        - 4
        tag: tag
      properties:
        tag:
          readOnly: true
          type: string
        poolBased:
          readOnly: true
          type: boolean
        numPools:
          format: int32
          readOnly: true
          type: integer
        pools:
          items:
            format: int32
            type: integer
          readOnly: true
          type: array
      required:
      - tag
      type: object
    JsonIndexConfig:
      example:
        disableCrossArrayUnnest: true
        excludePaths:
        - excludePaths
        - excludePaths
        maxLevels: 5
        excludeArray: true
        includePaths:
        - includePaths
        - includePaths
        excludeFields:
        - excludeFields
        - excludeFields
      properties:
        maxLevels:
          format: int32
          type: integer
        excludeArray:
          type: boolean
        disableCrossArrayUnnest:
          type: boolean
        includePaths:
          items:
            type: string
          type: array
          uniqueItems: true
        excludePaths:
          items:
            type: string
          type: array
          uniqueItems: true
        excludeFields:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    MetricFieldSpec:
      example:
        virtualColumnProvider: virtualColumnProvider
        defaultNullValue: "{}"
        defaultNullValueString: defaultNullValueString
        dataType: INT
        name: name
        transformFunction: transformFunction
        singleValueField: true
        maxLength: 1
      properties:
        singleValueField:
          type: boolean
        name:
          type: string
        maxLength:
          format: int32
          type: integer
        dataType:
          enum:
          - INT
          - LONG
          - FLOAT
          - DOUBLE
          - BIG_DECIMAL
          - BOOLEAN
          - TIMESTAMP
          - STRING
          - JSON
          - BYTES
          - STRUCT
          - MAP
          - LIST
          type: string
        transformFunction:
          type: string
        defaultNullValue:
          properties: {}
          type: object
        virtualColumnProvider:
          type: string
        defaultNullValueString:
          type: string
      type: object
    QueryConfig:
      example:
        disableGroovy: true
        timeoutMs: 3
        useApproximateFunction: true
        expressionOverrideMap:
          key: expressionOverrideMap
      properties:
        timeoutMs:
          format: int64
          readOnly: true
          type: integer
        disableGroovy:
          readOnly: true
          type: boolean
        useApproximateFunction:
          readOnly: true
          type: boolean
        expressionOverrideMap:
          additionalProperties:
            type: string
          readOnly: true
          type: object
      type: object
    QuotaConfig:
      example:
        maxQueriesPerSecond: maxQueriesPerSecond
        storage: storage
      properties:
        storage:
          readOnly: true
          type: string
        maxQueriesPerSecond:
          readOnly: true
          type: string
      type: object
    ReplicaGroupStrategyConfig:
      example:
        numInstancesPerPartition: 0
        partitionColumn: partitionColumn
      properties:
        partitionColumn:
          readOnly: true
          type: string
        numInstancesPerPartition:
          format: int32
          readOnly: true
          type: integer
      required:
      - numInstancesPerPartition
      type: object
    RoutingConfig:
      example:
        routingTableBuilderName: routingTableBuilderName
        instanceSelectorType: instanceSelectorType
        segmentPrunerTypes:
        - segmentPrunerTypes
        - segmentPrunerTypes
      properties:
        routingTableBuilderName:
          readOnly: true
          type: string
        segmentPrunerTypes:
          items:
            type: string
          readOnly: true
          type: array
        instanceSelectorType:
          readOnly: true
          type: string
      type: object
    Schema:
      example:
        primaryKeyColumns:
        - primaryKeyColumns
        - primaryKeyColumns
        dateTimeFieldSpecs:
        - virtualColumnProvider: virtualColumnProvider
          defaultNullValue: "{}"
          defaultNullValueString: defaultNullValueString
          granularity: granularity
          dataType: INT
          format: format
          name: name
          transformFunction: transformFunction
          sampleValue: "{}"
          singleValueField: true
          maxLength: 4
        - virtualColumnProvider: virtualColumnProvider
          defaultNullValue: "{}"
          defaultNullValueString: defaultNullValueString
          granularity: granularity
          dataType: INT
          format: format
          name: name
          transformFunction: transformFunction
          sampleValue: "{}"
          singleValueField: true
          maxLength: 4
        metricFieldSpecs:
        - virtualColumnProvider: virtualColumnProvider
          defaultNullValue: "{}"
          defaultNullValueString: defaultNullValueString
          dataType: INT
          name: name
          transformFunction: transformFunction
          singleValueField: true
          maxLength: 1
        - virtualColumnProvider: virtualColumnProvider
          defaultNullValue: "{}"
          defaultNullValueString: defaultNullValueString
          dataType: INT
          name: name
          transformFunction: transformFunction
          singleValueField: true
          maxLength: 1
        timeFieldSpec:
          virtualColumnProvider: virtualColumnProvider
          outgoingGranularitySpec:
            dataType: INT
            timeFormat: timeFormat
            name: name
            timeType: NANOSECONDS
            timeUnitSize: 5
          defaultNullValue: "{}"
          defaultNullValueString: defaultNullValueString
          dataType: INT
          name: name
          transformFunction: transformFunction
          incomingGranularitySpec:
            dataType: INT
            timeFormat: timeFormat
            name: name
            timeType: NANOSECONDS
            timeUnitSize: 5
          singleValueField: true
          maxLength: 9
        dimensionFieldSpecs:
        - virtualColumnProvider: virtualColumnProvider
          defaultNullValue: "{}"
          defaultNullValueString: defaultNullValueString
          dataType: INT
          name: name
          transformFunction: transformFunction
          singleValueField: true
          maxLength: 7
        - virtualColumnProvider: virtualColumnProvider
          defaultNullValue: "{}"
          defaultNullValueString: defaultNullValueString
          dataType: INT
          name: name
          transformFunction: transformFunction
          singleValueField: true
          maxLength: 7
        schemaName: schemaName
      properties:
        schemaName:
          type: string
        primaryKeyColumns:
          items:
            type: string
          type: array
        dimensionFieldSpecs:
          items:
            $ref: '#/components/schemas/DimensionFieldSpec'
          type: array
        metricFieldSpecs:
          items:
            $ref: '#/components/schemas/MetricFieldSpec'
          type: array
        dateTimeFieldSpecs:
          items:
            $ref: '#/components/schemas/DateTimeFieldSpec'
          type: array
        timeFieldSpec:
          $ref: '#/components/schemas/TimeFieldSpec'
      type: object
    SegmentAssignmentConfig:
      example:
        assignmentStrategy: assignmentStrategy
      properties:
        assignmentStrategy:
          type: string
      type: object
    SegmentPartitionConfig:
      example:
        columnPartitionMap:
          key:
            functionName: functionName
            numPartitions: 6
            functionConfig:
              key: functionConfig
      properties:
        columnPartitionMap:
          additionalProperties:
            $ref: '#/components/schemas/ColumnPartitionConfig'
          readOnly: true
          type: object
      required:
      - columnPartitionMap
      type: object
    SegmentsValidationAndRetentionConfig:
      example:
        replication: replication
        timeColumnName: timeColumnName
        crypterClassName: crypterClassName
        peerSegmentDownloadScheme: peerSegmentDownloadScheme
        timeType: NANOSECONDS
        segmentPushType: segmentPushType
        minimizeDataMovement: true
        schemaName: schemaName
        deletedSegmentsRetentionPeriod: deletedSegmentsRetentionPeriod
        retentionTimeUnit: retentionTimeUnit
        segmentPushFrequency: segmentPushFrequency
        replicaGroupStrategyConfig:
          numInstancesPerPartition: 0
          partitionColumn: partitionColumn
        completionConfig:
          completionMode: completionMode
        retentionTimeValue: retentionTimeValue
        replicasPerPartition: replicasPerPartition
        segmentAssignmentStrategy: segmentAssignmentStrategy
      properties:
        timeType:
          enum:
          - NANOSECONDS
          - MICROSECONDS
          - MILLISECONDS
          - SECONDS
          - MINUTES
          - HOURS
          - DAYS
          type: string
        schemaName:
          type: string
        replication:
          type: string
        retentionTimeUnit:
          type: string
        retentionTimeValue:
          type: string
        replicasPerPartition:
          type: string
        timeColumnName:
          type: string
        crypterClassName:
          type: string
        deletedSegmentsRetentionPeriod:
          type: string
        segmentAssignmentStrategy:
          type: string
        segmentPushFrequency:
          type: string
        segmentPushType:
          type: string
        replicaGroupStrategyConfig:
          $ref: '#/components/schemas/ReplicaGroupStrategyConfig'
        completionConfig:
          $ref: '#/components/schemas/CompletionConfig'
        peerSegmentDownloadScheme:
          type: string
        minimizeDataMovement:
          type: boolean
      type: object
    StarTreeIndexConfig:
      example:
        dimensionsSplitOrder:
        - dimensionsSplitOrder
        - dimensionsSplitOrder
        functionColumnPairs:
        - functionColumnPairs
        - functionColumnPairs
        skipStarNodeCreationForDimensions:
        - skipStarNodeCreationForDimensions
        - skipStarNodeCreationForDimensions
        maxLeafRecords: 7
      properties:
        dimensionsSplitOrder:
          items:
            type: string
          readOnly: true
          type: array
        skipStarNodeCreationForDimensions:
          items:
            type: string
          readOnly: true
          type: array
        functionColumnPairs:
          items:
            type: string
          readOnly: true
          type: array
        maxLeafRecords:
          format: int32
          readOnly: true
          type: integer
      required:
      - dimensionsSplitOrder
      - functionColumnPairs
      type: object
    StreamIngestionConfig:
      example:
        streamConfigMaps:
        - key: streamConfigMaps
        - key: streamConfigMaps
      properties:
        streamConfigMaps:
          items:
            additionalProperties:
              type: string
            type: object
          readOnly: true
          type: array
      type: object
    TableAndSchemaConfig:
      example:
        tableConfig:
          instanceAssignmentConfigMap:
            key:
              tagPoolConfig:
                poolBased: true
                numPools: 2
                pools:
                - 4
                - 4
                tag: tag
              constraintConfig:
                constraints:
                - constraints
                - constraints
              replicaGroupPartitionConfig:
                numInstancesPerReplicaGroup: 1
                numInstances: 7
                replicaGroupBased: true
                numReplicaGroups: 1
                numPartitions: 1
                numInstancesPerPartition: 6
                minimizeDataMovement: true
              partitionSelector: FD_AWARE_INSTANCE_PARTITION_SELECTOR
          tierConfigs:
          - segmentAge: segmentAge
            name: name
            storageType: storageType
            segmentSelectorType: segmentSelectorType
            serverTag: serverTag
            tierBackendProperties:
              key: tierBackendProperties
            segmentList:
            - segmentList
            - segmentList
            tierBackend: tierBackend
          - segmentAge: segmentAge
            name: name
            storageType: storageType
            segmentSelectorType: segmentSelectorType
            serverTag: serverTag
            tierBackendProperties:
              key: tierBackendProperties
            segmentList:
            - segmentList
            - segmentList
            tierBackend: tierBackend
          tenants:
            server: server
            tagOverrideConfig:
              realtimeConsuming: realtimeConsuming
              realtimeCompleted: realtimeCompleted
            broker: broker
          tableIndexConfig:
            starTreeIndexConfigs:
            - dimensionsSplitOrder:
              - dimensionsSplitOrder
              - dimensionsSplitOrder
              functionColumnPairs:
              - functionColumnPairs
              - functionColumnPairs
              skipStarNodeCreationForDimensions:
              - skipStarNodeCreationForDimensions
              - skipStarNodeCreationForDimensions
              maxLeafRecords: 7
            - dimensionsSplitOrder:
              - dimensionsSplitOrder
              - dimensionsSplitOrder
              functionColumnPairs:
              - functionColumnPairs
              - functionColumnPairs
              skipStarNodeCreationForDimensions:
              - skipStarNodeCreationForDimensions
              - skipStarNodeCreationForDimensions
              maxLeafRecords: 7
            jsonIndexConfigs:
              key:
                disableCrossArrayUnnest: true
                excludePaths:
                - excludePaths
                - excludePaths
                maxLevels: 5
                excludeArray: true
                includePaths:
                - includePaths
                - includePaths
                excludeFields:
                - excludeFields
                - excludeFields
            segmentFormatVersion: segmentFormatVersion
            rangeIndexColumns:
            - rangeIndexColumns
            - rangeIndexColumns
            loadMode: loadMode
            jsonIndexColumns:
            - jsonIndexColumns
            - jsonIndexColumns
            columnMinMaxValueGeneratorMode: columnMinMaxValueGeneratorMode
            segmentPartitionConfig:
              columnPartitionMap:
                key:
                  functionName: functionName
                  numPartitions: 6
                  functionConfig:
                    key: functionConfig
            segmentNameGeneratorType: segmentNameGeneratorType
            aggregateMetrics: true
            onHeapDictionaryColumns:
            - onHeapDictionaryColumns
            - onHeapDictionaryColumns
            varLengthDictionaryColumns:
            - varLengthDictionaryColumns
            - varLengthDictionaryColumns
            bloomFilterColumns:
            - bloomFilterColumns
            - bloomFilterColumns
            autoGeneratedInvertedIndex: true
            bloomFilterConfigs:
              key:
                fpp: 5.637376656633329
                maxSizeInBytes: 2
                loadOnHeap: true
                enabled: true
            optimizeDictionary: true
            sortedColumn:
            - sortedColumn
            - sortedColumn
            enableDynamicStarTreeCreation: true
            invertedIndexColumns:
            - invertedIndexColumns
            - invertedIndexColumns
            fstindexType: LUCENE
            noDictionaryConfig:
              key: noDictionaryConfig
            createInvertedIndexDuringSegmentGeneration: true
            noDictionarySizeRatioThreshold: 9.301444243932576
            streamConfigs:
              key: streamConfigs
            enableDefaultStarTree: true
            rangeIndexVersion: 1
            noDictionaryColumns:
            - noDictionaryColumns
            - noDictionaryColumns
            nullHandlingEnabled: true
            optimizeDictionaryForMetrics: true
          fieldConfigList:
          - indexType: INVERTED
            encodingType: RAW
            compressionCodec: PASS_THROUGH
            name: name
            indexTypes:
            - INVERTED
            - INVERTED
            timestampConfig:
              granularities:
              - MILLISECOND
              - MILLISECOND
            properties:
              key: properties
          - indexType: INVERTED
            encodingType: RAW
            compressionCodec: PASS_THROUGH
            name: name
            indexTypes:
            - INVERTED
            - INVERTED
            timestampConfig:
              granularities:
              - MILLISECOND
              - MILLISECOND
            properties:
              key: properties
          metadata:
            customConfigs:
              key: customConfigs
          ingestionConfig:
            streamIngestionConfig:
              streamConfigMaps:
              - key: streamConfigMaps
              - key: streamConfigMaps
            segmentTimeValueCheck: true
            complexTypeConfig:
              prefixesToRename:
                key: prefixesToRename
              delimiter: delimiter
              collectionNotUnnestedToJson: NONE
              fieldsToUnnest:
              - fieldsToUnnest
              - fieldsToUnnest
            batchIngestionConfig:
              batchConfigMaps:
              - key: batchConfigMaps
              - key: batchConfigMaps
              segmentIngestionType: segmentIngestionType
              segmentIngestionFrequency: segmentIngestionFrequency
              consistentDataPush: true
            aggregationConfigs:
            - aggregationFunction: aggregationFunction
              columnName: columnName
            - aggregationFunction: aggregationFunction
              columnName: columnName
            filterConfig:
              filterFunction: filterFunction
            transformConfigs:
            - transformFunction: transformFunction
              columnName: columnName
            - transformFunction: transformFunction
              columnName: columnName
            continueOnError: true
            rowTimeValueCheck: true
          segmentsConfig:
            replication: replication
            timeColumnName: timeColumnName
            crypterClassName: crypterClassName
            peerSegmentDownloadScheme: peerSegmentDownloadScheme
            timeType: NANOSECONDS
            segmentPushType: segmentPushType
            minimizeDataMovement: true
            schemaName: schemaName
            deletedSegmentsRetentionPeriod: deletedSegmentsRetentionPeriod
            retentionTimeUnit: retentionTimeUnit
            segmentPushFrequency: segmentPushFrequency
            replicaGroupStrategyConfig:
              numInstancesPerPartition: 0
              partitionColumn: partitionColumn
            completionConfig:
              completionMode: completionMode
            retentionTimeValue: retentionTimeValue
            replicasPerPartition: replicasPerPartition
            segmentAssignmentStrategy: segmentAssignmentStrategy
          query:
            disableGroovy: true
            timeoutMs: 3
            useApproximateFunction: true
            expressionOverrideMap:
              key: expressionOverrideMap
          upsertConfig:
            mode: FULL
            hashFunction: NONE
            metadataManagerConfigs:
              key: metadataManagerConfigs
            comparisonColumns:
            - comparisonColumns
            - comparisonColumns
            partialUpsertStrategies:
              key: APPEND
            enableSnapshot: true
            metadataManagerClass: metadataManagerClass
            defaultPartialUpsertStrategy: APPEND
          dimensionTableConfig:
            disablePreload: true
          tableName: tableName
          tableType: OFFLINE
          routing:
            routingTableBuilderName: routingTableBuilderName
            instanceSelectorType: instanceSelectorType
            segmentPrunerTypes:
            - segmentPrunerTypes
            - segmentPrunerTypes
          dedupConfig:
            hashFunction: NONE
            dedupEnabled: true
          task:
            taskTypeConfigsMap:
              key:
                key: taskTypeConfigsMap
          tunerConfigs:
          - name: name
            tunerProperties:
              key: tunerProperties
          - name: name
            tunerProperties:
              key: tunerProperties
          segmentAssignmentConfigMap:
            key:
              assignmentStrategy: assignmentStrategy
          quota:
            maxQueriesPerSecond: maxQueriesPerSecond
            storage: storage
          instancePartitionsMap:
            key: instancePartitionsMap
          isDimTable: true
        schema:
          primaryKeyColumns:
          - primaryKeyColumns
          - primaryKeyColumns
          dateTimeFieldSpecs:
          - virtualColumnProvider: virtualColumnProvider
            defaultNullValue: "{}"
            defaultNullValueString: defaultNullValueString
            granularity: granularity
            dataType: INT
            format: format
            name: name
            transformFunction: transformFunction
            sampleValue: "{}"
            singleValueField: true
            maxLength: 4
          - virtualColumnProvider: virtualColumnProvider
            defaultNullValue: "{}"
            defaultNullValueString: defaultNullValueString
            granularity: granularity
            dataType: INT
            format: format
            name: name
            transformFunction: transformFunction
            sampleValue: "{}"
            singleValueField: true
            maxLength: 4
          metricFieldSpecs:
          - virtualColumnProvider: virtualColumnProvider
            defaultNullValue: "{}"
            defaultNullValueString: defaultNullValueString
            dataType: INT
            name: name
            transformFunction: transformFunction
            singleValueField: true
            maxLength: 1
          - virtualColumnProvider: virtualColumnProvider
            defaultNullValue: "{}"
            defaultNullValueString: defaultNullValueString
            dataType: INT
            name: name
            transformFunction: transformFunction
            singleValueField: true
            maxLength: 1
          timeFieldSpec:
            virtualColumnProvider: virtualColumnProvider
            outgoingGranularitySpec:
              dataType: INT
              timeFormat: timeFormat
              name: name
              timeType: NANOSECONDS
              timeUnitSize: 5
            defaultNullValue: "{}"
            defaultNullValueString: defaultNullValueString
            dataType: INT
            name: name
            transformFunction: transformFunction
            incomingGranularitySpec:
              dataType: INT
              timeFormat: timeFormat
              name: name
              timeType: NANOSECONDS
              timeUnitSize: 5
            singleValueField: true
            maxLength: 9
          dimensionFieldSpecs:
          - virtualColumnProvider: virtualColumnProvider
            defaultNullValue: "{}"
            defaultNullValueString: defaultNullValueString
            dataType: INT
            name: name
            transformFunction: transformFunction
            singleValueField: true
            maxLength: 7
          - virtualColumnProvider: virtualColumnProvider
            defaultNullValue: "{}"
            defaultNullValueString: defaultNullValueString
            dataType: INT
            name: name
            transformFunction: transformFunction
            singleValueField: true
            maxLength: 7
          schemaName: schemaName
      properties:
        tableConfig:
          $ref: '#/components/schemas/TableConfig'
        schema:
          $ref: '#/components/schemas/Schema'
      required:
      - tableConfig
      type: object
    TableConfig:
      example:
        instanceAssignmentConfigMap:
          key:
            tagPoolConfig:
              poolBased: true
              numPools: 2
              pools:
              - 4
              - 4
              tag: tag
            constraintConfig:
              constraints:
              - constraints
              - constraints
            replicaGroupPartitionConfig:
              numInstancesPerReplicaGroup: 1
              numInstances: 7
              replicaGroupBased: true
              numReplicaGroups: 1
              numPartitions: 1
              numInstancesPerPartition: 6
              minimizeDataMovement: true
            partitionSelector: FD_AWARE_INSTANCE_PARTITION_SELECTOR
        tierConfigs:
        - segmentAge: segmentAge
          name: name
          storageType: storageType
          segmentSelectorType: segmentSelectorType
          serverTag: serverTag
          tierBackendProperties:
            key: tierBackendProperties
          segmentList:
          - segmentList
          - segmentList
          tierBackend: tierBackend
        - segmentAge: segmentAge
          name: name
          storageType: storageType
          segmentSelectorType: segmentSelectorType
          serverTag: serverTag
          tierBackendProperties:
            key: tierBackendProperties
          segmentList:
          - segmentList
          - segmentList
          tierBackend: tierBackend
        tenants:
          server: server
          tagOverrideConfig:
            realtimeConsuming: realtimeConsuming
            realtimeCompleted: realtimeCompleted
          broker: broker
        tableIndexConfig:
          starTreeIndexConfigs:
          - dimensionsSplitOrder:
            - dimensionsSplitOrder
            - dimensionsSplitOrder
            functionColumnPairs:
            - functionColumnPairs
            - functionColumnPairs
            skipStarNodeCreationForDimensions:
            - skipStarNodeCreationForDimensions
            - skipStarNodeCreationForDimensions
            maxLeafRecords: 7
          - dimensionsSplitOrder:
            - dimensionsSplitOrder
            - dimensionsSplitOrder
            functionColumnPairs:
            - functionColumnPairs
            - functionColumnPairs
            skipStarNodeCreationForDimensions:
            - skipStarNodeCreationForDimensions
            - skipStarNodeCreationForDimensions
            maxLeafRecords: 7
          jsonIndexConfigs:
            key:
              disableCrossArrayUnnest: true
              excludePaths:
              - excludePaths
              - excludePaths
              maxLevels: 5
              excludeArray: true
              includePaths:
              - includePaths
              - includePaths
              excludeFields:
              - excludeFields
              - excludeFields
          segmentFormatVersion: segmentFormatVersion
          rangeIndexColumns:
          - rangeIndexColumns
          - rangeIndexColumns
          loadMode: loadMode
          jsonIndexColumns:
          - jsonIndexColumns
          - jsonIndexColumns
          columnMinMaxValueGeneratorMode: columnMinMaxValueGeneratorMode
          segmentPartitionConfig:
            columnPartitionMap:
              key:
                functionName: functionName
                numPartitions: 6
                functionConfig:
                  key: functionConfig
          segmentNameGeneratorType: segmentNameGeneratorType
          aggregateMetrics: true
          onHeapDictionaryColumns:
          - onHeapDictionaryColumns
          - onHeapDictionaryColumns
          varLengthDictionaryColumns:
          - varLengthDictionaryColumns
          - varLengthDictionaryColumns
          bloomFilterColumns:
          - bloomFilterColumns
          - bloomFilterColumns
          autoGeneratedInvertedIndex: true
          bloomFilterConfigs:
            key:
              fpp: 5.637376656633329
              maxSizeInBytes: 2
              loadOnHeap: true
              enabled: true
          optimizeDictionary: true
          sortedColumn:
          - sortedColumn
          - sortedColumn
          enableDynamicStarTreeCreation: true
          invertedIndexColumns:
          - invertedIndexColumns
          - invertedIndexColumns
          fstindexType: LUCENE
          noDictionaryConfig:
            key: noDictionaryConfig
          createInvertedIndexDuringSegmentGeneration: true
          noDictionarySizeRatioThreshold: 9.301444243932576
          streamConfigs:
            key: streamConfigs
          enableDefaultStarTree: true
          rangeIndexVersion: 1
          noDictionaryColumns:
          - noDictionaryColumns
          - noDictionaryColumns
          nullHandlingEnabled: true
          optimizeDictionaryForMetrics: true
        fieldConfigList:
        - indexType: INVERTED
          encodingType: RAW
          compressionCodec: PASS_THROUGH
          name: name
          indexTypes:
          - INVERTED
          - INVERTED
          timestampConfig:
            granularities:
            - MILLISECOND
            - MILLISECOND
          properties:
            key: properties
        - indexType: INVERTED
          encodingType: RAW
          compressionCodec: PASS_THROUGH
          name: name
          indexTypes:
          - INVERTED
          - INVERTED
          timestampConfig:
            granularities:
            - MILLISECOND
            - MILLISECOND
          properties:
            key: properties
        metadata:
          customConfigs:
            key: customConfigs
        ingestionConfig:
          streamIngestionConfig:
            streamConfigMaps:
            - key: streamConfigMaps
            - key: streamConfigMaps
          segmentTimeValueCheck: true
          complexTypeConfig:
            prefixesToRename:
              key: prefixesToRename
            delimiter: delimiter
            collectionNotUnnestedToJson: NONE
            fieldsToUnnest:
            - fieldsToUnnest
            - fieldsToUnnest
          batchIngestionConfig:
            batchConfigMaps:
            - key: batchConfigMaps
            - key: batchConfigMaps
            segmentIngestionType: segmentIngestionType
            segmentIngestionFrequency: segmentIngestionFrequency
            consistentDataPush: true
          aggregationConfigs:
          - aggregationFunction: aggregationFunction
            columnName: columnName
          - aggregationFunction: aggregationFunction
            columnName: columnName
          filterConfig:
            filterFunction: filterFunction
          transformConfigs:
          - transformFunction: transformFunction
            columnName: columnName
          - transformFunction: transformFunction
            columnName: columnName
          continueOnError: true
          rowTimeValueCheck: true
        segmentsConfig:
          replication: replication
          timeColumnName: timeColumnName
          crypterClassName: crypterClassName
          peerSegmentDownloadScheme: peerSegmentDownloadScheme
          timeType: NANOSECONDS
          segmentPushType: segmentPushType
          minimizeDataMovement: true
          schemaName: schemaName
          deletedSegmentsRetentionPeriod: deletedSegmentsRetentionPeriod
          retentionTimeUnit: retentionTimeUnit
          segmentPushFrequency: segmentPushFrequency
          replicaGroupStrategyConfig:
            numInstancesPerPartition: 0
            partitionColumn: partitionColumn
          completionConfig:
            completionMode: completionMode
          retentionTimeValue: retentionTimeValue
          replicasPerPartition: replicasPerPartition
          segmentAssignmentStrategy: segmentAssignmentStrategy
        query:
          disableGroovy: true
          timeoutMs: 3
          useApproximateFunction: true
          expressionOverrideMap:
            key: expressionOverrideMap
        upsertConfig:
          mode: FULL
          hashFunction: NONE
          metadataManagerConfigs:
            key: metadataManagerConfigs
          comparisonColumns:
          - comparisonColumns
          - comparisonColumns
          partialUpsertStrategies:
            key: APPEND
          enableSnapshot: true
          metadataManagerClass: metadataManagerClass
          defaultPartialUpsertStrategy: APPEND
        dimensionTableConfig:
          disablePreload: true
        tableName: tableName
        tableType: OFFLINE
        routing:
          routingTableBuilderName: routingTableBuilderName
          instanceSelectorType: instanceSelectorType
          segmentPrunerTypes:
          - segmentPrunerTypes
          - segmentPrunerTypes
        dedupConfig:
          hashFunction: NONE
          dedupEnabled: true
        task:
          taskTypeConfigsMap:
            key:
              key: taskTypeConfigsMap
        tunerConfigs:
        - name: name
          tunerProperties:
            key: tunerProperties
        - name: name
          tunerProperties:
            key: tunerProperties
        segmentAssignmentConfigMap:
          key:
            assignmentStrategy: assignmentStrategy
        quota:
          maxQueriesPerSecond: maxQueriesPerSecond
          storage: storage
        instancePartitionsMap:
          key: instancePartitionsMap
        isDimTable: true
      properties:
        tableName:
          readOnly: true
          type: string
        tableType:
          enum:
          - OFFLINE
          - REALTIME
          readOnly: true
          type: string
        segmentsConfig:
          $ref: '#/components/schemas/SegmentsValidationAndRetentionConfig'
        tenants:
          $ref: '#/components/schemas/TenantConfig'
        tableIndexConfig:
          $ref: '#/components/schemas/IndexingConfig'
        metadata:
          $ref: '#/components/schemas/TableCustomConfig'
        quota:
          $ref: '#/components/schemas/QuotaConfig'
        task:
          $ref: '#/components/schemas/TableTaskConfig'
        routing:
          $ref: '#/components/schemas/RoutingConfig'
        query:
          $ref: '#/components/schemas/QueryConfig'
        instanceAssignmentConfigMap:
          additionalProperties:
            $ref: '#/components/schemas/InstanceAssignmentConfig'
          type: object
        fieldConfigList:
          items:
            $ref: '#/components/schemas/FieldConfig'
          type: array
        upsertConfig:
          $ref: '#/components/schemas/UpsertConfig'
        dedupConfig:
          $ref: '#/components/schemas/DedupConfig'
        dimensionTableConfig:
          $ref: '#/components/schemas/DimensionTableConfig'
        ingestionConfig:
          $ref: '#/components/schemas/IngestionConfig'
        tierConfigs:
          items:
            $ref: '#/components/schemas/TierConfig'
          type: array
        isDimTable:
          readOnly: true
          type: boolean
        tunerConfigs:
          items:
            $ref: '#/components/schemas/TunerConfig'
          type: array
        instancePartitionsMap:
          additionalProperties:
            type: string
          type: object
        segmentAssignmentConfigMap:
          additionalProperties:
            $ref: '#/components/schemas/SegmentAssignmentConfig'
          type: object
      type: object
    TableCustomConfig:
      example:
        customConfigs:
          key: customConfigs
      properties:
        customConfigs:
          additionalProperties:
            type: string
          readOnly: true
          type: object
      type: object
    TableTaskConfig:
      example:
        taskTypeConfigsMap:
          key:
            key: taskTypeConfigsMap
      properties:
        taskTypeConfigsMap:
          additionalProperties:
            additionalProperties:
              type: string
            type: object
          readOnly: true
          type: object
      type: object
    TagOverrideConfig:
      example:
        realtimeConsuming: realtimeConsuming
        realtimeCompleted: realtimeCompleted
      properties:
        realtimeConsuming:
          readOnly: true
          type: string
        realtimeCompleted:
          readOnly: true
          type: string
      type: object
    TenantConfig:
      example:
        server: server
        tagOverrideConfig:
          realtimeConsuming: realtimeConsuming
          realtimeCompleted: realtimeCompleted
        broker: broker
      properties:
        broker:
          readOnly: true
          type: string
        server:
          readOnly: true
          type: string
        tagOverrideConfig:
          $ref: '#/components/schemas/TagOverrideConfig'
      type: object
    TierConfig:
      example:
        segmentAge: segmentAge
        name: name
        storageType: storageType
        segmentSelectorType: segmentSelectorType
        serverTag: serverTag
        tierBackendProperties:
          key: tierBackendProperties
        segmentList:
        - segmentList
        - segmentList
        tierBackend: tierBackend
      properties:
        name:
          readOnly: true
          type: string
        segmentSelectorType:
          readOnly: true
          type: string
        segmentAge:
          readOnly: true
          type: string
        segmentList:
          items:
            type: string
          readOnly: true
          type: array
        storageType:
          readOnly: true
          type: string
        serverTag:
          readOnly: true
          type: string
        tierBackend:
          readOnly: true
          type: string
        tierBackendProperties:
          additionalProperties:
            type: string
          readOnly: true
          type: object
      required:
      - name
      - segmentSelectorType
      - storageType
      type: object
    TimeFieldSpec:
      example:
        virtualColumnProvider: virtualColumnProvider
        outgoingGranularitySpec:
          dataType: INT
          timeFormat: timeFormat
          name: name
          timeType: NANOSECONDS
          timeUnitSize: 5
        defaultNullValue: "{}"
        defaultNullValueString: defaultNullValueString
        dataType: INT
        name: name
        transformFunction: transformFunction
        incomingGranularitySpec:
          dataType: INT
          timeFormat: timeFormat
          name: name
          timeType: NANOSECONDS
          timeUnitSize: 5
        singleValueField: true
        maxLength: 9
      properties:
        name:
          type: string
        incomingGranularitySpec:
          $ref: '#/components/schemas/TimeGranularitySpec'
        dataType:
          enum:
          - INT
          - LONG
          - FLOAT
          - DOUBLE
          - BIG_DECIMAL
          - BOOLEAN
          - TIMESTAMP
          - STRING
          - JSON
          - BYTES
          - STRUCT
          - MAP
          - LIST
          type: string
        outgoingGranularitySpec:
          $ref: '#/components/schemas/TimeGranularitySpec'
        singleValueField:
          type: boolean
        maxLength:
          format: int32
          type: integer
        transformFunction:
          type: string
        defaultNullValue:
          properties: {}
          type: object
        virtualColumnProvider:
          type: string
        defaultNullValueString:
          type: string
      type: object
    TimeGranularitySpec:
      example:
        dataType: INT
        timeFormat: timeFormat
        name: name
        timeType: NANOSECONDS
        timeUnitSize: 5
      properties:
        name:
          type: string
        dataType:
          enum:
          - INT
          - LONG
          - FLOAT
          - DOUBLE
          - BIG_DECIMAL
          - BOOLEAN
          - TIMESTAMP
          - STRING
          - JSON
          - BYTES
          - STRUCT
          - MAP
          - LIST
          type: string
        timeType:
          enum:
          - NANOSECONDS
          - MICROSECONDS
          - MILLISECONDS
          - SECONDS
          - MINUTES
          - HOURS
          - DAYS
          type: string
        timeUnitSize:
          format: int32
          type: integer
        timeFormat:
          type: string
      type: object
    TimestampConfig:
      example:
        granularities:
        - MILLISECOND
        - MILLISECOND
      properties:
        granularities:
          items:
            enum:
            - MILLISECOND
            - SECOND
            - MINUTE
            - HOUR
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR
            type: string
          readOnly: true
          type: array
      type: object
    TransformConfig:
      example:
        transformFunction: transformFunction
        columnName: columnName
      properties:
        columnName:
          readOnly: true
          type: string
        transformFunction:
          readOnly: true
          type: string
      type: object
    TunerConfig:
      example:
        name: name
        tunerProperties:
          key: tunerProperties
      properties:
        name:
          type: string
        tunerProperties:
          additionalProperties:
            type: string
          type: object
      required:
      - name
      type: object
    UpsertConfig:
      example:
        mode: FULL
        hashFunction: NONE
        metadataManagerConfigs:
          key: metadataManagerConfigs
        comparisonColumns:
        - comparisonColumns
        - comparisonColumns
        partialUpsertStrategies:
          key: APPEND
        enableSnapshot: true
        metadataManagerClass: metadataManagerClass
        defaultPartialUpsertStrategy: APPEND
      properties:
        mode:
          enum:
          - FULL
          - PARTIAL
          - NONE
          type: string
        comparisonColumns:
          items:
            type: string
          type: array
        hashFunction:
          enum:
          - NONE
          - MD5
          - MURMUR3
          type: string
        partialUpsertStrategies:
          additionalProperties:
            enum:
            - APPEND
            - IGNORE
            - INCREMENT
            - MAX
            - MIN
            - OVERWRITE
            - UNION
            type: string
          type: object
        defaultPartialUpsertStrategy:
          enum:
          - APPEND
          - IGNORE
          - INCREMENT
          - MAX
          - MIN
          - OVERWRITE
          - UNION
          type: string
        enableSnapshot:
          type: boolean
        metadataManagerClass:
          type: string
        metadataManagerConfigs:
          additionalProperties:
            type: string
          type: object
      type: object
    RebalanceStateStats:
      example:
        _segmentsMissing: 6
        _percentSegmentsToRebalance: 5.962133916683182
        _segmentsToRebalance: 1
        _replicasToRebalance: 5
      properties:
        _segmentsMissing:
          format: int32
          type: integer
        _segmentsToRebalance:
          format: int32
          type: integer
        _percentSegmentsToRebalance:
          format: double
          type: number
        _replicasToRebalance:
          format: int32
          type: integer
      type: object
    ServerRebalanceJobStatusResponse:
      example:
        tableRebalanceProgressStats:
          initialToTargetStateConvergence:
            _segmentsMissing: 6
            _percentSegmentsToRebalance: 5.962133916683182
            _segmentsToRebalance: 1
            _replicasToRebalance: 5
          externalViewToIdealStateConvergence:
            _segmentsMissing: 6
            _percentSegmentsToRebalance: 5.962133916683182
            _segmentsToRebalance: 1
            _replicasToRebalance: 5
          completionStatusMsg: completionStatusMsg
          startTimeMs: 0
          timeToFinishInSeconds: 2
          currentToTargetConvergence:
            _segmentsMissing: 6
            _percentSegmentsToRebalance: 5.962133916683182
            _segmentsToRebalance: 1
            _replicasToRebalance: 5
          status: status
        timeElapsedSinceStartInSeconds: 7
      properties:
        tableRebalanceProgressStats:
          $ref: '#/components/schemas/TableRebalanceProgressStats'
        timeElapsedSinceStartInSeconds:
          format: int64
          type: integer
      type: object
    TableRebalanceProgressStats:
      example:
        initialToTargetStateConvergence:
          _segmentsMissing: 6
          _percentSegmentsToRebalance: 5.962133916683182
          _segmentsToRebalance: 1
          _replicasToRebalance: 5
        externalViewToIdealStateConvergence:
          _segmentsMissing: 6
          _percentSegmentsToRebalance: 5.962133916683182
          _segmentsToRebalance: 1
          _replicasToRebalance: 5
        completionStatusMsg: completionStatusMsg
        startTimeMs: 0
        timeToFinishInSeconds: 2
        currentToTargetConvergence:
          _segmentsMissing: 6
          _percentSegmentsToRebalance: 5.962133916683182
          _segmentsToRebalance: 1
          _replicasToRebalance: 5
        status: status
      properties:
        status:
          type: string
        startTimeMs:
          format: int64
          type: integer
        initialToTargetStateConvergence:
          $ref: '#/components/schemas/RebalanceStateStats'
        timeToFinishInSeconds:
          format: int64
          type: integer
        externalViewToIdealStateConvergence:
          $ref: '#/components/schemas/RebalanceStateStats'
        currentToTargetConvergence:
          $ref: '#/components/schemas/RebalanceStateStats'
        completionStatusMsg:
          type: string
      type: object
    StringResultResponse:
      example:
        result: result
      properties:
        result:
          type: string
      type: object
    PinotTaskConfig:
      example:
        configs:
          key: configs
        taskType: taskType
        taskId: taskId
        tableName: tableName
      properties:
        tableName:
          type: string
        configs:
          additionalProperties:
            type: string
          type: object
        taskId:
          type: string
        taskType:
          type: string
      type: object
    JobKey:
      example:
        name: name
        group: group
      properties:
        name:
          type: string
        group:
          type: string
      type: object
    AdhocTaskConfig:
      example:
        taskType: taskType
        taskConfigs:
          key: taskConfigs
        taskName: taskName
        tableName: tableName
      properties:
        taskType:
          readOnly: true
          type: string
        tableName:
          readOnly: true
          type: string
        taskName:
          readOnly: true
          type: string
        taskConfigs:
          additionalProperties:
            type: string
          readOnly: true
          type: object
      required:
      - tableName
      - taskType
      type: object
    TaskCount:
      example:
        running: 1
        total: 0
        waiting: 5
        completed: 6
        error: 5
        unknown: 2
      properties:
        total:
          format: int32
          type: integer
        completed:
          format: int32
          type: integer
        running:
          format: int32
          type: integer
        waiting:
          format: int32
          type: integer
        error:
          format: int32
          type: integer
        unknown:
          format: int32
          type: integer
      type: object
    SubtaskDebugInfo:
      example:
        finishTime: finishTime
        startTime: startTime
        state: INIT
        taskConfig:
          configs:
            key: configs
          taskType: taskType
          taskId: taskId
          tableName: tableName
        taskId: taskId
        participant: participant
        info: info
      properties:
        taskId:
          type: string
        state:
          enum:
          - INIT
          - RUNNING
          - STOPPED
          - COMPLETED
          - TIMED_OUT
          - TASK_ERROR
          - TASK_ABORTED
          - ERROR
          - DROPPED
          type: string
        startTime:
          type: string
        finishTime:
          type: string
        participant:
          type: string
        info:
          type: string
        taskConfig:
          $ref: '#/components/schemas/PinotTaskConfig'
      type: object
    TaskDebugInfo:
      example:
        subtaskInfos:
        - finishTime: finishTime
          startTime: startTime
          state: INIT
          taskConfig:
            configs:
              key: configs
            taskType: taskType
            taskId: taskId
            tableName: tableName
          taskId: taskId
          participant: participant
          info: info
        - finishTime: finishTime
          startTime: startTime
          state: INIT
          taskConfig:
            configs:
              key: configs
            taskType: taskType
            taskId: taskId
            tableName: tableName
          taskId: taskId
          participant: participant
          info: info
        finishTime: finishTime
        taskState: NOT_STARTED
        subtaskCount:
          running: 1
          total: 0
          waiting: 5
          completed: 6
          error: 5
          unknown: 2
        startTime: startTime
        executionStartTime: executionStartTime
      properties:
        taskState:
          enum:
          - NOT_STARTED
          - IN_PROGRESS
          - STOPPED
          - STOPPING
          - FAILED
          - COMPLETED
          - ABORTED
          - TIMED_OUT
          - TIMING_OUT
          - FAILING
          type: string
        subtaskCount:
          $ref: '#/components/schemas/TaskCount'
        startTime:
          type: string
        executionStartTime:
          type: string
        finishTime:
          type: string
        subtaskInfos:
          items:
            $ref: '#/components/schemas/SubtaskDebugInfo'
          type: array
      type: object
    Tenant:
      example:
        numberOfInstances: 0
        offlineInstances: 6
        tenantRole: SERVER
        tenantName: tenantName
        realtimeInstances: 1
      properties:
        tenantRole:
          enum:
          - SERVER
          - BROKER
          - MINION
          readOnly: true
          type: string
        tenantName:
          readOnly: true
          type: string
        numberOfInstances:
          format: int32
          readOnly: true
          type: integer
        offlineInstances:
          format: int32
          readOnly: true
          type: integer
        realtimeInstances:
          format: int32
          readOnly: true
          type: integer
      required:
      - tenantName
      - tenantRole
      type: object
    TenantsList:
      properties:
        SERVER_TENANTS:
          items:
            type: string
          type: array
          uniqueItems: true
        BROKER_TENANTS:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    TenantMetadata:
      example:
        tenantName: tenantName
        OfflineServerInstances:
        - OfflineServerInstances
        - OfflineServerInstances
        ServerInstances:
        - ServerInstances
        - ServerInstances
        RealtimeServerInstances:
        - RealtimeServerInstances
        - RealtimeServerInstances
        BrokerInstances:
        - BrokerInstances
        - BrokerInstances
      properties:
        ServerInstances:
          items:
            type: string
          type: array
          uniqueItems: true
        OfflineServerInstances:
          items:
            type: string
          type: array
          uniqueItems: true
        RealtimeServerInstances:
          items:
            type: string
          type: array
          uniqueItems: true
        BrokerInstances:
          items:
            type: string
          type: array
          uniqueItems: true
        tenantName:
          type: string
      type: object
    SegmentSizeDetails:
      properties:
        reportedSizeInBytes:
          format: int64
          type: integer
        estimatedSizeInBytes:
          format: int64
          type: integer
        serverInfo:
          additionalProperties:
            $ref: '#/components/schemas/SegmentSizeInfo'
          type: object
      type: object
    SegmentSizeInfo:
      properties:
        segmentName:
          readOnly: true
          type: string
        diskSizeInBytes:
          format: int64
          readOnly: true
          type: integer
      type: object
    TableSizeDetails:
      properties:
        tableName:
          type: string
        reportedSizeInBytes:
          format: int64
          type: integer
        estimatedSizeInBytes:
          format: int64
          type: integer
        offlineSegments:
          $ref: '#/components/schemas/TableSubTypeSizeDetails'
        realtimeSegments:
          $ref: '#/components/schemas/TableSubTypeSizeDetails'
      type: object
    TableSubTypeSizeDetails:
      properties:
        reportedSizeInBytes:
          format: int64
          type: integer
        estimatedSizeInBytes:
          format: int64
          type: integer
        missingSegments:
          format: int32
          type: integer
        segments:
          additionalProperties:
            $ref: '#/components/schemas/SegmentSizeDetails'
          type: object
      type: object
    TableView:
      example:
        REALTIME:
          key:
            key: REALTIME
        OFFLINE:
          key:
            key: OFFLINE
      properties:
        OFFLINE:
          additionalProperties:
            additionalProperties:
              type: string
            type: object
          type: object
        REALTIME:
          additionalProperties:
            additionalProperties:
              type: string
            type: object
          type: object
      type: object
    TableWriteConfig:
      example:
        producerType: producerType
        producerConfig:
          key: producerConfig
        encoderConfig:
          key: encoderConfig
        partitionColumns:
        - partitionColumns
        - partitionColumns
        encoderClass: encoderClass
        topic: topic
      properties:
        topic:
          type: string
        producerConfig:
          additionalProperties:
            type: string
          type: object
        encoderConfig:
          additionalProperties:
            type: string
          type: object
        encoderClass:
          type: string
        producerType:
          type: string
        partitionColumns:
          items:
            type: string
          type: array
      type: object
    WritePayload:
      example:
        columnNames:
        - columnNames
        - columnNames
        values:
        - key: "{}"
        - key: "{}"
        rows:
        - - "{}"
          - "{}"
        - - "{}"
          - "{}"
      properties:
        values:
          items:
            additionalProperties:
              properties: {}
              type: object
            type: object
          type: array
        columnNames:
          items:
            type: string
          type: array
        rows:
          items:
            items:
              properties: {}
              type: object
            type: array
          type: array
      type: object
  securitySchemes:
    oauth:
      description: ""
      in: header
      name: Authorization
      type: apiKey
x-original-swagger-version: "2.0"
