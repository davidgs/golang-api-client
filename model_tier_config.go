/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TierConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TierConfig{}

// TierConfig struct for TierConfig
type TierConfig struct {
	Name string `json:"name"`
	SegmentSelectorType string `json:"segmentSelectorType"`
	SegmentAge *string `json:"segmentAge,omitempty"`
	SegmentList []string `json:"segmentList,omitempty"`
	StorageType string `json:"storageType"`
	ServerTag *string `json:"serverTag,omitempty"`
	TierBackend *string `json:"tierBackend,omitempty"`
	TierBackendProperties *map[string]string `json:"tierBackendProperties,omitempty"`
}

// NewTierConfig instantiates a new TierConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTierConfig(name string, segmentSelectorType string, storageType string) *TierConfig {
	this := TierConfig{}
	this.Name = name
	this.SegmentSelectorType = segmentSelectorType
	this.StorageType = storageType
	return &this
}

// NewTierConfigWithDefaults instantiates a new TierConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTierConfigWithDefaults() *TierConfig {
	this := TierConfig{}
	return &this
}

// GetName returns the Name field value
func (o *TierConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TierConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TierConfig) SetName(v string) {
	o.Name = v
}

// GetSegmentSelectorType returns the SegmentSelectorType field value
func (o *TierConfig) GetSegmentSelectorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SegmentSelectorType
}

// GetSegmentSelectorTypeOk returns a tuple with the SegmentSelectorType field value
// and a boolean to check if the value has been set.
func (o *TierConfig) GetSegmentSelectorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SegmentSelectorType, true
}

// SetSegmentSelectorType sets field value
func (o *TierConfig) SetSegmentSelectorType(v string) {
	o.SegmentSelectorType = v
}

// GetSegmentAge returns the SegmentAge field value if set, zero value otherwise.
func (o *TierConfig) GetSegmentAge() string {
	if o == nil || IsNil(o.SegmentAge) {
		var ret string
		return ret
	}
	return *o.SegmentAge
}

// GetSegmentAgeOk returns a tuple with the SegmentAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierConfig) GetSegmentAgeOk() (*string, bool) {
	if o == nil || IsNil(o.SegmentAge) {
		return nil, false
	}
	return o.SegmentAge, true
}

// HasSegmentAge returns a boolean if a field has been set.
func (o *TierConfig) HasSegmentAge() bool {
	if o != nil && !IsNil(o.SegmentAge) {
		return true
	}

	return false
}

// SetSegmentAge gets a reference to the given string and assigns it to the SegmentAge field.
func (o *TierConfig) SetSegmentAge(v string) {
	o.SegmentAge = &v
}

// GetSegmentList returns the SegmentList field value if set, zero value otherwise.
func (o *TierConfig) GetSegmentList() []string {
	if o == nil || IsNil(o.SegmentList) {
		var ret []string
		return ret
	}
	return o.SegmentList
}

// GetSegmentListOk returns a tuple with the SegmentList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierConfig) GetSegmentListOk() ([]string, bool) {
	if o == nil || IsNil(o.SegmentList) {
		return nil, false
	}
	return o.SegmentList, true
}

// HasSegmentList returns a boolean if a field has been set.
func (o *TierConfig) HasSegmentList() bool {
	if o != nil && !IsNil(o.SegmentList) {
		return true
	}

	return false
}

// SetSegmentList gets a reference to the given []string and assigns it to the SegmentList field.
func (o *TierConfig) SetSegmentList(v []string) {
	o.SegmentList = v
}

// GetStorageType returns the StorageType field value
func (o *TierConfig) GetStorageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value
// and a boolean to check if the value has been set.
func (o *TierConfig) GetStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageType, true
}

// SetStorageType sets field value
func (o *TierConfig) SetStorageType(v string) {
	o.StorageType = v
}

// GetServerTag returns the ServerTag field value if set, zero value otherwise.
func (o *TierConfig) GetServerTag() string {
	if o == nil || IsNil(o.ServerTag) {
		var ret string
		return ret
	}
	return *o.ServerTag
}

// GetServerTagOk returns a tuple with the ServerTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierConfig) GetServerTagOk() (*string, bool) {
	if o == nil || IsNil(o.ServerTag) {
		return nil, false
	}
	return o.ServerTag, true
}

// HasServerTag returns a boolean if a field has been set.
func (o *TierConfig) HasServerTag() bool {
	if o != nil && !IsNil(o.ServerTag) {
		return true
	}

	return false
}

// SetServerTag gets a reference to the given string and assigns it to the ServerTag field.
func (o *TierConfig) SetServerTag(v string) {
	o.ServerTag = &v
}

// GetTierBackend returns the TierBackend field value if set, zero value otherwise.
func (o *TierConfig) GetTierBackend() string {
	if o == nil || IsNil(o.TierBackend) {
		var ret string
		return ret
	}
	return *o.TierBackend
}

// GetTierBackendOk returns a tuple with the TierBackend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierConfig) GetTierBackendOk() (*string, bool) {
	if o == nil || IsNil(o.TierBackend) {
		return nil, false
	}
	return o.TierBackend, true
}

// HasTierBackend returns a boolean if a field has been set.
func (o *TierConfig) HasTierBackend() bool {
	if o != nil && !IsNil(o.TierBackend) {
		return true
	}

	return false
}

// SetTierBackend gets a reference to the given string and assigns it to the TierBackend field.
func (o *TierConfig) SetTierBackend(v string) {
	o.TierBackend = &v
}

// GetTierBackendProperties returns the TierBackendProperties field value if set, zero value otherwise.
func (o *TierConfig) GetTierBackendProperties() map[string]string {
	if o == nil || IsNil(o.TierBackendProperties) {
		var ret map[string]string
		return ret
	}
	return *o.TierBackendProperties
}

// GetTierBackendPropertiesOk returns a tuple with the TierBackendProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierConfig) GetTierBackendPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.TierBackendProperties) {
		return nil, false
	}
	return o.TierBackendProperties, true
}

// HasTierBackendProperties returns a boolean if a field has been set.
func (o *TierConfig) HasTierBackendProperties() bool {
	if o != nil && !IsNil(o.TierBackendProperties) {
		return true
	}

	return false
}

// SetTierBackendProperties gets a reference to the given map[string]string and assigns it to the TierBackendProperties field.
func (o *TierConfig) SetTierBackendProperties(v map[string]string) {
	o.TierBackendProperties = &v
}

func (o TierConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TierConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: name is readOnly
	// skip: segmentSelectorType is readOnly
	// skip: segmentAge is readOnly
	// skip: segmentList is readOnly
	// skip: storageType is readOnly
	// skip: serverTag is readOnly
	// skip: tierBackend is readOnly
	// skip: tierBackendProperties is readOnly
	return toSerialize, nil
}

type NullableTierConfig struct {
	value *TierConfig
	isSet bool
}

func (v NullableTierConfig) Get() *TierConfig {
	return v.value
}

func (v *NullableTierConfig) Set(val *TierConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTierConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTierConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTierConfig(val *TierConfig) *NullableTierConfig {
	return &NullableTierConfig{value: val, isSet: true}
}

func (v NullableTierConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTierConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


