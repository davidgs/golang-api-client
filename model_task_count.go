/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaskCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskCount{}

// TaskCount struct for TaskCount
type TaskCount struct {
	Total *int32 `json:"total,omitempty"`
	Completed *int32 `json:"completed,omitempty"`
	Running *int32 `json:"running,omitempty"`
	Waiting *int32 `json:"waiting,omitempty"`
	Error *int32 `json:"error,omitempty"`
	Unknown *int32 `json:"unknown,omitempty"`
}

// NewTaskCount instantiates a new TaskCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskCount() *TaskCount {
	this := TaskCount{}
	return &this
}

// NewTaskCountWithDefaults instantiates a new TaskCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskCountWithDefaults() *TaskCount {
	this := TaskCount{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *TaskCount) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCount) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *TaskCount) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *TaskCount) SetTotal(v int32) {
	o.Total = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *TaskCount) GetCompleted() int32 {
	if o == nil || IsNil(o.Completed) {
		var ret int32
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCount) GetCompletedOk() (*int32, bool) {
	if o == nil || IsNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *TaskCount) HasCompleted() bool {
	if o != nil && !IsNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given int32 and assigns it to the Completed field.
func (o *TaskCount) SetCompleted(v int32) {
	o.Completed = &v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *TaskCount) GetRunning() int32 {
	if o == nil || IsNil(o.Running) {
		var ret int32
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCount) GetRunningOk() (*int32, bool) {
	if o == nil || IsNil(o.Running) {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *TaskCount) HasRunning() bool {
	if o != nil && !IsNil(o.Running) {
		return true
	}

	return false
}

// SetRunning gets a reference to the given int32 and assigns it to the Running field.
func (o *TaskCount) SetRunning(v int32) {
	o.Running = &v
}

// GetWaiting returns the Waiting field value if set, zero value otherwise.
func (o *TaskCount) GetWaiting() int32 {
	if o == nil || IsNil(o.Waiting) {
		var ret int32
		return ret
	}
	return *o.Waiting
}

// GetWaitingOk returns a tuple with the Waiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCount) GetWaitingOk() (*int32, bool) {
	if o == nil || IsNil(o.Waiting) {
		return nil, false
	}
	return o.Waiting, true
}

// HasWaiting returns a boolean if a field has been set.
func (o *TaskCount) HasWaiting() bool {
	if o != nil && !IsNil(o.Waiting) {
		return true
	}

	return false
}

// SetWaiting gets a reference to the given int32 and assigns it to the Waiting field.
func (o *TaskCount) SetWaiting(v int32) {
	o.Waiting = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *TaskCount) GetError() int32 {
	if o == nil || IsNil(o.Error) {
		var ret int32
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCount) GetErrorOk() (*int32, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *TaskCount) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given int32 and assigns it to the Error field.
func (o *TaskCount) SetError(v int32) {
	o.Error = &v
}

// GetUnknown returns the Unknown field value if set, zero value otherwise.
func (o *TaskCount) GetUnknown() int32 {
	if o == nil || IsNil(o.Unknown) {
		var ret int32
		return ret
	}
	return *o.Unknown
}

// GetUnknownOk returns a tuple with the Unknown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCount) GetUnknownOk() (*int32, bool) {
	if o == nil || IsNil(o.Unknown) {
		return nil, false
	}
	return o.Unknown, true
}

// HasUnknown returns a boolean if a field has been set.
func (o *TaskCount) HasUnknown() bool {
	if o != nil && !IsNil(o.Unknown) {
		return true
	}

	return false
}

// SetUnknown gets a reference to the given int32 and assigns it to the Unknown field.
func (o *TaskCount) SetUnknown(v int32) {
	o.Unknown = &v
}

func (o TaskCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !IsNil(o.Running) {
		toSerialize["running"] = o.Running
	}
	if !IsNil(o.Waiting) {
		toSerialize["waiting"] = o.Waiting
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Unknown) {
		toSerialize["unknown"] = o.Unknown
	}
	return toSerialize, nil
}

type NullableTaskCount struct {
	value *TaskCount
	isSet bool
}

func (v NullableTaskCount) Get() *TaskCount {
	return v.value
}

func (v *NullableTaskCount) Set(val *TaskCount) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskCount) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskCount(val *TaskCount) *NullableTaskCount {
	return &NullableTaskCount{value: val, isSet: true}
}

func (v NullableTaskCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


