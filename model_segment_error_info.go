/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SegmentErrorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SegmentErrorInfo{}

// SegmentErrorInfo struct for SegmentErrorInfo
type SegmentErrorInfo struct {
	Timestamp *string `json:"timestamp,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	StackTrace *string `json:"stackTrace,omitempty"`
}

// NewSegmentErrorInfo instantiates a new SegmentErrorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegmentErrorInfo() *SegmentErrorInfo {
	this := SegmentErrorInfo{}
	return &this
}

// NewSegmentErrorInfoWithDefaults instantiates a new SegmentErrorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentErrorInfoWithDefaults() *SegmentErrorInfo {
	this := SegmentErrorInfo{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *SegmentErrorInfo) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentErrorInfo) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SegmentErrorInfo) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *SegmentErrorInfo) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *SegmentErrorInfo) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentErrorInfo) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *SegmentErrorInfo) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *SegmentErrorInfo) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetStackTrace returns the StackTrace field value if set, zero value otherwise.
func (o *SegmentErrorInfo) GetStackTrace() string {
	if o == nil || IsNil(o.StackTrace) {
		var ret string
		return ret
	}
	return *o.StackTrace
}

// GetStackTraceOk returns a tuple with the StackTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentErrorInfo) GetStackTraceOk() (*string, bool) {
	if o == nil || IsNil(o.StackTrace) {
		return nil, false
	}
	return o.StackTrace, true
}

// HasStackTrace returns a boolean if a field has been set.
func (o *SegmentErrorInfo) HasStackTrace() bool {
	if o != nil && !IsNil(o.StackTrace) {
		return true
	}

	return false
}

// SetStackTrace gets a reference to the given string and assigns it to the StackTrace field.
func (o *SegmentErrorInfo) SetStackTrace(v string) {
	o.StackTrace = &v
}

func (o SegmentErrorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SegmentErrorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: timestamp is readOnly
	// skip: errorMessage is readOnly
	// skip: stackTrace is readOnly
	return toSerialize, nil
}

type NullableSegmentErrorInfo struct {
	value *SegmentErrorInfo
	isSet bool
}

func (v NullableSegmentErrorInfo) Get() *SegmentErrorInfo {
	return v.value
}

func (v *NullableSegmentErrorInfo) Set(val *SegmentErrorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentErrorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentErrorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentErrorInfo(val *SegmentErrorInfo) *NullableSegmentErrorInfo {
	return &NullableSegmentErrorInfo{value: val, isSet: true}
}

func (v NullableSegmentErrorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentErrorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


