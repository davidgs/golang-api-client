/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SegmentDebugInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SegmentDebugInfo{}

// SegmentDebugInfo struct for SegmentDebugInfo
type SegmentDebugInfo struct {
	SegmentName *string `json:"segmentName,omitempty"`
	ServerState *map[string]SegmentState `json:"serverState,omitempty"`
}

// NewSegmentDebugInfo instantiates a new SegmentDebugInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegmentDebugInfo() *SegmentDebugInfo {
	this := SegmentDebugInfo{}
	return &this
}

// NewSegmentDebugInfoWithDefaults instantiates a new SegmentDebugInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentDebugInfoWithDefaults() *SegmentDebugInfo {
	this := SegmentDebugInfo{}
	return &this
}

// GetSegmentName returns the SegmentName field value if set, zero value otherwise.
func (o *SegmentDebugInfo) GetSegmentName() string {
	if o == nil || IsNil(o.SegmentName) {
		var ret string
		return ret
	}
	return *o.SegmentName
}

// GetSegmentNameOk returns a tuple with the SegmentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentDebugInfo) GetSegmentNameOk() (*string, bool) {
	if o == nil || IsNil(o.SegmentName) {
		return nil, false
	}
	return o.SegmentName, true
}

// HasSegmentName returns a boolean if a field has been set.
func (o *SegmentDebugInfo) HasSegmentName() bool {
	if o != nil && !IsNil(o.SegmentName) {
		return true
	}

	return false
}

// SetSegmentName gets a reference to the given string and assigns it to the SegmentName field.
func (o *SegmentDebugInfo) SetSegmentName(v string) {
	o.SegmentName = &v
}

// GetServerState returns the ServerState field value if set, zero value otherwise.
func (o *SegmentDebugInfo) GetServerState() map[string]SegmentState {
	if o == nil || IsNil(o.ServerState) {
		var ret map[string]SegmentState
		return ret
	}
	return *o.ServerState
}

// GetServerStateOk returns a tuple with the ServerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentDebugInfo) GetServerStateOk() (*map[string]SegmentState, bool) {
	if o == nil || IsNil(o.ServerState) {
		return nil, false
	}
	return o.ServerState, true
}

// HasServerState returns a boolean if a field has been set.
func (o *SegmentDebugInfo) HasServerState() bool {
	if o != nil && !IsNil(o.ServerState) {
		return true
	}

	return false
}

// SetServerState gets a reference to the given map[string]SegmentState and assigns it to the ServerState field.
func (o *SegmentDebugInfo) SetServerState(v map[string]SegmentState) {
	o.ServerState = &v
}

func (o SegmentDebugInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SegmentDebugInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: segmentName is readOnly
	// skip: serverState is readOnly
	return toSerialize, nil
}

type NullableSegmentDebugInfo struct {
	value *SegmentDebugInfo
	isSet bool
}

func (v NullableSegmentDebugInfo) Get() *SegmentDebugInfo {
	return v.value
}

func (v *NullableSegmentDebugInfo) Set(val *SegmentDebugInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentDebugInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentDebugInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentDebugInfo(val *SegmentDebugInfo) *NullableSegmentDebugInfo {
	return &NullableSegmentDebugInfo{value: val, isSet: true}
}

func (v NullableSegmentDebugInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentDebugInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


