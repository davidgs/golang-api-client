/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JsonIndexConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonIndexConfig{}

// JsonIndexConfig struct for JsonIndexConfig
type JsonIndexConfig struct {
	MaxLevels *int32 `json:"maxLevels,omitempty"`
	ExcludeArray *bool `json:"excludeArray,omitempty"`
	DisableCrossArrayUnnest *bool `json:"disableCrossArrayUnnest,omitempty"`
	IncludePaths []string `json:"includePaths,omitempty"`
	ExcludePaths []string `json:"excludePaths,omitempty"`
	ExcludeFields []string `json:"excludeFields,omitempty"`
}

// NewJsonIndexConfig instantiates a new JsonIndexConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonIndexConfig() *JsonIndexConfig {
	this := JsonIndexConfig{}
	return &this
}

// NewJsonIndexConfigWithDefaults instantiates a new JsonIndexConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonIndexConfigWithDefaults() *JsonIndexConfig {
	this := JsonIndexConfig{}
	return &this
}

// GetMaxLevels returns the MaxLevels field value if set, zero value otherwise.
func (o *JsonIndexConfig) GetMaxLevels() int32 {
	if o == nil || IsNil(o.MaxLevels) {
		var ret int32
		return ret
	}
	return *o.MaxLevels
}

// GetMaxLevelsOk returns a tuple with the MaxLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonIndexConfig) GetMaxLevelsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLevels) {
		return nil, false
	}
	return o.MaxLevels, true
}

// HasMaxLevels returns a boolean if a field has been set.
func (o *JsonIndexConfig) HasMaxLevels() bool {
	if o != nil && !IsNil(o.MaxLevels) {
		return true
	}

	return false
}

// SetMaxLevels gets a reference to the given int32 and assigns it to the MaxLevels field.
func (o *JsonIndexConfig) SetMaxLevels(v int32) {
	o.MaxLevels = &v
}

// GetExcludeArray returns the ExcludeArray field value if set, zero value otherwise.
func (o *JsonIndexConfig) GetExcludeArray() bool {
	if o == nil || IsNil(o.ExcludeArray) {
		var ret bool
		return ret
	}
	return *o.ExcludeArray
}

// GetExcludeArrayOk returns a tuple with the ExcludeArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonIndexConfig) GetExcludeArrayOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeArray) {
		return nil, false
	}
	return o.ExcludeArray, true
}

// HasExcludeArray returns a boolean if a field has been set.
func (o *JsonIndexConfig) HasExcludeArray() bool {
	if o != nil && !IsNil(o.ExcludeArray) {
		return true
	}

	return false
}

// SetExcludeArray gets a reference to the given bool and assigns it to the ExcludeArray field.
func (o *JsonIndexConfig) SetExcludeArray(v bool) {
	o.ExcludeArray = &v
}

// GetDisableCrossArrayUnnest returns the DisableCrossArrayUnnest field value if set, zero value otherwise.
func (o *JsonIndexConfig) GetDisableCrossArrayUnnest() bool {
	if o == nil || IsNil(o.DisableCrossArrayUnnest) {
		var ret bool
		return ret
	}
	return *o.DisableCrossArrayUnnest
}

// GetDisableCrossArrayUnnestOk returns a tuple with the DisableCrossArrayUnnest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonIndexConfig) GetDisableCrossArrayUnnestOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableCrossArrayUnnest) {
		return nil, false
	}
	return o.DisableCrossArrayUnnest, true
}

// HasDisableCrossArrayUnnest returns a boolean if a field has been set.
func (o *JsonIndexConfig) HasDisableCrossArrayUnnest() bool {
	if o != nil && !IsNil(o.DisableCrossArrayUnnest) {
		return true
	}

	return false
}

// SetDisableCrossArrayUnnest gets a reference to the given bool and assigns it to the DisableCrossArrayUnnest field.
func (o *JsonIndexConfig) SetDisableCrossArrayUnnest(v bool) {
	o.DisableCrossArrayUnnest = &v
}

// GetIncludePaths returns the IncludePaths field value if set, zero value otherwise.
func (o *JsonIndexConfig) GetIncludePaths() []string {
	if o == nil || IsNil(o.IncludePaths) {
		var ret []string
		return ret
	}
	return o.IncludePaths
}

// GetIncludePathsOk returns a tuple with the IncludePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonIndexConfig) GetIncludePathsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludePaths) {
		return nil, false
	}
	return o.IncludePaths, true
}

// HasIncludePaths returns a boolean if a field has been set.
func (o *JsonIndexConfig) HasIncludePaths() bool {
	if o != nil && !IsNil(o.IncludePaths) {
		return true
	}

	return false
}

// SetIncludePaths gets a reference to the given []string and assigns it to the IncludePaths field.
func (o *JsonIndexConfig) SetIncludePaths(v []string) {
	o.IncludePaths = v
}

// GetExcludePaths returns the ExcludePaths field value if set, zero value otherwise.
func (o *JsonIndexConfig) GetExcludePaths() []string {
	if o == nil || IsNil(o.ExcludePaths) {
		var ret []string
		return ret
	}
	return o.ExcludePaths
}

// GetExcludePathsOk returns a tuple with the ExcludePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonIndexConfig) GetExcludePathsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludePaths) {
		return nil, false
	}
	return o.ExcludePaths, true
}

// HasExcludePaths returns a boolean if a field has been set.
func (o *JsonIndexConfig) HasExcludePaths() bool {
	if o != nil && !IsNil(o.ExcludePaths) {
		return true
	}

	return false
}

// SetExcludePaths gets a reference to the given []string and assigns it to the ExcludePaths field.
func (o *JsonIndexConfig) SetExcludePaths(v []string) {
	o.ExcludePaths = v
}

// GetExcludeFields returns the ExcludeFields field value if set, zero value otherwise.
func (o *JsonIndexConfig) GetExcludeFields() []string {
	if o == nil || IsNil(o.ExcludeFields) {
		var ret []string
		return ret
	}
	return o.ExcludeFields
}

// GetExcludeFieldsOk returns a tuple with the ExcludeFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonIndexConfig) GetExcludeFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeFields) {
		return nil, false
	}
	return o.ExcludeFields, true
}

// HasExcludeFields returns a boolean if a field has been set.
func (o *JsonIndexConfig) HasExcludeFields() bool {
	if o != nil && !IsNil(o.ExcludeFields) {
		return true
	}

	return false
}

// SetExcludeFields gets a reference to the given []string and assigns it to the ExcludeFields field.
func (o *JsonIndexConfig) SetExcludeFields(v []string) {
	o.ExcludeFields = v
}

func (o JsonIndexConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonIndexConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxLevels) {
		toSerialize["maxLevels"] = o.MaxLevels
	}
	if !IsNil(o.ExcludeArray) {
		toSerialize["excludeArray"] = o.ExcludeArray
	}
	if !IsNil(o.DisableCrossArrayUnnest) {
		toSerialize["disableCrossArrayUnnest"] = o.DisableCrossArrayUnnest
	}
	if !IsNil(o.IncludePaths) {
		toSerialize["includePaths"] = o.IncludePaths
	}
	if !IsNil(o.ExcludePaths) {
		toSerialize["excludePaths"] = o.ExcludePaths
	}
	if !IsNil(o.ExcludeFields) {
		toSerialize["excludeFields"] = o.ExcludeFields
	}
	return toSerialize, nil
}

type NullableJsonIndexConfig struct {
	value *JsonIndexConfig
	isSet bool
}

func (v NullableJsonIndexConfig) Get() *JsonIndexConfig {
	return v.value
}

func (v *NullableJsonIndexConfig) Set(val *JsonIndexConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonIndexConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonIndexConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonIndexConfig(val *JsonIndexConfig) *NullableJsonIndexConfig {
	return &NullableJsonIndexConfig{value: val, isSet: true}
}

func (v NullableJsonIndexConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonIndexConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


