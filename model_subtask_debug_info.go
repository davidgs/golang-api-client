/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubtaskDebugInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubtaskDebugInfo{}

// SubtaskDebugInfo struct for SubtaskDebugInfo
type SubtaskDebugInfo struct {
	TaskId *string `json:"taskId,omitempty"`
	State *string `json:"state,omitempty"`
	StartTime *string `json:"startTime,omitempty"`
	FinishTime *string `json:"finishTime,omitempty"`
	Participant *string `json:"participant,omitempty"`
	Info *string `json:"info,omitempty"`
	TaskConfig *PinotTaskConfig `json:"taskConfig,omitempty"`
}

// NewSubtaskDebugInfo instantiates a new SubtaskDebugInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubtaskDebugInfo() *SubtaskDebugInfo {
	this := SubtaskDebugInfo{}
	return &this
}

// NewSubtaskDebugInfoWithDefaults instantiates a new SubtaskDebugInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubtaskDebugInfoWithDefaults() *SubtaskDebugInfo {
	this := SubtaskDebugInfo{}
	return &this
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *SubtaskDebugInfo) GetTaskId() string {
	if o == nil || IsNil(o.TaskId) {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskDebugInfo) GetTaskIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *SubtaskDebugInfo) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *SubtaskDebugInfo) SetTaskId(v string) {
	o.TaskId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SubtaskDebugInfo) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskDebugInfo) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SubtaskDebugInfo) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *SubtaskDebugInfo) SetState(v string) {
	o.State = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *SubtaskDebugInfo) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskDebugInfo) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *SubtaskDebugInfo) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *SubtaskDebugInfo) SetStartTime(v string) {
	o.StartTime = &v
}

// GetFinishTime returns the FinishTime field value if set, zero value otherwise.
func (o *SubtaskDebugInfo) GetFinishTime() string {
	if o == nil || IsNil(o.FinishTime) {
		var ret string
		return ret
	}
	return *o.FinishTime
}

// GetFinishTimeOk returns a tuple with the FinishTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskDebugInfo) GetFinishTimeOk() (*string, bool) {
	if o == nil || IsNil(o.FinishTime) {
		return nil, false
	}
	return o.FinishTime, true
}

// HasFinishTime returns a boolean if a field has been set.
func (o *SubtaskDebugInfo) HasFinishTime() bool {
	if o != nil && !IsNil(o.FinishTime) {
		return true
	}

	return false
}

// SetFinishTime gets a reference to the given string and assigns it to the FinishTime field.
func (o *SubtaskDebugInfo) SetFinishTime(v string) {
	o.FinishTime = &v
}

// GetParticipant returns the Participant field value if set, zero value otherwise.
func (o *SubtaskDebugInfo) GetParticipant() string {
	if o == nil || IsNil(o.Participant) {
		var ret string
		return ret
	}
	return *o.Participant
}

// GetParticipantOk returns a tuple with the Participant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskDebugInfo) GetParticipantOk() (*string, bool) {
	if o == nil || IsNil(o.Participant) {
		return nil, false
	}
	return o.Participant, true
}

// HasParticipant returns a boolean if a field has been set.
func (o *SubtaskDebugInfo) HasParticipant() bool {
	if o != nil && !IsNil(o.Participant) {
		return true
	}

	return false
}

// SetParticipant gets a reference to the given string and assigns it to the Participant field.
func (o *SubtaskDebugInfo) SetParticipant(v string) {
	o.Participant = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *SubtaskDebugInfo) GetInfo() string {
	if o == nil || IsNil(o.Info) {
		var ret string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskDebugInfo) GetInfoOk() (*string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *SubtaskDebugInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given string and assigns it to the Info field.
func (o *SubtaskDebugInfo) SetInfo(v string) {
	o.Info = &v
}

// GetTaskConfig returns the TaskConfig field value if set, zero value otherwise.
func (o *SubtaskDebugInfo) GetTaskConfig() PinotTaskConfig {
	if o == nil || IsNil(o.TaskConfig) {
		var ret PinotTaskConfig
		return ret
	}
	return *o.TaskConfig
}

// GetTaskConfigOk returns a tuple with the TaskConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskDebugInfo) GetTaskConfigOk() (*PinotTaskConfig, bool) {
	if o == nil || IsNil(o.TaskConfig) {
		return nil, false
	}
	return o.TaskConfig, true
}

// HasTaskConfig returns a boolean if a field has been set.
func (o *SubtaskDebugInfo) HasTaskConfig() bool {
	if o != nil && !IsNil(o.TaskConfig) {
		return true
	}

	return false
}

// SetTaskConfig gets a reference to the given PinotTaskConfig and assigns it to the TaskConfig field.
func (o *SubtaskDebugInfo) SetTaskConfig(v PinotTaskConfig) {
	o.TaskConfig = &v
}

func (o SubtaskDebugInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubtaskDebugInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaskId) {
		toSerialize["taskId"] = o.TaskId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.FinishTime) {
		toSerialize["finishTime"] = o.FinishTime
	}
	if !IsNil(o.Participant) {
		toSerialize["participant"] = o.Participant
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.TaskConfig) {
		toSerialize["taskConfig"] = o.TaskConfig
	}
	return toSerialize, nil
}

type NullableSubtaskDebugInfo struct {
	value *SubtaskDebugInfo
	isSet bool
}

func (v NullableSubtaskDebugInfo) Get() *SubtaskDebugInfo {
	return v.value
}

func (v *NullableSubtaskDebugInfo) Set(val *SubtaskDebugInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSubtaskDebugInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSubtaskDebugInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubtaskDebugInfo(val *SubtaskDebugInfo) *NullableSubtaskDebugInfo {
	return &NullableSubtaskDebugInfo{value: val, isSet: true}
}

func (v NullableSubtaskDebugInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubtaskDebugInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


