/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DimensionFieldSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DimensionFieldSpec{}

// DimensionFieldSpec struct for DimensionFieldSpec
type DimensionFieldSpec struct {
	Name *string `json:"name,omitempty"`
	MaxLength *int32 `json:"maxLength,omitempty"`
	DataType *string `json:"dataType,omitempty"`
	TransformFunction *string `json:"transformFunction,omitempty"`
	DefaultNullValue map[string]interface{} `json:"defaultNullValue,omitempty"`
	SingleValueField *bool `json:"singleValueField,omitempty"`
	VirtualColumnProvider *string `json:"virtualColumnProvider,omitempty"`
	DefaultNullValueString *string `json:"defaultNullValueString,omitempty"`
}

// NewDimensionFieldSpec instantiates a new DimensionFieldSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDimensionFieldSpec() *DimensionFieldSpec {
	this := DimensionFieldSpec{}
	return &this
}

// NewDimensionFieldSpecWithDefaults instantiates a new DimensionFieldSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDimensionFieldSpecWithDefaults() *DimensionFieldSpec {
	this := DimensionFieldSpec{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DimensionFieldSpec) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DimensionFieldSpec) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DimensionFieldSpec) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DimensionFieldSpec) SetName(v string) {
	o.Name = &v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *DimensionFieldSpec) GetMaxLength() int32 {
	if o == nil || IsNil(o.MaxLength) {
		var ret int32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DimensionFieldSpec) GetMaxLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *DimensionFieldSpec) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int32 and assigns it to the MaxLength field.
func (o *DimensionFieldSpec) SetMaxLength(v int32) {
	o.MaxLength = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *DimensionFieldSpec) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DimensionFieldSpec) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *DimensionFieldSpec) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *DimensionFieldSpec) SetDataType(v string) {
	o.DataType = &v
}

// GetTransformFunction returns the TransformFunction field value if set, zero value otherwise.
func (o *DimensionFieldSpec) GetTransformFunction() string {
	if o == nil || IsNil(o.TransformFunction) {
		var ret string
		return ret
	}
	return *o.TransformFunction
}

// GetTransformFunctionOk returns a tuple with the TransformFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DimensionFieldSpec) GetTransformFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.TransformFunction) {
		return nil, false
	}
	return o.TransformFunction, true
}

// HasTransformFunction returns a boolean if a field has been set.
func (o *DimensionFieldSpec) HasTransformFunction() bool {
	if o != nil && !IsNil(o.TransformFunction) {
		return true
	}

	return false
}

// SetTransformFunction gets a reference to the given string and assigns it to the TransformFunction field.
func (o *DimensionFieldSpec) SetTransformFunction(v string) {
	o.TransformFunction = &v
}

// GetDefaultNullValue returns the DefaultNullValue field value if set, zero value otherwise.
func (o *DimensionFieldSpec) GetDefaultNullValue() map[string]interface{} {
	if o == nil || IsNil(o.DefaultNullValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultNullValue
}

// GetDefaultNullValueOk returns a tuple with the DefaultNullValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DimensionFieldSpec) GetDefaultNullValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultNullValue) {
		return map[string]interface{}{}, false
	}
	return o.DefaultNullValue, true
}

// HasDefaultNullValue returns a boolean if a field has been set.
func (o *DimensionFieldSpec) HasDefaultNullValue() bool {
	if o != nil && !IsNil(o.DefaultNullValue) {
		return true
	}

	return false
}

// SetDefaultNullValue gets a reference to the given map[string]interface{} and assigns it to the DefaultNullValue field.
func (o *DimensionFieldSpec) SetDefaultNullValue(v map[string]interface{}) {
	o.DefaultNullValue = v
}

// GetSingleValueField returns the SingleValueField field value if set, zero value otherwise.
func (o *DimensionFieldSpec) GetSingleValueField() bool {
	if o == nil || IsNil(o.SingleValueField) {
		var ret bool
		return ret
	}
	return *o.SingleValueField
}

// GetSingleValueFieldOk returns a tuple with the SingleValueField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DimensionFieldSpec) GetSingleValueFieldOk() (*bool, bool) {
	if o == nil || IsNil(o.SingleValueField) {
		return nil, false
	}
	return o.SingleValueField, true
}

// HasSingleValueField returns a boolean if a field has been set.
func (o *DimensionFieldSpec) HasSingleValueField() bool {
	if o != nil && !IsNil(o.SingleValueField) {
		return true
	}

	return false
}

// SetSingleValueField gets a reference to the given bool and assigns it to the SingleValueField field.
func (o *DimensionFieldSpec) SetSingleValueField(v bool) {
	o.SingleValueField = &v
}

// GetVirtualColumnProvider returns the VirtualColumnProvider field value if set, zero value otherwise.
func (o *DimensionFieldSpec) GetVirtualColumnProvider() string {
	if o == nil || IsNil(o.VirtualColumnProvider) {
		var ret string
		return ret
	}
	return *o.VirtualColumnProvider
}

// GetVirtualColumnProviderOk returns a tuple with the VirtualColumnProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DimensionFieldSpec) GetVirtualColumnProviderOk() (*string, bool) {
	if o == nil || IsNil(o.VirtualColumnProvider) {
		return nil, false
	}
	return o.VirtualColumnProvider, true
}

// HasVirtualColumnProvider returns a boolean if a field has been set.
func (o *DimensionFieldSpec) HasVirtualColumnProvider() bool {
	if o != nil && !IsNil(o.VirtualColumnProvider) {
		return true
	}

	return false
}

// SetVirtualColumnProvider gets a reference to the given string and assigns it to the VirtualColumnProvider field.
func (o *DimensionFieldSpec) SetVirtualColumnProvider(v string) {
	o.VirtualColumnProvider = &v
}

// GetDefaultNullValueString returns the DefaultNullValueString field value if set, zero value otherwise.
func (o *DimensionFieldSpec) GetDefaultNullValueString() string {
	if o == nil || IsNil(o.DefaultNullValueString) {
		var ret string
		return ret
	}
	return *o.DefaultNullValueString
}

// GetDefaultNullValueStringOk returns a tuple with the DefaultNullValueString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DimensionFieldSpec) GetDefaultNullValueStringOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultNullValueString) {
		return nil, false
	}
	return o.DefaultNullValueString, true
}

// HasDefaultNullValueString returns a boolean if a field has been set.
func (o *DimensionFieldSpec) HasDefaultNullValueString() bool {
	if o != nil && !IsNil(o.DefaultNullValueString) {
		return true
	}

	return false
}

// SetDefaultNullValueString gets a reference to the given string and assigns it to the DefaultNullValueString field.
func (o *DimensionFieldSpec) SetDefaultNullValueString(v string) {
	o.DefaultNullValueString = &v
}

func (o DimensionFieldSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DimensionFieldSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MaxLength) {
		toSerialize["maxLength"] = o.MaxLength
	}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !IsNil(o.TransformFunction) {
		toSerialize["transformFunction"] = o.TransformFunction
	}
	if !IsNil(o.DefaultNullValue) {
		toSerialize["defaultNullValue"] = o.DefaultNullValue
	}
	if !IsNil(o.SingleValueField) {
		toSerialize["singleValueField"] = o.SingleValueField
	}
	if !IsNil(o.VirtualColumnProvider) {
		toSerialize["virtualColumnProvider"] = o.VirtualColumnProvider
	}
	if !IsNil(o.DefaultNullValueString) {
		toSerialize["defaultNullValueString"] = o.DefaultNullValueString
	}
	return toSerialize, nil
}

type NullableDimensionFieldSpec struct {
	value *DimensionFieldSpec
	isSet bool
}

func (v NullableDimensionFieldSpec) Get() *DimensionFieldSpec {
	return v.value
}

func (v *NullableDimensionFieldSpec) Set(val *DimensionFieldSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionFieldSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionFieldSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionFieldSpec(val *DimensionFieldSpec) *NullableDimensionFieldSpec {
	return &NullableDimensionFieldSpec{value: val, isSet: true}
}

func (v NullableDimensionFieldSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionFieldSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


