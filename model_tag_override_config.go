/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TagOverrideConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagOverrideConfig{}

// TagOverrideConfig struct for TagOverrideConfig
type TagOverrideConfig struct {
	RealtimeConsuming *string `json:"realtimeConsuming,omitempty"`
	RealtimeCompleted *string `json:"realtimeCompleted,omitempty"`
}

// NewTagOverrideConfig instantiates a new TagOverrideConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagOverrideConfig() *TagOverrideConfig {
	this := TagOverrideConfig{}
	return &this
}

// NewTagOverrideConfigWithDefaults instantiates a new TagOverrideConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagOverrideConfigWithDefaults() *TagOverrideConfig {
	this := TagOverrideConfig{}
	return &this
}

// GetRealtimeConsuming returns the RealtimeConsuming field value if set, zero value otherwise.
func (o *TagOverrideConfig) GetRealtimeConsuming() string {
	if o == nil || IsNil(o.RealtimeConsuming) {
		var ret string
		return ret
	}
	return *o.RealtimeConsuming
}

// GetRealtimeConsumingOk returns a tuple with the RealtimeConsuming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagOverrideConfig) GetRealtimeConsumingOk() (*string, bool) {
	if o == nil || IsNil(o.RealtimeConsuming) {
		return nil, false
	}
	return o.RealtimeConsuming, true
}

// HasRealtimeConsuming returns a boolean if a field has been set.
func (o *TagOverrideConfig) HasRealtimeConsuming() bool {
	if o != nil && !IsNil(o.RealtimeConsuming) {
		return true
	}

	return false
}

// SetRealtimeConsuming gets a reference to the given string and assigns it to the RealtimeConsuming field.
func (o *TagOverrideConfig) SetRealtimeConsuming(v string) {
	o.RealtimeConsuming = &v
}

// GetRealtimeCompleted returns the RealtimeCompleted field value if set, zero value otherwise.
func (o *TagOverrideConfig) GetRealtimeCompleted() string {
	if o == nil || IsNil(o.RealtimeCompleted) {
		var ret string
		return ret
	}
	return *o.RealtimeCompleted
}

// GetRealtimeCompletedOk returns a tuple with the RealtimeCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagOverrideConfig) GetRealtimeCompletedOk() (*string, bool) {
	if o == nil || IsNil(o.RealtimeCompleted) {
		return nil, false
	}
	return o.RealtimeCompleted, true
}

// HasRealtimeCompleted returns a boolean if a field has been set.
func (o *TagOverrideConfig) HasRealtimeCompleted() bool {
	if o != nil && !IsNil(o.RealtimeCompleted) {
		return true
	}

	return false
}

// SetRealtimeCompleted gets a reference to the given string and assigns it to the RealtimeCompleted field.
func (o *TagOverrideConfig) SetRealtimeCompleted(v string) {
	o.RealtimeCompleted = &v
}

func (o TagOverrideConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagOverrideConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: realtimeConsuming is readOnly
	// skip: realtimeCompleted is readOnly
	return toSerialize, nil
}

type NullableTagOverrideConfig struct {
	value *TagOverrideConfig
	isSet bool
}

func (v NullableTagOverrideConfig) Get() *TagOverrideConfig {
	return v.value
}

func (v *NullableTagOverrideConfig) Set(val *TagOverrideConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTagOverrideConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTagOverrideConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagOverrideConfig(val *TagOverrideConfig) *NullableTagOverrideConfig {
	return &NullableTagOverrideConfig{value: val, isSet: true}
}

func (v NullableTagOverrideConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagOverrideConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


