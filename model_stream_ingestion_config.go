/*
Pinot Controller API

APIs for accessing Pinot Controller information

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StreamIngestionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamIngestionConfig{}

// StreamIngestionConfig struct for StreamIngestionConfig
type StreamIngestionConfig struct {
	StreamConfigMaps []map[string]string `json:"streamConfigMaps,omitempty"`
}

// NewStreamIngestionConfig instantiates a new StreamIngestionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamIngestionConfig() *StreamIngestionConfig {
	this := StreamIngestionConfig{}
	return &this
}

// NewStreamIngestionConfigWithDefaults instantiates a new StreamIngestionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamIngestionConfigWithDefaults() *StreamIngestionConfig {
	this := StreamIngestionConfig{}
	return &this
}

// GetStreamConfigMaps returns the StreamConfigMaps field value if set, zero value otherwise.
func (o *StreamIngestionConfig) GetStreamConfigMaps() []map[string]string {
	if o == nil || IsNil(o.StreamConfigMaps) {
		var ret []map[string]string
		return ret
	}
	return o.StreamConfigMaps
}

// GetStreamConfigMapsOk returns a tuple with the StreamConfigMaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamIngestionConfig) GetStreamConfigMapsOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.StreamConfigMaps) {
		return nil, false
	}
	return o.StreamConfigMaps, true
}

// HasStreamConfigMaps returns a boolean if a field has been set.
func (o *StreamIngestionConfig) HasStreamConfigMaps() bool {
	if o != nil && !IsNil(o.StreamConfigMaps) {
		return true
	}

	return false
}

// SetStreamConfigMaps gets a reference to the given []map[string]string and assigns it to the StreamConfigMaps field.
func (o *StreamIngestionConfig) SetStreamConfigMaps(v []map[string]string) {
	o.StreamConfigMaps = v
}

func (o StreamIngestionConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamIngestionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: streamConfigMaps is readOnly
	return toSerialize, nil
}

type NullableStreamIngestionConfig struct {
	value *StreamIngestionConfig
	isSet bool
}

func (v NullableStreamIngestionConfig) Get() *StreamIngestionConfig {
	return v.value
}

func (v *NullableStreamIngestionConfig) Set(val *StreamIngestionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamIngestionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamIngestionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamIngestionConfig(val *StreamIngestionConfig) *NullableStreamIngestionConfig {
	return &NullableStreamIngestionConfig{value: val, isSet: true}
}

func (v NullableStreamIngestionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamIngestionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


